<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MyBatis常见问题</title>
    <url>/2018/12/01/mybatis-faq/</url>
    <content><![CDATA[<h1 id="MyBatis-FAQ"><a href="#MyBatis-FAQ" class="headerlink" title="MyBatis FAQ"></a>MyBatis FAQ</h1><p>用MyBatis有点点时间了，也碰到一些问题。放狗搜了之后，发现官方github上的<a href="https://github.com/mybatis/mybatis-3/wiki/FAQ">FAQ</a>已经有一些东西，是可以先看看的。</p>
<h2 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h2><p>之前用MyBatis进行批量插入时，一直都在MyBatis的Mapper.xml里面用<code>foreach</code>拼成一个比较长的SQL，这个时候MySQL和Oracle的拼法还有点不一样。MySQL可以直接用<code>INSERT INTO (id) VALUES (1),(2),(3)</code>这种形式，而Oracle不行，Oracle需要且<code>UNION ALL</code>或<code>FROM DUAL</code>或直接<code>BEGIN ... END</code>。</p>
<p>后来了解看<a href="https://www.renren.io/">renren security</a>的源码时候，发现有使用<a href="https://github.com/baomidou/mybatis-plus">MyBatis Plus</a>，在MyBatis Plus里面的<code>ServiceImpl&lt;M extends BaseMapper&lt;T&gt;, T&gt;</code>类中有个<code>saveBatch</code>方法，看日志发现他不是用接长SQL方法实现的，跟<code>Groovy</code>里面的<code>batch</code>操作是一样的。后来搜索后发现MyBatis其实有个<code>Executor</code>本身就带批量操作功能。。。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(ExecutorType.BATCH, <span class="literal">true</span>)) &#123;</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    userList.forEach(userMapper::insert);</span><br><span class="line">    sqlSession.flushStatements();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实我感觉应该是自己对JDBC不熟悉的原因吧，等有时间了去专门学习学习。这个我碰到一个坑，就是Spring boot进行JUnit测试操作的时候，在方法上加上<code>@Transactional</code>，事务回滚。可能是Spring boot test里面本身对事务就是这样处理的？这个有时间也是需要去解决的。&#x2F;&#x2F; TODO</p>
<h2 id="基本类型-String-Integer等-的列表映射"><a href="#基本类型-String-Integer等-的列表映射" class="headerlink" title="基本类型(String, Integer等)的列表映射"></a>基本类型(String, Integer等)的列表映射</h2><p>如果一个查询结果只有一列，这样返回的列表很容易进行映射。但是当一个对象里面有两个属性，一个ID，一个基本类型列表时，在之前查MyBatis文档的时候没有发现，后来在网上搜到了，映射的时候还是用<code>collection</code>，但是里面的只填一个<code>result column</code>。刚好在MyBatis FAQ里面也看到了。搬过来吧。</p>
<p>比如SQL搜索结果是</p>
<table>
<thead>
<tr>
<th>id</th>
<th>str</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>A</td>
</tr>
<tr>
<td>2</td>
<td>B</td>
</tr>
</tbody></table>
<p>Java对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeBean</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line">  <span class="keyword">private</span> List&lt;String&gt; strings;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>XML映射如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;SomeBean&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;strings&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;str&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>另外官方其它的FAQ还有变量使用时<code>#&#123;&#125;</code>和<code>$&#123;&#125;</code>的区别：$在生成ps的时候，就已经替换了，存在安全问题，#在生成ps的时候，是用?代替，运行的时候再进行值代入。</p>
<p>SQL LIKE，这个有好多实现的方法，比如String自带%，使用<code>bind</code>，直接在SQL里面使用字符拼接。</p>
<p>插入时将自动生成的key返回，在insert映射的时候加入<code>useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;</code>。</p>
<p>mapper方法传参使用变量名，这个直接使用注解<code>@Param</code>，或直接包装成对象或Map，或<code>mybatis.configuration.use-actual-param-name= true</code></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx双向证书认证</title>
    <url>/2018/07/13/CLIENT-SIDE-CERTIFICATE-AUTHENTICATION-WITH-NGINX/</url>
    <content><![CDATA[<h1 id="源起"><a href="#源起" class="headerlink" title="源起"></a>源起</h1><p>服务器已经跑起来很久了，但是有需求要限制客户端使用我们服务，一同事说到了SSL双向认证的问题，之前没有玩过，所以查了一些资料。后来想了下，以前其实也碰到过，就是银行和支付宝的证书认证嘛，通过证书对帐号进行认证。还有一些登录的时候不填帐号，只填密码，其实就是在客户证书来当用户名嘛。这个在Nginx双向认证的时候就可以解决，Nginx收到证书信息，然后反向代理到后面服务的时候，可以在头信息里面加一点东西，就可以解决客户登录的时候的帐号填写问题了。当然还可以又填用户名，又使用证书，然后核对证书的用户名和用户填的用户名是否一致，不致的情况下，可以直接吊销证书等等，可以做的事情就很多了。简单记下之前配置的过程吧。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>可以编辑openssl.cnf，设置一部分默认值，比如国别、组织、机构啊什么的。CentOS在<code>/etc/pki/tls</code>目录下面，Gentoo在<code>/etc/ssl</code>目录下面。因为服务是CentOS，下面默认是在CentOS下操作。如果非root用户操作，做部分修改就行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/pki/CA</span><br><span class="line"><span class="comment"># 好像是证书db</span></span><br><span class="line"><span class="built_in">touch</span> index.txt</span><br><span class="line"><span class="comment"># 证书序号，每生成一个证书自增1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;00&#x27;</span> &gt; serial</span><br></pre></td></tr></table></figure>

<h2 id="生成CA密钥和证书"><a href="#生成CA密钥和证书" class="headerlink" title="生成CA密钥和证书"></a>生成CA密钥和证书</h2><p>自已充当CA认证机构（一般为第三方权威机构），需要生成一个CA的密钥和证书，用于对其它用户的证书请求进行认证。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl genrsa -des3 -out ca-key.pem 4096</span><br><span class="line">openssl req -new -x509 -days 3650 -key ca-key.pem -out ca-cert.pem</span><br></pre></td></tr></table></figure>

<h2 id="生成自签名服务器证书（非必需）"><a href="#生成自签名服务器证书（非必需）" class="headerlink" title="生成自签名服务器证书（非必需）"></a>生成自签名服务器证书（非必需）</h2><p>如果可以，最好去第三方权威机构申请证书（非WoSign），或用letsencrypt的证书。实在不行，就像我们这样，自已生成证书算球的，就可以走下面的流程了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl genrsa -des3 -out server-key.pem 1024</span><br><span class="line"><span class="comment">#生成无密码的私钥，这样nginx加载的时候不会提示输入密码的地方卡住。或者直接上面那句不加-des3选项</span></span><br><span class="line">openssl rsa -<span class="keyword">in</span> server-key.pem -out server-key.key</span><br><span class="line"><span class="comment">#生成csr签名申请，用于CA对证书进行签名。重要：其中提示输入的CN common name必须填服务器的域名、泛域名或IP地址。</span></span><br><span class="line">openssl req -new -key server-key.pem -out server-req.csr</span><br><span class="line"><span class="comment">#用CA对服务器证书进行签名</span></span><br><span class="line">openssl ca -policy policy_anything -days 3650 -CA ca-cert.pem -CAkey ca-key.pem -<span class="keyword">in</span> server-req.csr -out server-cert.pem</span><br></pre></td></tr></table></figure>

<h2 id="生成客户证书"><a href="#生成客户证书" class="headerlink" title="生成客户证书"></a>生成客户证书</h2><p>与生成服务器证书基本一致，对于CA而言，是一样的。申请过来，进行认证。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl genrsa -des3 -out client-key.pem 1024</span><br><span class="line"><span class="comment">#生成csr签名申请，用于CA对证书进行签名。</span></span><br><span class="line">openssl req -new -key client-key.pem -out client-req.csr</span><br><span class="line"><span class="comment">#用CA对证书进行签名</span></span><br><span class="line">openssl ca -policy policy_anything -days 3650 -CA ca-cert.pem -CAkey ca-key.pem -<span class="keyword">in</span> client-req.csr -out client-cert.pem</span><br><span class="line"><span class="comment">#客户端证书转换为PKCS #12格式，客户端浏览器导入即可</span></span><br><span class="line"><span class="comment">#openssl pkcs12 -export -out client.pfx -inkey client-key.pem -in client-cert.pem -certfile ca-cert.pem</span></span><br><span class="line">openssl pkcs12 -<span class="built_in">export</span> -clcerts -<span class="keyword">in</span> client-cert.pem -inkey client-key.pem -out client.p12</span><br></pre></td></tr></table></figure>

<h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><figure class="highlight nginx"><figcaption><span>/etc/nginx/conf.d/default.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">listen</span>       [::]:<span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">server_name</span>  test.test;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment"># 可使用其它机构颁发的证书</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/server-cert.pem;</span><br><span class="line">    <span class="comment"># 服务器私钥</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/server-key.key;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 客户端证书认证</span></span><br><span class="line">    <span class="attribute">ssl_client_certificate</span> /etc/nginx/ssl/ca-cert.pem;</span><br><span class="line">    <span class="comment"># optional表示无证书可访问，用于无证书情况下的提示信息。</span></span><br><span class="line">    <span class="attribute">ssl_verify_client</span> optional;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">1h</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">10M</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 客户端证书认证失败显示400信息</span></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$ssl_client_verify</span> != <span class="string">&quot;SUCCESS&quot;</span>) &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">400</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/goolejuck/article/details/54089170">自签SSL证书实现Nginx配置https双向认证</a></li>
<li><a href="http://nategood.com/client-side-certificate-authentication-in-ngi">Client Side Certificate Auth in Nginx</a></li>
<li><a href="https://fardog.io/blog/2017/12/30/client-side-certificate-authentication-with-nginx/">CLIENT-SIDE CERTIFICATE AUTHENTICATION WITH NGINX</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>转投Idea</title>
    <url>/2017/02/20/Change-to-Idea/</url>
    <content><![CDATA[<h2 id="Eclipse出现问题"><a href="#Eclipse出现问题" class="headerlink" title="Eclipse出现问题"></a>Eclipse出现问题</h2><p>在前两天BuildShip升级后就出现问题，导致Eclipse中使用Gradle不方便，算了直接试试神器Intellij Idea吧。之前各版本信息：Eclipse(Version: Neon.2 Release (4.6.2))，BuildShip(Version: 2.0.0.v20170111-2019)，Gradle(Version: 3.3)</p>
<h2 id="转向Idea"><a href="#转向Idea" class="headerlink" title="转向Idea"></a>转向Idea</h2><p>好嘛，直接导入<code>build.gradle</code>就好了。如果之前不是用<code>Gradle</code>创建的工程，直接在项目目录下加入<code>build.gradle</code>重新导入就可以正常工作。之前在<code>Eclipse</code>中的<code>build.gradle</code>，供以后参考 :)</p>
<span id="more"></span>
<figure class="highlight gradle"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;java&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;war&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;eclipse&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;eclipse-wtp&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceCompatibility</span> = <span class="number">1.8</span></span><br><span class="line">webAppDirName = <span class="string">&#x27;WebContent&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceSets</span> &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        java &#123;</span><br><span class="line">            srcDir <span class="string">&#x27;src&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        resources &#123;</span><br><span class="line">            srcDir <span class="string">&#x27;resources&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    test &#123;</span><br><span class="line">        java &#123;</span><br><span class="line">            srcDir <span class="string">&#x27;test&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eclipse &#123;</span><br><span class="line">    wtp &#123;</span><br><span class="line">        facet &#123;</span><br><span class="line">            facet name: <span class="string">&#x27;jst.web&#x27;</span>, version: <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line">            facet name: <span class="string">&#x27;jst.java&#x27;</span>, version: <span class="string">&#x27;1.8&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">	<span class="keyword">compile</span> <span class="string">&quot;org.slf4j:slf4j-api:$slf4jVersion&quot;</span></span><br><span class="line">	<span class="keyword">compile</span> <span class="string">&quot;org.slf4j:jcl-over-slf4j:$slf4jVersion&quot;</span></span><br><span class="line">	<span class="keyword">compile</span> <span class="string">&quot;org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion&quot;</span></span><br><span class="line">	<span class="keyword">compile</span> <span class="string">&quot;org.apache.logging.log4j:log4j-core:$log4jVersion&quot;</span></span><br><span class="line">	<span class="keyword">compile</span> <span class="string">&quot;org.apache.logging.log4j:log4j-web:$log4jVersion&quot;</span></span><br><span class="line">	</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.springframework:spring-webmvc:$springVersion&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.springframework:spring-context-support:$springVersion&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.springframework:spring-orm:$springVersion&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//compile &quot;org.springframework:spring-aop:$springVersion&quot;</span></span><br><span class="line">    <span class="comment">//compile &quot;org.aspectj:aspectjweaver:$aspectJ&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.aspectj:aspectjrt:$aspectJ&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.springframework.security:spring-security-web:$springSecurityVersion&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.springframework.security:spring-security-config:$springSecurityVersion&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.thymeleaf:thymeleaf-spring4:$thymeleafVersion&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// compile &quot;org.springframework.data:spring-data-jpa:$springDataJpaVersion&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.mybatis:mybatis:$mybatis&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.mybatis:mybatis-spring:$mybatisSpring&quot;</span></span><br><span class="line">	<span class="comment">// compile &quot;com.h2database:h2:$h2Version&quot;</span></span><br><span class="line">	<span class="keyword">compile</span> <span class="string">&quot;mysql:mysql-connector-java:$mysqlConnectorVersion&quot;</span></span><br><span class="line">	<span class="comment">// compile &quot;org.hibernate:hibernate-core:$hibernateVersion&quot;</span></span><br><span class="line">	<span class="keyword">compile</span> <span class="string">&quot;org.apache.commons:commons-dbcp2:$dbcp2Version&quot;</span></span><br><span class="line">	<span class="comment">// compile &quot;net.sf.ehcache:ehcache:$ehcacheVersion&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// providedRuntime &quot;javax.servlet.jsp.jstl:jstl:$jstlVersion&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// compile &quot;org.apache.taglibs:taglibs-standard-impl:$taglibVersion&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.hibernate:hibernate-validator:$hibernateVersion&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.apache.commons:commons-lang3:$commonsLangVersion&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;com.fasterxml.jackson.core:jackson-databind:$jacksonVersion&quot;</span></span><br><span class="line">    </span><br><span class="line">    providedRuntime <span class="string">&quot;javax.servlet:javax.servlet-api:$servletVersion&quot;</span></span><br><span class="line">    <span class="comment">// compile &quot;javax.servlet.jsp.jstl:javax.servlet.jsp.jstl-api:$jstlApiVersion&quot;</span></span><br><span class="line">    <span class="comment">// providedRuntime &quot;javax.el:javax.el-api:$jspElVersion&quot;</span></span><br><span class="line"></span><br><span class="line">    testCompile <span class="string">&quot;junit:junit:$junitVersion&quot;</span></span><br><span class="line">    testCompile <span class="string">&quot;org.springframework:spring-test:$springVersion&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">configurations</span>.all &#123;</span><br><span class="line">    	<span class="keyword">exclude</span> <span class="keyword">group</span>: <span class="string">&quot;commons-logging&quot;</span>, module: <span class="string">&quot;commons-logging&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个。。。Eclipse和Idea中的目录结构差别有一些，慢慢适应吧，哈哈。</p>
<h2 id="Idea中MyBatis-Mapper-xml问题"><a href="#Idea中MyBatis-Mapper-xml问题" class="headerlink" title="Idea中MyBatis Mapper.xml问题"></a>Idea中MyBatis Mapper.xml问题</h2><p>Eclipse的时候，<code>Mapper.xml</code>和<code>Mapper.java</code>在一起，直接扫包就OK。转到Idea后，半天没搞定，怀疑是Mapper没有读取。然后试着在<code>Mapper.java</code>中使用Annotation，可以正常使用。然后又放狗狗搜了搜，发现是Idea的事情，编译打包的时候不会把<code>Mapper.xml</code>打包，直接将这对基友分开吧，换个地方。放到<code>resources/mapper</code>下面，再扫这个目录。喜欢将把SQL语句和程序分开，所以用<code>Mapper.xml</code>，在<code>Mapper.java</code>里Annotation写SQL语句感觉太乱，看着不舒服斯基。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">    sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">    sqlSessionFactoryBean.setTypeAliasesPackage(<span class="string">&quot;com.liangwu.combustioncal.model&quot;</span>);</span><br><span class="line">    <span class="type">PathMatchingResourcePatternResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>();</span><br><span class="line">    sqlSessionFactoryBean.setMapperLocations(resolver.getResources(<span class="string">&quot;classpath*:mapper/**/*.xml&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Gradle打包"><a href="#Gradle打包" class="headerlink" title="Gradle打包"></a>Gradle打包</h2><p>之前用<code>Hibernate</code>的时候，我这个小项目打包后31M，每次一点小改动，在本机编译，然后<code>scp</code>到远程VPS上，那个速度慢啊，后来又试着将war包放到<a href="http://www.qiniu.com/">七牛</a>上，上传速度倒是很快，VPS下载速度也就100多点，不爽。后来换成<code>MyBatis</code>，包小了一半，但还是有16M，也不是太好用。其实Gradle本来就是用来打包的嘛，上网看了看，然后在VPS上又建了一个仓，以后改完直接push后，再<code>gradle build war</code>，蛮爽。后来想直接用<code>git hooks</code>来完成自动布置，可惜失败了。过段时候好好看看Gradle的使用，看看能不能实现。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>Idea</tag>
        <tag>Eclipse</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>IE中JavaScript的Item坑</title>
    <url>/2017/02/20/IE-JavaScript-Item-Problem/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>之前写小程序的时候，有一段代码如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> data)&#123;</span><br><span class="line">	<span class="title function_">do</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在Chrome和Firefox下运行都没有问题，但在IE11中就出现错误。错误显示<code>item navie code()</code>，好吧，放狗搜呗。在<a href="http://stackoverflow.com/questions/36045983/console-log-of-array-returns-function-item-native-code-in-ie-10-11">StackOverflow</a>上找到了答案，原来M$ IE在内部定义了<code>item</code>这个变量，无法使用，问题清楚，直接换个变量名就OK了。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Gogs并共享主机22端口</title>
    <url>/2018/01/09/Install-and-configure-Gogs-with-openSSH-Server/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>之前团队一直用的Subversion来管理代码的，开发的时候还OK，但是到了上线后，问题就开始出现，往往发布了一个版本后，代码又有一部分提交，同时可能引进一些新的Bug，再发包的时候，又有新的Bug，很不爽。本身SVN的分支管理不好用，我就强烈推荐Git，之前也一直在用，直接在服务器上开SSH端口就OK，但是权限管理又是一个问题啊，又找了一些Git权限管理的东东，但都太理想。后来想是不是有Github一样的东东，后来就发现了Gitlab，但是这货太耗资源，而且搭建起来也不容易，其他人去维护它就很困难。后来一顿放狗搜，找到了一个比较好的替代<a href="https://hub.docker.com/r/gogs/gogs/">Gogs</a>，上周末两天基本就在搞这货，使用起来也是很不错的。花时间的部分主要是与主机共享22端口的问题。</p>
<p>现在服务器那边的环境是，服务器位于防火墙后面，防火墙只开了有限供外网使用的端口，所以Gogs必须在某个共用端口的子目录下进行访问，比如<code>domain.com/git/</code>。防火墙8888端口映射到服务器4444端口，然后服务器4444端口再映射到Gogs Container的3000端口。</p>
<h1 id="Docker-Gogs安装"><a href="#Docker-Gogs安装" class="headerlink" title="Docker Gogs安装"></a>Docker Gogs安装</h1><p>其实用Docker来安装<a href="https://hub.docker.com/r/gogs/gogs/">Gogs</a>很简单，直接参考<a href="https://github.com/gogits/gogs/tree/master/docker">官方的文档</a>主OK了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pull image from Docker Hub.</span></span><br><span class="line">$ docker pull gogs/gogs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create local directory for volume.</span></span><br><span class="line">$ <span class="built_in">mkdir</span> -p /var/gogs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use `docker run` for the first time.</span></span><br><span class="line">$ docker run --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs</span><br><span class="line"><span class="comment"># 下面是我的配置</span></span><br><span class="line">$ docker run --name gogs -p 3000:3000 -p 10022:22 --<span class="built_in">link</span> mysql:db -v /opt/my_gogs:/data -e <span class="string">&quot;PUID=1002&quot;</span> -e <span class="string">&quot;PGID=1002&quot;</span> -d gogs/gogs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use `docker start` if you have stopped it.</span></span><br><span class="line">$ docker start gogs</span><br></pre></td></tr></table></figure>

<p>其中我运行Gogs的时候加了一些东西。将前端端口映射到Host的3000端口，将Container的SSH端口22映射到Host的1022端口，然后将另一个mysql的Container链接到Gogs，这样可以直接访问MySQL，然后就是将Gogs的配置文件和其它工作文件链接到Host的gogs目录下，然后就是设置Gogs Containerm里面git用户的uid和gid。如果不设置uid和gid的话，container默认的是1000,一般情况下都不是我们想要的结果。一般是在Host新建一个git的用户，将container的uid和gid设置成Host上git用户对应的值，比如我的就是1002和1002。</p>
<h1 id="Gogsl配置"><a href="#Gogsl配置" class="headerlink" title="Gogsl配置"></a>Gogsl配置</h1><p>Docker Gogs运行起来后，就可以直接浏览器连3000端口进行配置，配置界面很明了，一看就OK。但此时我用的MySQL也是用的Docker，因为之前用了<code>--link mysql:db</code>，表示我有一个container的名称为mysql，映射到gogs的container的名称为db，这样我可以直接用db:3306就可以连上了。在配置界面点确定前，需要在MySQL里新建一个仓，具体代码可以参考<a href="https://github.com/gogits/gogs/blob/master/scripts/mysql.sql">官方脚本</a>。</p>
<p>等界面配置好后就再对Gogs进行详细的修改，具体可以参考<a href="https://gogs.io/docs/advanced/configuration_cheat_sheet">官方文档</a></p>
<figure class="highlight ini"><figcaption><span>app.ini</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">APP_NAME</span> = Gogs</span><br><span class="line"><span class="attr">RUN_USER</span> = git</span><br><span class="line"><span class="attr">RUN_MODE</span> = prod</span><br><span class="line"></span><br><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">DB_TYPE</span>  = mysql</span><br><span class="line"><span class="attr">HOST</span>     = db:<span class="number">3306</span></span><br><span class="line"><span class="attr">NAME</span>     = gogs</span><br><span class="line"><span class="attr">USER</span>     = root</span><br><span class="line"><span class="attr">PASSWD</span>   = mysql_password</span><br><span class="line"><span class="attr">SSL_MODE</span> = disable</span><br><span class="line"><span class="attr">PATH</span>     = data/gogs.db</span><br><span class="line"></span><br><span class="line"><span class="section">[repository]</span></span><br><span class="line"><span class="attr">ROOT</span> = /data/git/gogs-repositories</span><br><span class="line"><span class="attr">FORCE_PRIVATE</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">DISABLE_HTTP_GIT</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[repository.upload]</span></span><br><span class="line"><span class="attr">ENABLED</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[server]</span></span><br><span class="line"><span class="attr">DOMAIN</span>           = yourdomain.com</span><br><span class="line"><span class="attr">HTTP_PORT</span>        = <span class="number">3000</span></span><br><span class="line"><span class="attr">ROOT_URL</span>         = http://localhost:<span class="number">3000</span>/git/</span><br><span class="line"><span class="attr">DISABLE_SSH</span>      = <span class="literal">false</span></span><br><span class="line"><span class="attr">SSH_PORT</span>         = <span class="number">22</span></span><br><span class="line"><span class="attr">START_SSH_SERVER</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">OFFLINE_MODE</span>     = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[mailer]</span></span><br><span class="line"><span class="attr">ENABLED</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">DISABLE_HELO</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">HOST</span> = smtp.xxx.com:<span class="number">587</span></span><br><span class="line"><span class="attr">SUBJECT</span> = GIT</span><br><span class="line"><span class="attr">FROM</span> = <span class="string">&quot;GIT&quot;</span> &lt;xxx@xxx.com&gt;</span><br><span class="line"><span class="attr">USER</span> = xxx@xxx.com</span><br><span class="line"><span class="attr">PASSWD</span> = xxx</span><br><span class="line"><span class="attr">SKIP_VERIFY</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">USE_PLAIN_TEXT</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[service]</span></span><br><span class="line"><span class="attr">REGISTER_EMAIL_CONFIRM</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">ENABLE_NOTIFY_MAIL</span>     = <span class="literal">true</span></span><br><span class="line"><span class="attr">DISABLE_REGISTRATION</span>   = <span class="literal">true</span></span><br><span class="line"><span class="attr">ENABLE_CAPTCHA</span>         = <span class="literal">true</span></span><br><span class="line"><span class="attr">REQUIRE_SIGNIN_VIEW</span>    = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[picture]</span></span><br><span class="line"><span class="attr">DISABLE_GRAVATAR</span>        = <span class="literal">true</span></span><br><span class="line"><span class="attr">ENABLE_FEDERATED_AVATAR</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[session]</span></span><br><span class="line"><span class="attr">PROVIDER</span> = file</span><br><span class="line"></span><br><span class="line"><span class="section">[log]</span></span><br><span class="line"><span class="attr">MODE</span>      = file</span><br><span class="line"><span class="attr">LEVEL</span>     = Info</span><br><span class="line"><span class="attr">ROOT_PATH</span> = /app/gogs/log</span><br><span class="line"></span><br><span class="line"><span class="section">[security]</span></span><br><span class="line"><span class="attr">INSTALL_LOCK</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">SECRET_KEY</span>   = qHtSV2KhCcMA0Xl</span><br><span class="line"></span><br><span class="line"><span class="section">[other]</span></span><br><span class="line"><span class="attr">SHOW_FOOTER_BRANDING</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">SHOW_FOOTER_VERSION</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">SHOW_FOOTER_TEMPLATE_LOAD_TIME</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>现在可以在浏览<a href="http://localhost:3000/git/">http://localhost:3000/git/</a>来访问页面了。</p>
<h1 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h1><p>对于Nginx反向代理官方也给出了具体配置，还包括Apache和Lighttpd。其中Nginx中很重要的一点就是必须**要最后的反斜框[&#x2F;]**。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> /git/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:3000/;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">location</span> = /git &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:3000/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>官方文档只提到了上面的一条，后面一条是根据我的实情情况加的。我发现登录的时候，点一次登录好长时间没有反应，过段时间后，返回的地址却是<code>domain.com:4444/git/</code>，很无语，不知道为啥跳到4444端口呢。后来发现登录跳转的路径是<code>domain.com/git</code>，没有最后的一个反斜框，Nginx无法知道怎么代理，这块搞了我快一两个小时，一直没有查出来原因。后来加了下面一条就解决了。</p>
<h1 id="与Host共享22端口的问题"><a href="#与Host共享22端口的问题" class="headerlink" title="与Host共享22端口的问题"></a>与Host共享22端口的问题</h1><p>刚开始放狗搜了好久，都没有好的解决方案，有的提到sshd_config里面使用ForceCommand，看着比较靠谱，但好像也不成功。后来发现官方文档推荐一篇不错的<a href="http://www.ateijelo.com/blog/2016/07/09/share-port-22-between-docker-gogs-ssh-and-local-system">文章</a>。看守实操了一遍，大致原理是Host和Container用同一个uid的用户(假定为git)，这时候连接到Host的git用户再转到container的10022端口，并运行特定的命令来进行git操作。</p>
<h2 id="新建git用户"><a href="#新建git用户" class="headerlink" title="新建git用户"></a>新建git用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo useradd -s /bin/bash -d /opt/my_gogs -m git</span><br><span class="line">$ <span class="built_in">id</span> git </span><br><span class="line">uid=1002(git) gid=1002(git) <span class="built_in">groups</span>=1002(git)</span><br><span class="line">$ su - git</span><br><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ ssh-key -t rsa</span><br><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ <span class="built_in">cat</span> id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line">$ <span class="built_in">chmod</span> 600 authorized_keys</span><br></pre></td></tr></table></figure>
<p>这里我新建的git用户的uid和gid是1002，与之前运行gogs container需要对应。同时为了安全起见，将authorized_keys前加一些配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty rsa...</span><br></pre></td></tr></table></figure>
<p>字面意思就很好理解了。因为之前Docker运行Gogs时已经设置<code>-v /opt/my_gogs:/data -e &quot;PUID=1002&quot; -e &quot;PGID=1002&quot;</code>， 这样在Host和Container的git用户主目录是同一个，uid和gid也一样，这样Host的git用户直接<code>ssh -p 10022 127.0.0.1</code>是可以直接连接到Container的。</p>
<h2 id="配置git用户登录问题"><a href="#配置git用户登录问题" class="headerlink" title="配置git用户登录问题"></a>配置git用户登录问题</h2><p>经过上面一步的设置，在外网就可以直接用git用户的密钥进行登录了，但是因为安全设置，没有tty等。然后就是设置像github那样，用户自己在web端导入自己的公钥，就可以用密钥拉取、推送代码。新建<code>/app/gogs/gogs</code>，脚本如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /app/gogs/</span><br><span class="line"><span class="built_in">cat</span> &gt;/app/gogs/gogs &lt;&lt;<span class="string">&#x27;END&#x27;</span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">ssh -p 10022 -o StrictHostKeyChecking=no git@127.0.0.1 \</span><br><span class="line"><span class="string">&quot;SSH_ORIGINAL_COMMAND=\&quot;<span class="variable">$SSH_ORIGINAL_COMMAND</span>\&quot; <span class="variable">$0</span> <span class="variable">$@</span>&quot;</span></span><br><span class="line">END</span><br><span class="line"><span class="built_in">chmod</span> 755 /app/gogs/gogs</span><br></pre></td></tr></table></figure>

<p>对共享22端口不熟悉的话，可以认真看看<a href="http://www.ateijelo.com/blog/2016/07/09/share-port-22-between-docker-gogs-ssh-and-local-system">这篇文件</a>。SSH真是神器。 :) Happy coding…</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>git</tag>
        <tag>Gogs</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8-lambda</title>
    <url>/2017/02/06/Java8-lambda/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>之前写了一个小的燃烧计算程序，其中有一部分是为了计算混合组分的特性参数，用了下面的一些代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ComponentCal</span> <span class="keyword">extends</span> <span class="title class_">Map</span>&lt;String, Double&gt; &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDensity</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getQd</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getQg</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getL_O2</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCp</span><span class="params">(<span class="type">double</span> temperature)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getC</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getH</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>其中各<code>get</code>方法是读取各成分各自的特性参数，然后计算成混合组分的参数。</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>最开始写的时候用最苯的方法，用是<code>for-each</code>方法读取每个，然后<code>sum</code>方法求和。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GasComponent</span> <span class="keyword">extends</span> <span class="title class_">HashMap</span>&lt;String, Double&gt; <span class="keyword">implements</span> <span class="title class_">ComponentCal</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> PropertyRepository propertyRepository;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Inject</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPropertyRepository</span><span class="params">(PropertyRepository propertyRepository)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.propertyRepository = propertyRepository;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDensity</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">		<span class="keyword">for</span> (Entry&lt;String, Double&gt; item : <span class="built_in">this</span>.entrySet()) &#123;</span><br><span class="line">			sum += propertyRepository.getByName(item.getKey()).getDensity() * item.getValue();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sum * <span class="number">0.01</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getQd</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">		<span class="keyword">for</span> (Entry&lt;String, Double&gt; item : <span class="built_in">this</span>.entrySet()) &#123;</span><br><span class="line">			sum += propertyRepository.getByName(item.getKey()).getQd() * item.getValue();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sum;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 ...</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>用<code>lambda</code>取代<code>for-each</code>，这个感觉和C#的<code>LINQ</code>很像哦。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GasComponent</span> <span class="keyword">extends</span> <span class="title class_">HashMap</span>&lt;String, Double&gt; <span class="keyword">implements</span> <span class="title class_">ComponentCal</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> PropertyRepository propertyRepository;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Inject</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPropertyRepository</span><span class="params">(PropertyRepository propertyRepository)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.propertyRepository = propertyRepository;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDensity</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.entrySet().stream().mapToDouble(item -&gt; propertyRepository.getByName(item.getKey()).getDensity() * item.getValue()).sum() * <span class="number">0.01</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getQd</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.entrySet().stream().mapToDouble(item -&gt; propertyRepository.getByName(item.getKey()).getQd() * item.getValue()).sum();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 ...</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>上面<code>GasComponent</code>实现<code>ComponentCal</code>各个<code>get</code>方法时，只是有一点点不同，于是想应该可以把其简化，最开始想到的就是用反射，方法名用<code>String</code>来代替，调用的时候传递一个<code>String</code>就行了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GasComponent</span> <span class="keyword">extends</span> <span class="title class_">HashMap</span>&lt;String, Double&gt; <span class="keyword">implements</span> <span class="title class_">ComponentCal</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> PropertyRepository propertyRepository;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Inject</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPropertyRepository</span><span class="params">(PropertyRepository propertyRepository)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.propertyRepository = propertyRepository;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="type">double</span> <span class="title function_">getPropertySum</span><span class="params">(String methodName, <span class="type">double</span> factor)</span> <span class="keyword">throws</span> NoSuchMethodException, SecurityException &#123;</span><br><span class="line">		Method method;</span><br><span class="line">		method = Property.class.getMethod(methodName);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.entrySet().stream().mapToDouble(item -&gt; &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> Double.parseDouble(method.invoke(propertyRepository.getByName(item.getKey())).toString()) * item.getValue();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">		&#125;).sum() * factor;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDensity</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			sum = getPropertySum(<span class="string">&quot;getDensity&quot;</span>, <span class="number">0.01</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sum;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getQd</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			sum = getPropertySum(<span class="string">&quot;getQd&quot;</span>, <span class="number">1.0</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sum;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 ...</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h2><p>我去，看着反射方法里面的各种<code>try-catch</code>好烦啊，正好前段时间在学习<code>Java8 In Action</code>，于是想到了函数式编程里讲到的东东。试试吧。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GasComponent</span> <span class="keyword">extends</span> <span class="title class_">HashMap</span>&lt;String, Double&gt; <span class="keyword">implements</span> <span class="title class_">ComponentCal</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> PropertyRepository propertyRepository;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Inject</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPropertyRepository</span><span class="params">(PropertyRepository propertyRepository)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.propertyRepository = propertyRepository;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@FunctionalInterface</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">interface</span> <span class="title class_">Functional</span> &#123;</span><br><span class="line">		<span class="type">double</span> <span class="title function_">getProperty</span><span class="params">(Property property)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="type">Functional</span> <span class="variable">fDensity</span> <span class="operator">=</span> p-&gt;p.getDensity();</span><br><span class="line">	<span class="keyword">private</span> <span class="type">Functional</span> <span class="variable">fQd</span> <span class="operator">=</span> p-&gt;p.getQd();</span><br><span class="line">	<span class="keyword">private</span> <span class="type">Functional</span> <span class="variable">fQg</span> <span class="operator">=</span> p-&gt;p.getQg();</span><br><span class="line">	<span class="keyword">private</span> <span class="type">Functional</span> <span class="variable">fL_O2</span> <span class="operator">=</span> p-&gt;p.getL_O2();</span><br><span class="line">	<span class="keyword">private</span> <span class="type">Functional</span> <span class="variable">fC</span> <span class="operator">=</span> p-&gt;p.getC();</span><br><span class="line">	<span class="keyword">private</span> <span class="type">Functional</span> <span class="variable">fH</span> <span class="operator">=</span> p-&gt;p.getH();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="type">double</span> <span class="title function_">getPropertySum</span><span class="params">(Functional f, <span class="type">double</span> factor)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.entrySet().stream().mapToDouble(item -&gt; f.getProperty(propertyRepository.getByName(item.getKey())) * item.getValue()).sum() * factor;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDensity</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> getPropertySum(fDensity, <span class="number">0.01</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getQd</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> getPropertySum(fQd, <span class="number">1.0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 ...</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>哈哈哈，各种清爽啊。发现其实可以直接把<code>labmda</code>表达式用参数形式传过去嘛。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GasComponent</span> <span class="keyword">extends</span> <span class="title class_">HashMap</span>&lt;String, Double&gt; <span class="keyword">implements</span> <span class="title class_">ComponentCal</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> PropertyRepository propertyRepository;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Inject</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPropertyRepository</span><span class="params">(PropertyRepository propertyRepository)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.propertyRepository = propertyRepository;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@FunctionalInterface</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">interface</span> <span class="title class_">Functional</span> &#123;</span><br><span class="line">		<span class="type">double</span> <span class="title function_">getProperty</span><span class="params">(Property property)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="type">double</span> <span class="title function_">getPropertySum</span><span class="params">(Functional f, <span class="type">double</span> factor)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.entrySet().stream().mapToDouble(item -&gt; f.getProperty(propertyRepository.getByName(item.getKey())) * item.getValue()).sum() * factor;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDensity</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> getPropertySum(p -&gt; p.getDensity(), <span class="number">0.01</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getQd</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> getPropertySum(p -&gt; p.getQd(), <span class="number">1.0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 ...</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Yeah，搞定，终于清爽了。 :)</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis自动生成的几点注意事项</title>
    <url>/2017/04/11/MyBatis-configuration-issues/</url>
    <content><![CDATA[<p>MyBatis开始写基础的SQL蛮麻烦的，放Google搜了搜，发现有个不错的插件<code>MyBatis-Plugin</code>，可以自动生成这些CRUD的基础语句，OK就用它了。至于如何激活，呵呵。。</p>
<h1 id="MyBatis-Generator配置"><a href="#MyBatis-Generator配置" class="headerlink" title="MyBatis-Generator配置"></a>MyBatis-Generator配置</h1><p>直接在<code>resources</code>用插件新建文件<code>mybatis-generator-config.xml</code>，然后编辑其中注释中带!!!!的地方，主要有以下几个地方。</p>
<figure class="highlight xml"><figcaption><span>mybatis-generator-config.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- !!!! Driver Class Path !!!! --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- !!!! Database Configurations !!!! --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- !!!! Model Configurations !!!! --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- !!!! Mapper XML Configurations !!!! --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- !!!! Mapper Interface Configurations !!!! --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- !!!! Table Configurations !!!! --&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其中<code>Driver Class Path</code>当时用最新的6.0.4，无法自己生成，放狗搜了后，改成低版本就OK了。</p>
<p>然后另一个问题就是表与Domain类名字、域名字不相同的情况，直接在Table Configurations里面改就好。</p>
<figure class="highlight xml"><figcaption><span>mybatis-generator-config.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_teacher&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">columnRenamingRule</span> <span class="attr">searchString</span>=<span class="string">&quot;t_&quot;</span> <span class="attr">replaceString</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>重点就是<code>tableName</code>,<code>domainObjectName</code>, <code>columnRenameingRule</code>，从字面意思就好理解。</p>
<h1 id="MyBatis-Mapper日志中显示SQL语句"><a href="#MyBatis-Mapper日志中显示SQL语句" class="headerlink" title="MyBatis Mapper日志中显示SQL语句"></a>MyBatis Mapper日志中显示SQL语句</h1><p>在日志方面选择过好几次log4j, log4j2，后来改成了logback，显示SQL语句只需要在配置文件中增加一条。</p>
<figure class="highlight xml"><figcaption><span>logback.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.liangwu.courses.domain.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="插入新数据后，获取ID"><a href="#插入新数据后，获取ID" class="headerlink" title="插入新数据后，获取ID"></a>插入新数据后，获取ID</h1><p>一般主键ID都是自动生成的，所以插入新数据的时候ID都是数据库自动生成的，如何在插入数据后Domain获得这个ID呢，最开始自己脑子发热，插入后查询。后来放狗搜，在配置文件里面改改就OK。</p>
<figure class="highlight xml"><figcaption><span>mybatis-generator-config.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.liangwu.courses.domain.Teacher&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;t_id&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> &gt;</span></span><br><span class="line">  insert into t_teacher (t_name, t_gender)</span><br><span class="line">  values (#&#123;name,jdbcType=VARCHAR&#125;, #&#123;gender,jdbcType=BIT&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在insert配置的时候加<code>useGeneratedKeys=&quot;true&quot; keyColumn=&quot;t_id&quot; keyProperty=&quot;id&quot;</code>三项，insert后就可以直接getId()了。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Openwrt配置Shadowsocks</title>
    <url>/2017/04/02/OpenWrt-ShadowSocks-Config/</url>
    <content><![CDATA[<p>之前家里用的是DB120-WG，双USB口，16M Flash，64M RAM。用起来爽爽的，刷OpenWrt，接移动硬盘，transmission和Aria2离线下载，设置Shadowsocks，自动配置翻墙。可惜有次吵架，被老婆一脚给踩坏了，唉。后来通过闲鱼重新购入一枚Netgear WNDR3400，这家伙体质没有DB120-WG来得好，Flash、RAM小，无线的驱动不理想，不过还好基本功能能满足，可以刷OpenWrt和dd-Wrt。<span id="more"></span></p>
<h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><p>以前上网用的是浏览器（Firefox, Chrome），加代理控制插件（SwitchyOmega，AutoProxy），然后是代理（Shadowsocks, SSH）。现在用路由器来管理，思路就是路由器直接判断网址是否需要走代理，这样就可以透明代理上网了。</p>
<p>List中的域名站点走代理，不在List中的域名不走代理，根据域名判断。同时List中的域名需要通过其它方法获得正确的域名解析。正好<code>ss-tunnel</code>也提供了此功能。</p>
<h1 id="服务器设置"><a href="#服务器设置" class="headerlink" title="服务器设置"></a>服务器设置</h1><p>服务器同样用的也是<code>Shadowsocks-libev</code>，应该可以节约一些资源，毕竟VPS内存不大。如果需要用<code>ss-tunnel</code>走VPS来做域名解析代理，<code>ss-server</code>参数后需要增加<code>-u</code>，enable udprelay mode。</p>
<p>然后就是一个黑科技<a href="https://github.com/google/bbr">Google BBR</a>，大大地增加了代理速度。以前未使用BBR的时候，速度大概就200KB&#x2F;s，开户BBR后速度可达到2MB&#x2F;s，这还是我办的宽带是20M的情况下。开启BBR简单的办法就是将内核升级到4.9，或者自己Patch内核。具体参考了以下两篇文章：</p>
<ul>
<li><a href="https://github.com/iMeiji/shadowsocks_install/wiki/%E5%BC%80%E5%90%AFTCP-BBR%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95">开启TCP BBR拥塞控制算法</a></li>
<li><a href="https://doub.io/wlzy-15/">比锐速还强的 TCP拥塞控制技术 —— TCP-BBR 测试及开启教程</a></li>
</ul>
<h1 id="路由器设置"><a href="#路由器设置" class="headerlink" title="路由器设置"></a>路由器设置</h1><h2 id="安装必要软件"><a href="#安装必要软件" class="headerlink" title="安装必要软件"></a>安装必要软件</h2><p>首先了解路器SoC架构，然后增加以下内容到<code>/etc/opkg.conf</code>。注意将签名验证给注释掉。</p>
<figure class="highlight plaintext"><figcaption><span>/etc/opkg.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">src/gz openwrt_dist http://openwrt-dist.sourceforge.net/packages/OpenWrt/base/&#123;architecture&#125;</span><br><span class="line">src/gz openwrt_dist_luci http://openwrt-dist.sourceforge.net/packages/OpenWrt/luci</span><br></pre></td></tr></table></figure>

<p>然后就是安装需要的软件了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install iptables-mod-nat-extra iptables-mod-tproxy ipset</span><br><span class="line">opkg install Shadowsocks-libev</span><br><span class="line">opkg remove dnsmasq &amp;&amp; opkg install dnsmasq-full</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置Shadowsocks信息"><a href="#配置Shadowsocks信息" class="headerlink" title="配置Shadowsocks信息"></a>配置Shadowsocks信息</h3><figure class="highlight json"><figcaption><span>/etc/shadowsocks-libev/config.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;x.x.x.x&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;server_port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;password&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;local_port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1080&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rc4-md5&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>新建Shadowsocks init文件。</p>
<figure class="highlight bash"><figcaption><span>/etc/init.d/Shadowsocks</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh /etc/rc.common</span></span><br><span class="line"></span><br><span class="line">START=95</span><br><span class="line">STOP=15</span><br><span class="line"></span><br><span class="line">SERVICE_USE_PID=1</span><br><span class="line">SERVICE_WRITE_PID=1</span><br><span class="line">SERVICE_DAEMONIZE=1</span><br><span class="line">SERVICE_PID_FILE=/var/run/shadowsocks.pid</span><br><span class="line">TUNNEL_PID_FILE=/var/run/ss-tunnel.pid</span><br><span class="line">CONFIG=/etc/shadowsocks-libev/config.json</span><br><span class="line">DNS=8.8.8.8:53</span><br><span class="line">TUNNEL_PORT=5353</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">	<span class="comment"># Proxy Mode</span></span><br><span class="line">	service_start /usr/bin/ss-redir -c <span class="variable">$CONFIG</span> -b 0.0.0.0 -f <span class="variable">$SERVICE_PID_FILE</span></span><br><span class="line">	<span class="comment"># Tunnel</span></span><br><span class="line">	service_start /usr/bin/ss-tunnel -c <span class="variable">$CONFIG</span> -b 0.0.0.0 -u -l <span class="variable">$TUNNEL_PORT</span> -L <span class="variable">$DNS</span> -f <span class="variable">$TUNNEL_PID_FILE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">	<span class="comment"># Proxy Mode</span></span><br><span class="line">	service_stop /usr/bin/ss-redir</span><br><span class="line">	<span class="comment"># Tunnel</span></span><br><span class="line">	service_stop /usr/bin/ss-tunnel</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改文件权限，并设置开机启动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/shadowsocks <span class="built_in">enable</span></span><br></pre></td></tr></table></figure>

<h3 id="配置dnsmasq和ipset"><a href="#配置dnsmasq和ipset" class="headerlink" title="配置dnsmasq和ipset"></a>配置dnsmasq和ipset</h3><h4 id="增加防火墙规则，同时在firewall-user中增加，开机后便自动增加。"><a href="#增加防火墙规则，同时在firewall-user中增加，开机后便自动增加。" class="headerlink" title="增加防火墙规则，同时在firewall.user中增加，开机后便自动增加。"></a>增加防火墙规则，同时在<code>firewall.user</code>中增加，开机后便自动增加。</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipset -N gfwlist iphash</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp -m <span class="built_in">set</span> --match-set gfwlist dst -j REDIRECT --to-port 1080</span><br></pre></td></tr></table></figure>

<h4 id="配置Dnsmasq"><a href="#配置Dnsmasq" class="headerlink" title="配置Dnsmasq"></a>配置Dnsmasq</h4><p>修改<code>/etc/dnsmasq.conf</code>，并新增目录<code>/etc/dnsmasq.d</code>。</p>
<figure class="highlight plaintext"><figcaption><span>/etc/dnsmasq.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">all-servers</span><br><span class="line">server=119.29.29.29</span><br><span class="line">server=114.114.114.114</span><br><span class="line">cache-size=2500</span><br><span class="line">min-cache-ttl=300</span><br><span class="line"></span><br><span class="line">conf-dir=/etc/dnsmasq.d</span><br></pre></td></tr></table></figure>

<p>将<a href="https://github.com/cokebar/gfwlist2dnsmasq/releases">dnsmasq_gfwlist_ipset.conf</a>放到目录<code>/etc/dnsmasq.d</code>中，规则主要是处理哪些域名需要进行特殊处理。根据格式可自行修改，也可做<code>adblock.conf</code>，这样可进行广告处理，直接将DNS结果返回空。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#使用不受污染干扰的DNS解析该域名 可以将此IP改为自己使用的DNS服务器</span><br><span class="line">server=/google.com/127.0.0.1#5353</span><br><span class="line">#将解析出来的IP保存到名为gfwlist的ipset表中</span><br><span class="line">ipset=/google.com/gfwlist</span><br></pre></td></tr></table></figure>

<p>其中的<code>127.0.0.1#5353</code>可另行处理，可用<code>8.8.8.8#53</code>或其它未被污染的服务器替代。</p>
<p>主要参考了以下文章</p>
<ul>
<li><a href="https://cokebar.info/archives/962">Shadowsocks + GfwList 实现 OpenWRT &#x2F; LEDE 路由器自动翻墙</a></li>
</ul>
<p>PS：上次路器配置好后一直没有动过，现在OpenWrt的分支LEDE更活跃，基本转LEDE了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>OpenWrt</tag>
        <tag>Shadowsocks</tag>
        <tag>WNDR3400</tag>
      </tags>
  </entry>
  <entry>
    <title>IPv6访问NAS</title>
    <url>/2022/07/31/access-nas-via-ipv6/</url>
    <content><![CDATA[<p>嗯嗯，拖了好久没有把这个发出来了。自从移动可以用IPv6后，想办法可以在外面用IPv6访问自家NAS，主要是用<code>transmission</code>下载，然后<code>Nextcloud</code>保存手机上的照片。基本上这些功能已经实现，但是中间也碰到了一些问题。思路就是将域名<code>AAAA</code>记录改为当前NAS的IPv6地址。正好DigitalOcean的有这个功能，提供了API，可以用API修改域名记录。</p>
<ol>
<li>网络结构</li>
</ol>
<p>家里网络是一光猫，桥接，后面连一个Buffalo的路由器（刷了OpenWRT），然后一个CISCO千兆非网管的交换机，再接到各终端设备。无线用的是新的华为新的AX6路由器，当一个无线接入点AP。这里提一点是，光猫比较早了，大概是2016年办的，烽火HG266GU，有个大坑，后面LAN口只有LAN1口是千兆，其他是百兆，当时升级宽带的时候速率一直达不到要求，后来找移动才知道。还有一个无线的问题，当时用的是TP-LINK AC1200，用无线下NAS的东西，最大只有4MB&#x2F;s，用Wireshark抓包，一直有丢包，速度上不去，换了它后一切都好了，笔记本Intel AX210网卡2402&#x2F;2402Mbps，测试到NAS的网速，卡在1000Mbps，卡在有线网络上了，当然从NAS下东西速率还是卡在硬盘上面。</p>
<ol start="2">
<li>路由器设置</li>
</ol>
<p>此时Buffalo的路由器成了上网关键设备，设置好IPv4防火墙，保证网络安全，禁止内网非法设备上网。暂时IPv6防火墙没有太多规则，考虑到现在IPv6可能被扫的机率比较低。</p>
<ol start="3">
<li>DigitalOcean设置</li>
</ol>
<p>可以在<a href="https://docs.digitalocean.com/reference/api/create-personal-access-token/">DO界面</a>生成新的API Token，这样就可以利用API来远程修改DNS信息。具体方法可以参考<a href="https://docs.digitalocean.com/reference/api/api-reference">官方文档</a>。可以用cURL，Python等，当时可能正在用Python，所以后来我就用Python来修改DNS记录了。其中用到了<a href="https://github.com/koalalorenzo/python-digitalocean">python-digitalocean</a>，主要是用到了<code>Listing records of a domain/Update a domain record</code>。在DigitalOcean的DNS管理界面，设置一条<code>AAAA</code>的记录，后面脚本会根据NAS实际IPv6的地址进行修改。</p>
<ol start="4">
<li>获取NASIPv6地址</li>
</ol>
<p>这部分是修改最多的地方吧，最开始也是用Python来获取IPv6地址，但是不太理想，NAS的IPv6地址有很多，其中临时的IPv6大概是一段时间就会失效，然后会生成一个新的IPv6地址，这里查本机IPv6地址会有很多。</p>
<p>后来改成用SHELL脚本来搞。拿到网卡的所有IPv6地址，去掉link环路，过时地址，临时地址这时候大概会获取1到2个地址。基本可用，然后得到的地址传给Python脚本去修改DO的DNS记录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IPs=`ip -6 addr show enp1s0 | grep inet6 | grep -v -E <span class="string">&quot;link|host|deprecated|temporary&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F<span class="string">&#x27;/&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br></pre></td></tr></table></figure>

<p>后来发现一个问题，因为路由器重启的话，IPv6地址会有上次拨号的记录和这次拨号的记录，会导致<code>AAAA</code>记录错误。后来想了一些办法没成功，最后来了个最笨的办法，直接从路由器拿到最的IPv6地址，跟NAS的地址进行对比，这样DNS就可以更新成最新的记录了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IPPre=`ssh -p PORT root@IPADDR ip -6 addr show br-lan | grep inet6 | grep -v -E <span class="string">&quot;link|host&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F<span class="string">&#x27;/&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | awk -F<span class="string">&#x27;::&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br></pre></td></tr></table></figure>

<script src="//gist.github.com/05fa0e623962c612d59b23a06797da7e.js?file=updateNasDNS.sh"></script>

<script src="//gist.github.com/05fa0e623962c612d59b23a06797da7e.js?file=updateNasDNS.py"></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Shell</tag>
        <tag>Crontab</tag>
        <tag>DigitalOcean</tag>
      </tags>
  </entry>
  <entry>
    <title>ArchLinux安装</title>
    <url>/2018/12/01/archlinux-installation/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>家里好几台电脑，现在有Surface Pro 4的Windows 10， Thinkpad T400的Windows 7和XUbuntu 18.04.1，老婆老的三星上网本NP110C的FreeBSD 11和CentOS 7， 公司电脑Thinkpad E550的Gentoo和XUbuntu 18.04.1。还有台破的Thinkpad E330，想着周末没啥事，就装个省点事的版本吧，本来是装好了Ubuntu，但是感觉不好，重新装个ArchLinux吧。</p>
<h2 id="EFI-x2F-GPT"><a href="#EFI-x2F-GPT" class="headerlink" title="EFI&#x2F;GPT"></a>EFI&#x2F;GPT</h2><p>其实以前也装过ArchLinux，是在T400上面。现在在E330上面，有一些地方不一样，主要是GPT和EFI的问题，所以就记录一下吧。</p>
<p>首先分区的时候，用的是<code>fdisk</code>，用GPT。大概分区方式如下</p>
<table>
<thead>
<tr>
<th>物理分区</th>
<th>文件系统</th>
<th>挂载点</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;dev&#x2F;sda1</td>
<td>EFI System</td>
<td>&#x2F;boot</td>
</tr>
<tr>
<td>&#x2F;dev&#x2F;sda2</td>
<td>Ext4</td>
<td>&#x2F;</td>
</tr>
<tr>
<td>&#x2F;dev&#x2F;sda3</td>
<td>Ext4</td>
<td>&#x2F;data</td>
</tr>
<tr>
<td>&#x2F;dev&#x2F;sda4</td>
<td>Swap</td>
<td></td>
</tr>
</tbody></table>
<p>对<code>EFI</code>进行分区，<code>mkfs.fat -F32 /dev/sda1</code>。安装相应软件<code>efibootmgr</code>，不知道有没有用，反正我没有试过不安装有没有影响。</p>
<h3 id="GRUB安装"><a href="#GRUB安装" class="headerlink" title="GRUB安装"></a>GRUB安装</h3><p>EFI的GRUB有点不一样，以前只需要<code>grub-install /dev/sda</code>就好了，但是现在不行了。现在GRUB安装如下，其中<code>/boot</code>是之前分区的EFI分区，Ubuntu就是另外一分单独的分区，它是单独挂载在<code>/boot/EFI</code>。<code>bootloader-id</code>是EFI启动界面显示的ID。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB</span><br><span class="line">grub-mkconfig -o /etc/grub/grub.cfg</span><br></pre></td></tr></table></figure>

<h2 id="wireless"><a href="#wireless" class="headerlink" title="wireless"></a>wireless</h2><p>笔记本肯定要用无线上网嘛，可是我家SSID是隐藏的，就用了自带的<code>netctl</code>控制。在<code>/etc/netctl/examples</code>下面有好多示例文档，用<code>wireless-wpa</code>就好了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/netctl/examples /etc/netctl/liangwu</span><br><span class="line">netctl start liangwu</span><br></pre></td></tr></table></figure>

<p>这样在安装的时候就可以上网了。但是安装的新系统，如果不安装netctl或其它网络相关软件的话，新系统还是无法上网。其中netctl还有一些依赖需要安装。<code>dialog</code>用于wifi-menu使用，<code>wpa_supplicant</code>用于密钥使用。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p><code>hostnamectl</code>设置主机名</p>
<p><code>timedatectl</code>设置时区等等</p>
<h2 id="Desktop-Environment"><a href="#Desktop-Environment" class="headerlink" title="Desktop Environment"></a>Desktop Environment</h2><p>驱动需要根据自己环境变动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S xorg-server xf86-video-intel xf86-video-nouveau xfce4 xfce4-goodies lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings networkmanager nm-connection-editor network-manager-applet papirus-icon-theme alsa-utils pavucontrol pasystray pulseaudio pulseaudio-alsa dnsutils fcitx fcitx-configtool fcitx-gtk3 fcitx-qt5</span><br><span class="line">vim /etc/lightdm/lightdm.conf</span><br><span class="line">vim /etc/lightdm/lightdm--gtk-greeter.conf</span><br><span class="line">vim /etc/systemd/logind.conf</span><br><span class="line">systemctl <span class="built_in">enable</span> lightdm.service</span><br><span class="line">systemctl <span class="built_in">enable</span> NetworkManager</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis小试</title>
    <url>/2017/03/02/Try-MyBatis/</url>
    <content><![CDATA[<h1 id="Spring-MyBatis小试"><a href="#Spring-MyBatis小试" class="headerlink" title="Spring MyBatis小试"></a>Spring MyBatis小试</h1><p>之前了解过Hibernate，感觉不写SQL语句好爽啊。后来写了一个小程序用来计算东西，用Hibernate，但是War包实在是太大了，想要减小下体积，于是试了试MyBatis，感觉不错。写下来方便以后使用。主要是参考了MyBatis官方的文章<a href="http://www.mybatis.org/mybatis-3/">MyBatis</a>和<a href="http://www.mybatis.org/spring/">MyBatis-Spring</a>。</p>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>IDE用的Intellij IDEA，数据库用的H2 Database，包管理Gradle，日志Log4j，然后MyBatis，数据用的是Oracle数据库自带的测试数据<a href="/uploads/utlsample.sql">UTLSAMPLE.sql</a>。其中build.gradle如下。<span id="more"></span></p>
<figure class="highlight gradle"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;java&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;idea&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceCompatibility</span> = <span class="number">1.8</span></span><br><span class="line"><span class="keyword">targetCompatibility</span> = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.mybatis:mybatis-spring:$mybatisSpringVersion&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.mybatis:mybatis:$mybatisVersion&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;com.h2database:h2:$h2Version&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.springframework:spring-jdbc:$springVersion&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.springframework:spring-context:$springVersion&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.slf4j:jcl-over-slf4j:$slf4jVersion&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.slf4j:slf4j-log4j12:$slf4jVersion&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.apache.logging.log4j:log4j-core:$log4jVersion&quot;</span></span><br><span class="line">	</span><br><span class="line">    testCompile <span class="string">&quot;junit:junit:$junitVersion&quot;</span></span><br><span class="line">    testCompile <span class="string">&quot;org.springframework:spring-test:$springVersion&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">configurations</span>.all &#123;</span><br><span class="line">        <span class="keyword">exclude</span> <span class="keyword">group</span>: <span class="string">&quot;commons-logging&quot;</span>, module: <span class="string">&quot;commons-logging&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置Spring和MyBatis"><a href="#配置Spring和MyBatis" class="headerlink" title="配置Spring和MyBatis"></a>配置Spring和MyBatis</h2><p>参照<a href="http://www.mybatis.org/spring/">官方文档</a>，建立配置文件<code>JdbcConfig.java</code>。</p>
<figure class="highlight java"><figcaption><span>JdbcConfig.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(ignoreResourceNotFound = true, value = &quot;classpath:jdbc.properties&quot;)</span> <span class="comment">//读取JDBC配置信息</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.liangwu.mybatis.model.mapper&quot;)</span> <span class="comment">//扫描mapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driverClassName:org.h2.Driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url:jdbc:h2:~/mybatis&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username:sa&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password:sa&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.initialSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> initialSize;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.maxWait&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> maxWait;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.minIdle&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> minIdle;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.maxActive&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxActive;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.maxIdle&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxIdle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//配置DataSource</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// H2配置</span></span><br><span class="line">        <span class="type">DriverManagerDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DriverManagerDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="comment">// MySQL配置</span></span><br><span class="line"><span class="comment">//        BasicDataSource dataSource = new BasicDataSource();</span></span><br><span class="line"><span class="comment">//        dataSource.setDriverClassName(driverClassName);</span></span><br><span class="line"><span class="comment">//        dataSource.setUrl(url);</span></span><br><span class="line"><span class="comment">//        dataSource.setUsername(username);</span></span><br><span class="line"><span class="comment">//        dataSource.setPassword(password);</span></span><br><span class="line"><span class="comment">//        dataSource.setInitialSize(initialSize);</span></span><br><span class="line"><span class="comment">//        dataSource.setMaxTotal(maxActive);</span></span><br><span class="line"><span class="comment">//        dataSource.setMaxIdle(maxIdle);</span></span><br><span class="line"><span class="comment">//        dataSource.setMinIdle(minIdle);</span></span><br><span class="line"><span class="comment">//        dataSource.setMaxWaitMillis(maxWait);</span></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//配置SqlSessionFactoryBean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// 设置TypeAliase，避免在使用MyBatis时使用类的全限定名</span></span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="string">&quot;com.liangwu.mybatis.model&quot;</span>);</span><br><span class="line">        <span class="comment">// 读取MyBatis Mapper XML文件</span></span><br><span class="line">        <span class="type">PathMatchingResourcePatternResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>();</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(resolver.getResources(<span class="string">&quot;classpath*:mapper/**/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 事务管理</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="ORM-Model类配置"><a href="#ORM-Model类配置" class="headerlink" title="ORM Model类配置"></a>ORM Model类配置</h2><p>根据测试数据的结构，主要使用了EMP和DEPT两个表，就设置两个Model类<code>Employee</code>与<code>Department</code>。</p>
<figure class="highlight java"><figcaption><span>Employee.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Department</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Employee&gt; employeeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">    /*</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>Department.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="keyword">private</span> Employee mgr;</span><br><span class="line">    <span class="keyword">private</span> Date hiredate;</span><br><span class="line">    <span class="keyword">private</span> Double sal;</span><br><span class="line">    <span class="keyword">private</span> Double comm;</span><br><span class="line">    <span class="keyword">private</span> Department department;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置Mapper"><a href="#配置Mapper" class="headerlink" title="配置Mapper"></a>配置Mapper</h2><p>创建Mapper接口类，SQL语句可以使用Annotation或XML文件。其实我一直蛮喜欢用Annotation来配置的，比如Spring，但是MyBatis用Annotation来配置SQL语句的话，使用代码特别长，不好看，就改用XML方式了。</p>
<figure class="highlight java"><figcaption><span>UtliMapper.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UtliMapper</span> &#123;</span><br><span class="line">    Department <span class="title function_">selectDeptById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    Employee <span class="title function_">selectEmpById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Employee&gt; <span class="title function_">findAllEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="嵌入Select查询"><a href="#嵌入Select查询" class="headerlink" title="嵌入Select查询"></a>嵌入Select查询</h3><p>在处理上面查询一个<code>Employy</code>的时候，属性包含<code>Employee mgr</code>和<code>Department deparment</code>，数据库里面是ID。mgr里面还有mgr，一直这样下去，而Department里面又有<code>List&lt;Employee&gt;</code>，如果查询方式为<code>Eager</code>的话，就会一次查询导致在数据库N多次查询。刚开始感觉还是Hibernate的简单，配置<code>@ManyToOne</code>和<code>@OneToMany</code>基本就解决了。MyBatis就自己写吧，哈哈。这里有个坑，就是配置ResultMap的时候，association和collection时，需要放最后。我理解的话就是，assocation对应<code>XxxToOne</code>，collection对应<code>OneToXxx</code>。</p>
<figure class="highlight xml"><figcaption><span>UtilMapper.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.liangwu.mybatis.model.mapper.UtliMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;cache /&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Department&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;deptno&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;location&quot;</span> <span class="attr">column</span>=<span class="string">&quot;loc&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;employeeList&quot;</span> <span class="attr">column</span>=<span class="string">&quot;deptno&quot;</span> <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span> <span class="attr">select</span>=<span class="string">&quot;selectEmpByDeptno&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;empno&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;job&quot;</span> <span class="attr">column</span>=<span class="string">&quot;job&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;hiredate&quot;</span> <span class="attr">column</span>=<span class="string">&quot;hiredate&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sal&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sal&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;comm&quot;</span> <span class="attr">column</span>=<span class="string">&quot;comm&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;mgr&quot;</span> <span class="attr">column</span>=<span class="string">&quot;mgr&quot;</span> <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span> <span class="attr">select</span>=<span class="string">&quot;selectEmpById&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;department&quot;</span> <span class="attr">column</span>=<span class="string">&quot;deptno&quot;</span> <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span> <span class="attr">select</span>=<span class="string">&quot;selectDeptById&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectDeptById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">          *</span><br><span class="line">        FROM DEPT</span><br><span class="line">        WHERE deptno=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmpByDeptno&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;List&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">          *</span><br><span class="line">        FROM EMP e</span><br><span class="line">        WHERE e.deptno=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmpById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;emp&quot;</span> &gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">          *</span><br><span class="line">        FROM EMP e</span><br><span class="line">        WHERE e.empno=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;List&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM EMP</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="嵌入Select结果"><a href="#嵌入Select结果" class="headerlink" title="嵌入Select结果"></a>嵌入Select结果</h3><p>还有一种是直接写好SQL语句，一次查询完结果返回，这样对于复杂的结构性能上应该会好一些，毕竟查询一次只用跟数据库打一次交道，而上一个方法一次查询可能需要跟数据库交流好几次。这个就是按业务要求拼SQL语句了。</p>
<figure class="highlight xml"><figcaption><span>UtilMapper.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Department&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;deptno&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;location&quot;</span> <span class="attr">column</span>=<span class="string">&quot;loc&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;employeeList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;List&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;emp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;empno&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;job&quot;</span> <span class="attr">column</span>=<span class="string">&quot;job&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;hiredate&quot;</span> <span class="attr">column</span>=<span class="string">&quot;hiredate&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sal&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sal&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;comm&quot;</span> <span class="attr">column</span>=<span class="string">&quot;comm&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;mgr&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">columnPrefix</span>=<span class="string">&quot;mgr_&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;department&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;dept&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectDeptById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">      d.deptno as deptno,</span><br><span class="line">      dname,</span><br><span class="line">      loc,</span><br><span class="line">      empno,</span><br><span class="line">      ename,</span><br><span class="line">      job,</span><br><span class="line">      mgr,</span><br><span class="line">      hiredate,</span><br><span class="line">      sal,</span><br><span class="line">      comm</span><br><span class="line">    FROM dept d</span><br><span class="line">      LEFT OUTER JOIN emp e ON d.deptno=e.deptno</span><br><span class="line">    WHERE</span><br><span class="line">      d.deptno=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmpById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">      e.empno,</span><br><span class="line">      e.ename,</span><br><span class="line">      e.job,</span><br><span class="line">      e.hiredate,</span><br><span class="line">      e.sal,</span><br><span class="line">      e.comm,</span><br><span class="line">      d.deptno,</span><br><span class="line">      d.dname,</span><br><span class="line">      d.loc,</span><br><span class="line">      e2.empno as mgr_empno,</span><br><span class="line">      e2.ename as mgr_ename,</span><br><span class="line">      e2.job as mgr_job,</span><br><span class="line">      e2.hiredate as mgr_hiredate,</span><br><span class="line">      e2.sal as mgr_sal,</span><br><span class="line">      e2.comm as mgr_sal,</span><br><span class="line">      e2.deptno as mgr_deptno</span><br><span class="line">    FROM emp e</span><br><span class="line">      LEFT OUTER JOIN dept d on e.deptno=d.deptno</span><br><span class="line">      LEFT OUTER JOIN emp e2 on e.mgr=e2.empno</span><br><span class="line">    WHERE e.empno=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>用Junit来单元测试吧。这样就应该可以看到结果咯。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JuintTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UtliMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Department</span> <span class="variable">dept</span> <span class="operator">=</span> mapper.selectDeptById(<span class="number">10</span>);</span><br><span class="line">        System.out.println(dept);</span><br><span class="line">        <span class="keyword">for</span> (Employee emp : dept.getEmployeeList())&#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> mapper.selectEmpById(<span class="number">7782</span>);</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">        System.out.println(emp.getMgr());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Employee emp : mapper.findAllEmp())&#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FetchType中Eager和Lazy的小区别"><a href="#FetchType中Eager和Lazy的小区别" class="headerlink" title="FetchType中Eager和Lazy的小区别"></a>FetchType中Eager和Lazy的小区别</h3><p>下面是分别在Select嵌入查询时使用Eager和Lazy的区别。可以看到Eager的时候，是SQL里再嵌套；而Lazy的时候，是分别查询。这样在分析业务和调优的时候可以针对性使用了。</p>
<figure class="highlight plaintext"><figcaption><span>eager</span></figcaption><table><tr><td class="code"><pre><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM dept WHERE deptno=? </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 10(Integer)</span><br><span class="line">TRACE [main] - &lt;==    Columns: DEPTNO, DNAME, LOC</span><br><span class="line">TRACE [main] - &lt;==        Row: 10, ACCOUNTING, NEW YORK</span><br><span class="line">DEBUG [main] - ====&gt;  Preparing: SELECT e.empno, e.ename, e.job, e.mgr, e.hiredate, e.sal, e.comm, e.deptno FROM emp e WHERE e.deptno=? </span><br><span class="line">DEBUG [main] - ====&gt; Parameters: 10(BigDecimal)</span><br><span class="line">TRACE [main] - &lt;====    Columns: EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO</span><br><span class="line">TRACE [main] - &lt;====        Row: 7782, CLARK, MANAGER, 7839, 1981-06-09, 2450.00, null, 10</span><br><span class="line">TRACE [main] - &lt;====        Row: 7839, KING, PRESIDENT, null, 1981-11-17, 5000.00, null, 10</span><br><span class="line">TRACE [main] - &lt;====        Row: 7934, MILLER, CLERK, 7782, 1982-01-23, 1300.00, null, 10</span><br><span class="line">DEBUG [main] - &lt;====      Total: 3</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><figcaption><span>lazy</span></figcaption><table><tr><td class="code"><pre><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM dept WHERE deptno=? </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 10(Integer)</span><br><span class="line">TRACE [main] - &lt;==    Columns: DEPTNO, DNAME, LOC</span><br><span class="line">TRACE [main] - &lt;==        Row: 10, ACCOUNTING, NEW YORK</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT e.empno, e.ename, e.job, e.mgr, e.hiredate, e.sal, e.comm, e.deptno FROM emp e WHERE e.deptno=? </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 10(BigDecimal)</span><br><span class="line">TRACE [main] - &lt;==    Columns: EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO</span><br><span class="line">TRACE [main] - &lt;==        Row: 7782, CLARK, MANAGER, 7839, 1981-06-09, 2450.00, null, 10</span><br><span class="line">TRACE [main] - &lt;==        Row: 7839, KING, PRESIDENT, null, 1981-11-17, 5000.00, null, 10</span><br><span class="line">TRACE [main] - &lt;==        Row: 7934, MILLER, CLERK, 7782, 1982-01-23, 1300.00, null, 10</span><br><span class="line">DEBUG [main] - &lt;==      Total: 3</span><br></pre></td></tr></table></figure>

<h3 id="嵌入Select查询和嵌入Select结果的区别"><a href="#嵌入Select查询和嵌入Select结果的区别" class="headerlink" title="嵌入Select查询和嵌入Select结果的区别"></a>嵌入Select查询和嵌入Select结果的区别</h3><p>其实这个通过配置Mapper的时候就可以看出来了，一个是通过几次查询，一个是通过一次查询来解决问题的。测试了下<code>mapper.selectEmpById(7782)</code>，看看结果有什么不一样。</p>
<figure class="highlight plaintext"><figcaption><span>嵌入Select查询</span></figcaption><table><tr><td class="code"><pre><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM emp e WHERE e.empno=? </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 7782(Integer)</span><br><span class="line">TRACE [main] - &lt;==    Columns: EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO, DEPARTMENT_DEPTNO, MGR_EMPNO</span><br><span class="line">TRACE [main] - &lt;==        Row: 7782, CLARK, MANAGER, 7839, 1981-06-09, 2450.00, null, 10, null, null</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM emp e WHERE e.empno=? </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 7839(BigDecimal)</span><br><span class="line">TRACE [main] - &lt;==    Columns: EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO, DEPARTMENT_DEPTNO, MGR_EMPNO</span><br><span class="line">TRACE [main] - &lt;==        Row: 7839, KING, PRESIDENT, null, 1981-11-17, 5000.00, null, 10, null, null</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM dept WHERE deptno=? </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 10(BigDecimal)</span><br><span class="line">TRACE [main] - &lt;==    Columns: DEPTNO, DNAME, LOC</span><br><span class="line">TRACE [main] - &lt;==        Row: 10, ACCOUNTING, NEW YORK</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br><span class="line">Employee&#123;id=7782, name=&#x27;CLARK&#x27;, job=&#x27;MANAGER&#x27;, mgr=KING, hiredate=1981-06-09, sal=2450.0, comm=null, department=ACCOUNTING&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><figcaption><span>嵌入Select结果</span></figcaption><table><tr><td class="code"><pre><span class="line">DEBUG [main] - ==&gt;  Preparing: SELECT e.empno, e.ename, e.job, e.hiredate, e.sal, e.comm, d.deptno, d.dname, d.loc, e2.empno as mgr_empno, e2.ename as mgr_ename, e2.job as mgr_job, e2.hiredate as mgr_hiredate, e2.sal as mgr_sal, e2.comm as mgr_sal, e2.deptno as mgr_deptno FROM emp e LEFT OUTER JOIN dept d on e.deptno=d.deptno LEFT OUTER JOIN emp e2 on e.mgr=e2.empno WHERE e.empno=? </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: 7782(Integer)</span><br><span class="line">TRACE [main] - &lt;==    Columns: EMPNO, ENAME, JOB, HIREDATE, SAL, COMM, DEPTNO, DNAME, LOC, MGR_EMPNO, MGR_ENAME, MGR_JOB, MGR_HIREDATE, MGR_SAL, MGR_SAL, MGR_DEPTNO</span><br><span class="line">TRACE [main] - &lt;==        Row: 7782, CLARK, MANAGER, 1981-06-09, 2450.00, null, 10, ACCOUNTING, NEW YORK, 7839, KING, PRESIDENT, 1981-11-17, 5000.00, null, 10</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br></pre></td></tr></table></figure>

<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>之前在看MyBatis的时候，有时候需要自己配置其它的SQL语句，比如用Map来进行动态查询，Key值表示查询的列，Value表示查询值。<code>select * from emp where $&#123;key&#125;=#&#123;value&#125;</code>，注意到$和#的区别，$的参数直接输出，#的参数会被替换为?，然后传入参数值执行。通过看Log文件大概就知道，一个是在生成SQL语句的时候就把${}替换（替换后SQL语句就生成了），另一个是在查询的时候把#{}代入?当中。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>Idea</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>自动处理NAS的Samba关闭</title>
    <url>/2022/05/24/automatic-nas-samba-start-and-stop/</url>
    <content><![CDATA[<p>家里整了NAS，后来移动有了IPv6，通过修改DNS信息，自动更新域名对应的IPv6地址，这样可以在外面直接控制NAS。里面下了不少动画片给小孩看，家里设备上网需要在OpenWrt里进行设置才可以，电视机很早就屏蔽了上网功能，所以小孩打开电视也没有用。以前试过通过<code>cron</code>来定时开启和关闭SMB，让小孩定时看动画片，可是有时候上兴趣班之类的过了时间，还是需要手动打开，然后修改<code>cron</code>增加定时关闭SMB，操作多一些，后来想了下，应该还可以再简化，记录一下吧。</p>
<p>最早之前是有想法的，比如下午5点定时打开SMB，然后监测SMB连接情况，到达30分钟后，自动关闭SMB。当时搜了下，好像没有特别好的方案，才有了上面的手动方式。后来换了下思路，以开启SMB时间为准，30分钟后自动关闭，写一个shell脚本完成。</p>
<figure class="highlight bash"><figcaption><span>smb.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line"></span><br><span class="line">DEADTIME=$(<span class="built_in">date</span> -d <span class="string">&quot;+30 minutes&quot;</span> +<span class="string">&#x27;%H:%M&#x27;</span>)</span><br><span class="line">HOUR=$(<span class="built_in">echo</span> <span class="variable">$DEADTIME</span> | <span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f1)</span><br><span class="line">MINUTE=$(<span class="built_in">echo</span> <span class="variable">$DEADTIME</span> | <span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f2)</span><br><span class="line"></span><br><span class="line">sudo systemctl start smbd</span><br><span class="line"></span><br><span class="line">crontab -l 2&gt;/dev/null | <span class="built_in">head</span> -n -1 &gt; /tmp/mycron</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$MINUTE</span> <span class="variable">$HOUR</span> * * * sudo systemctl stop smbd&quot;</span> &gt;&gt; /tmp/mycron</span><br><span class="line">crontab /tmp/mycron</span><br><span class="line"><span class="built_in">rm</span> /tmp/mycron</span><br></pre></td></tr></table></figure>

<p>需要设置下用户权限，可以使用<code>sudo systemctl</code>不用输密码</p>
<figure class="highlight plaintext"><figcaption><span>/etc/sudoers</span></figcaption><table><tr><td class="code"><pre><span class="line">liangwu ALL=(ALL:ALL) NOPASSWD:/usr/bin/systemctl</span><br></pre></td></tr></table></figure>

<p>现在就是小孩需要看电视的时候，用手机SSH登录到NAS，执行下脚本就不管了。后期考虑VPS暴露一个WEBAPI，输入一个地址加密钥完成脚本执行，嗯嗯 :)</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>smb</tag>
        <tag>samba</tag>
        <tag>cron</tag>
        <tag>shell</tag>
        <tag>nas</tag>
      </tags>
  </entry>
  <entry>
    <title>导出conda环境</title>
    <url>/2022/07/03/export-conda-env/</url>
    <content><![CDATA[<p>最近碰到一个问题，使用Keras，Tensorflow在某厂里进行机器学习，把现场的数据拷到自己电脑里面，然后学习了一段时间，实验了下下，发现还行吧，准备把东西放到内网里面，再加个FastAPI提供个服务给其它程序调用，本来想用GRPC的，想想算了，也没有太高的要求，能用就OK，懒得麻烦，HTTP省心一些。</p>
<p>但是但是，这鬼是个内网，不能下载对应的包，心中一万匹马跑过。自己电脑虚拟机搞个Windows，然后把环境搭好，到能上网的地方把依赖下载好，直接拷贝好像不行哦。</p>
<p>于是上网搜了搜，有一个包<code>conda-pack</code>可以直接用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install -c conda-forge conda-pack</span><br><span class="line">conda pack -n my_env -o my_env.tar.gz</span><br></pre></td></tr></table></figure>

<p>把<code>my_env.tar.gz</code>拷到内网机器里面，然后搞个批处理文件就可以工作了。</p>
<figure class="highlight cmd"><figcaption><span>startup.bat</span></figcaption><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cd</span> my_env</span><br><span class="line"><span class="keyword">call</span> bin\activate.bat</span><br><span class="line">python main.py</span><br></pre></td></tr></table></figure>

<p>其实还有其他方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本机</span></span><br><span class="line">conda create --name snapshot --<span class="built_in">clone</span> myenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># spec list</span></span><br><span class="line">conda list --explicit spec-list.txt</span><br><span class="line"></span><br><span class="line">conda create --name python-course --file spec-list.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Environment.yml</span></span><br><span class="line">conda <span class="built_in">env</span> <span class="built_in">export</span> environment.yml</span><br><span class="line">conda <span class="built_in">env</span> create -f environment.yml</span><br></pre></td></tr></table></figure>

<p>ref:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/54192462/how-to-package-conda-env-into-one-single-file">How to package conda env into one single file?</a></li>
<li><a href="https://conda.github.io/conda-pack/">Conda-Pack</a></li>
<li><a href="https://www.anaconda.com/blog/moving-conda-environments">Moving Conda Environments</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Conda</tag>
        <tag>Tensorflow</tag>
        <tag>Keras</tag>
      </tags>
  </entry>
  <entry>
    <title>北邮人PT种子下载</title>
    <url>/2019/04/05/byr-pt-spider/</url>
    <content><![CDATA[<p>之前一直通过SS使用VPS的IPv6是可以使用bt.byr.cn的，但是从几个月前一直无法使用，使用浏览器用代理后直接跳转到一个com.com的网站，不清楚是什么原因，但是使用curl确实是没有问题的<code>curl -x socks5://127.0.0.1:1080 -I https://bt.byr.cn/login.php</code>。前者返回的是302，后者是200。</p>
<p>后来找到了<a href="https://gist.github.com/zYeoman/1d841c5a1227697bc82c81f4acf1f2ad">zYeoman</a>的代码，也不清楚当时是怎么搜到的，可以用，但是HTML格式好像有变动，这个好解决，稍微程序动下就好了。</p>
<p>然后自己新建了个<a href="https://github.com/glw119/byr-spider">byr-spider库</a>，方便自己使用吧，加了requirements.txt，加了代理，这个我可以在没有IPv6的情况下，通过代理一样下载种子，然后看有什么自己喜欢需要下载的，就把种子文件传到VPS自己下载就好了。</p>
<p>在家里的NAS机器上新增了定时任务，自己拉最新的种子文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@hourly <span class="built_in">cd</span> ~/byr &amp;&amp; pipenv run python byr.py &gt; log.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<script src="//gist.github.com/5ba7da7936935a7cd9d7823e32373f82.js?file=byr.py"></script>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>BT</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker运行Gitlab与Host共享22端口</title>
    <url>/2018/04/19/gitlab-docker-share-22-port/</url>
    <content><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>之前团队从 SVN 已经转到 Git 管理代码了，但是但是大家还是非常不熟悉怎么管理，应该也是我没有把大家带入正轨吧，关于 GitFlow 没有好好给大家讲清楚，木办法。用<a href="(http://notes.guoliangwu.com/2018/01/09/Install-and-configure-Gogs-with-openSSH-Server/)">Gogs 管理</a>感觉不是太好，代码多了，团队项目多之后管理不是太方便。于是把目标转向了 Gitlab。但是发现服务器直接装 Gitlab 很不爽，要装一大垞东东。那就转为 Docker 吧，经过一些尝试，一段时间的运行非常不错，加上 Gitlab Runner 测试提交文件是否有问题。也可以直接用 Runner 来打包发布，但是暂时没用它，现在还是用 Jenkins 来进行发布。也比较好用了，大家代码提交合并后，一键发布代码。 :)</p>
<p>其中外网 IP 的 1111 端口映射到服务器的 5622 端口，但 5622 端口已用 nginx 反射代理了 nexus，所以 docker gitlab 在主要要换一个端口，暂时用了 18080。</p>
<h2 id="安装-Gitlab"><a href="#安装-Gitlab" class="headerlink" title="安装 Gitlab"></a>安装 Gitlab</h2><p>把 Docker 安装好，然后设置好代理，要不然的话，下载镜像实在是太太太太慢了。我用了两个代理，一个是官方的天朝代理，一个是中科大的代理。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">,</span> <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;x.x.x.x:8088&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;disable-legacy-registry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;log-driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-file&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;log-opts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;max-size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5m&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;max-file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>然后就是开始拖镜像，运行容器了。再稍微进行一点配置就 OK。</p>
<h3 id="前期准备工作"><a href="#前期准备工作" class="headerlink" title="前期准备工作"></a>前期准备工作</h3><ul>
<li>Host 有 git 用户</li>
<li>生成 Host git 用户与 docker git 用户通信用的 ssh 密钥与公钥, <code>ssh-keygen</code>。公钥保存在<code>/opt/gitlab/authorized_keys_proxy</code>，密钥保存在<code>/opt/gitlab/id_rsa</code>。</li>
<li>找一份 sshd 配置文件拷贝一份至<code>/opt/gitlab/sshd_config</code>，修改一处<code>AuthorizedKeysFile</code>，让 Host git 用户用密钥登录至 docker gitlab。<a href="https://github.com/gogits/gogs/issues/4980#issuecomment-366867170">参考处</a></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">AuthorizedKeysFile %h/.ssh/authorized_keys /gitlab-data/ssh/authorized_keys ****重要****</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li>查看 git 用户 user id 和 group id，生成一份<a href="#passwd">passwd</a>和<a href="group">group</a>文件给 docker gitlab 使用，文件见文末，从 gitlab 中提取的。我服务器上分别是 1006 和 1008。为了保证 Host 和 docker gitlab 中的数据文件不会因为权限问题而无法使用。主要是 gitlab 中的用户 SSH Key 文件与 Host git 用户共享。</li>
<li>在 Host 写个 bash 脚本，用于转发 Host 22 端口接收到 git 用户时转到 docker gitlab 去。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su - git</span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/gitlab/data/.ssh</span><br><span class="line"><span class="built_in">ln</span> -sf /opt/gitlab/data/.ssh /home/git/.ssh</span><br></pre></td></tr></table></figure>

<ul>
<li>gitlab 用户用 SSH Key 进行 git 操作时，先连接到 Host，读取<code>/home/git/.ssh/authorized_keys</code>信息并验证，其中<code>authorized_keys</code>第一行告诉用户强制运行一条命令<code>/opt/gitlab/embedded/service/gitlab-shell/bin/gitlab-shell</code>，正好用此命令转发 git 命令至 docker gitlab。这点与<a href="(http://notes.guoliangwu.com/2018/01/09/Install-and-configure-Gogs-with-openSSH-Server/)">gogs</a>中的配置类似。</li>
</ul>
<figure class="highlight bash"><figcaption><span>/opt/gitlab/embedded/service/gitlab-shell/bin/gitlab-shell</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">ssh -i /opt/gitlab/id_rsa -p 12222 -o StrictHostKeyChecking=no git@127.0.0.1 <span class="string">&quot;SSH_ORIGINAL_COMMAND=\&quot;<span class="variable">$SSH_ORIGINAL_COMMAND</span>\&quot; <span class="variable">$0</span> <span class="variable">$@</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="运行-gitlab"><a href="#运行-gitlab" class="headerlink" title="运行 gitlab"></a>运行 gitlab</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce:latest <span class="comment"># 拉镜像文件</span></span><br><span class="line">docker run -d -e -p 18080:5622 -p 12222:22 \</span><br><span class="line">  --name gitlab --restart always \ <span class="comment"># restart always保证Docker服务启动时gitlab容器运行</span></span><br><span class="line">  -v /opt/gitlab/config:/etc/gitlab \ <span class="comment"># 配置文件保存到Host，也可以用volume</span></span><br><span class="line">  -v /opt/gitlab/logs:/var/log/gitlab \ <span class="comment"># 日志</span></span><br><span class="line">  -v /opt/gitlab/data:/var/opt/gitlab \ <span class="comment"># 数据</span></span><br><span class="line">  -v /opt/gitlab/sshd_config:/etc/ssh/sshd_config:ro \ <span class="comment"># 配置Host用密钥与docker gitlab通信</span></span><br><span class="line">  -v /opt/gitlab/authorized_keys_proxy:/gitlab-data/ssh/authorized_keys:ro \ <span class="comment"># Host git用户密钥</span></span><br><span class="line">  -v /opt/gitlab/passwd:/etc/passwd:ro \ <span class="comment"># git用户信息</span></span><br><span class="line">  -v /opt/gitlab/group:/etc/group:ro \ <span class="comment"># git用户group信息</span></span><br><span class="line">  -v /usr/share/zoneinfo/Asia/Shanghai:/etc/timezone:ro \ <span class="comment"># 时区</span></span><br><span class="line">  --<span class="built_in">ulimit</span> sigpending=62793 --<span class="built_in">ulimit</span> <span class="built_in">nproc</span>=131072 \ <span class="comment"># 优化参数</span></span><br><span class="line">  --<span class="built_in">ulimit</span> nofile=60000 --<span class="built_in">ulimit</span> core=0 \</span><br><span class="line">  gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure>

<h3 id="配置-gitlab"><a href="#配置-gitlab" class="headerlink" title="配置 gitlab"></a>配置 gitlab</h3><p>用<code>docker ps</code>查看 gitlab 容器运行成功后，停止容器运行，对 gitlab 进行配置。我的配置项如下。详细各配置项可见 gitlab.rb 的注释说明，或参照<a href="https://docs.gitlab.com/omnibus/settings/configuration.html">gitlab 官网说明</a>。</p>
<figure class="highlight ruby"><figcaption><span>/opt/gitlab/config/gitlab.rb</span></figcaption><table><tr><td class="code"><pre><span class="line">external_url <span class="string">&#x27;http://10.17.65.22:5622/gitlab&#x27;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_ssh_host&#x27;</span>] = <span class="string">&#x27;10.17.65.22&#x27;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;time_zone&#x27;</span>] = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_enabled&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_from&#x27;</span>] = <span class="string">&#x27;admin@guoliangwu.com&#x27;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_display_name&#x27;</span>] = <span class="string">&#x27;Admin&#x27;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_reply_to&#x27;</span>] = <span class="string">&#x27;no_reply@guoliangwu.com&#x27;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_username_changing_enabled&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_default_theme&#x27;</span>] = <span class="number">4</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_default_projects_features_snippets&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_default_projects_features_builds&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_default_projects_features_container_registry&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;incoming_email_enabled&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_address&#x27;</span>] = <span class="string">&quot;smtp.guoliangwu.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_port&#x27;</span>] = <span class="number">465</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_user_name&#x27;</span>] = <span class="string">&quot;admin@guoliangwu.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_password&#x27;</span>] = <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_domain&#x27;</span>] = <span class="string">&quot;guoliangwu.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_authentication&#x27;</span>] = <span class="string">&quot;login&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_tls&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;registry_enabled&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">unicorn[<span class="string">&#x27;worker_processes&#x27;</span>] = <span class="number">4</span></span><br><span class="line">sidekiq[<span class="string">&#x27;concurrency&#x27;</span>] = <span class="number">15</span></span><br><span class="line">postgresql[<span class="string">&#x27;shared_buffers&#x27;</span>] = <span class="string">&quot;2GB&quot;</span></span><br><span class="line">prometheus[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p>至此，Gitlab 应该能欢快地跑起来了。后面我在其它服务器配了 gitlab runner 来检查上传的代码是否有问题，不知道有没有时间深入了解 runner，先把<code>.gitlab-ci.yml</code>传上来，以备以后使用吧。PS：因为以后打包发布什么的都要用 maven，就用了 maven 镜像。</p>
<figure class="highlight yaml"><figcaption><span>.gitlab.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">maven:latest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span> <span class="string">$(find</span> <span class="string">shanghai/service</span> <span class="string">-name</span> <span class="string">&quot;*.properties&quot;</span> <span class="string">-path</span> <span class="string">&quot;*/properties/*&quot;</span> <span class="string">|</span> <span class="string">wc</span> <span class="string">-l)</span> <span class="string">-eq</span> <span class="number">0</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span> <span class="string">$(find</span> <span class="string">shanghai/web</span> <span class="string">-name</span> <span class="string">&quot;index.js&quot;</span> <span class="string">-path</span> <span class="string">&quot;*/config/*&quot;</span> <span class="string">|</span> <span class="string">wc</span> <span class="string">-l)</span> <span class="string">-eq</span> <span class="number">0</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span> <span class="string">$(find</span> <span class="string">shanghai/web</span> <span class="string">-name</span> <span class="string">&quot;*.vue&quot;</span> <span class="string">-type</span> <span class="string">f</span> <span class="string">-exec</span> <span class="string">grep</span> <span class="string">-E</span> <span class="string">&#x27;debugger|console\.log&#x27;</span> &#123;&#125; <span class="string">\;</span> <span class="string">|</span> <span class="string">wc</span> <span class="string">-l)</span> <span class="string">-eq</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">common</span></span><br></pre></td></tr></table></figure>

<h2 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h2><figure class="highlight text"><figcaption><span>/etc/gitlab/passwd</span></figcaption><table><tr><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">systemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false</span><br><span class="line">systemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false</span><br><span class="line">systemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false</span><br><span class="line">systemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false</span><br><span class="line">_apt:x:104:65534::/nonexistent:/bin/false</span><br><span class="line">sshd:x:105:65534::/var/run/sshd:/usr/sbin/nologin</span><br><span class="line">git:x:1006:1008::/var/opt/gitlab:/bin/sh ****注意****</span><br><span class="line">gitlab-www:x:999:999::/var/opt/gitlab/nginx:/bin/false</span><br><span class="line">gitlab-redis:x:997:997::/var/opt/gitlab/redis:/bin/false</span><br><span class="line">gitlab-psql:x:996:996::/var/opt/gitlab/postgresql:/bin/sh</span><br><span class="line">mattermost:x:994:994::/var/opt/gitlab/mattermost:/bin/sh</span><br><span class="line">registry:x:993:993::/var/opt/gitlab/registry:/bin/sh</span><br><span class="line">gitlab-prometheus:x:992:992::/var/opt/gitlab/prometheus:/bin/sh</span><br><span class="line">gitlab-consul:x:991:991::/var/opt/gitlab/consul:/bin/sh</span><br></pre></td></tr></table></figure>

<h2 id="group"><a href="#group" class="headerlink" title="group"></a>group</h2><figure class="highlight text"><figcaption><span>/opt/gitlab/group</span></figcaption><table><tr><td class="code"><pre><span class="line">root:x:0:</span><br><span class="line">daemon:x:1:</span><br><span class="line">bin:x:2:</span><br><span class="line">sys:x:3:</span><br><span class="line">adm:x:4:</span><br><span class="line">tty:x:5:</span><br><span class="line">disk:x:6:</span><br><span class="line">lp:x:7:</span><br><span class="line">mail:x:8:</span><br><span class="line">news:x:9:</span><br><span class="line">uucp:x:10:</span><br><span class="line">man:x:12:</span><br><span class="line">proxy:x:13:</span><br><span class="line">kmem:x:15:</span><br><span class="line">dialout:x:20:</span><br><span class="line">fax:x:21:</span><br><span class="line">voice:x:22:</span><br><span class="line">cdrom:x:24:</span><br><span class="line">floppy:x:25:</span><br><span class="line">tape:x:26:</span><br><span class="line">sudo:x:27:</span><br><span class="line">audio:x:29:</span><br><span class="line">dip:x:30:</span><br><span class="line">www-data:x:33:</span><br><span class="line">backup:x:34:</span><br><span class="line">operator:x:37:</span><br><span class="line">list:x:38:</span><br><span class="line">irc:x:39:</span><br><span class="line">src:x:40:</span><br><span class="line">gnats:x:41:</span><br><span class="line">shadow:x:42:</span><br><span class="line">utmp:x:43:</span><br><span class="line">video:x:44:</span><br><span class="line">sasl:x:45:</span><br><span class="line">plugdev:x:46:</span><br><span class="line">staff:x:50:</span><br><span class="line">games:x:60:</span><br><span class="line">users:x:100:</span><br><span class="line">nogroup:x:65534:</span><br><span class="line">systemd-journal:x:101:</span><br><span class="line">systemd-timesync:x:102:</span><br><span class="line">systemd-network:x:103:</span><br><span class="line">systemd-resolve:x:104:</span><br><span class="line">systemd-bus-proxy:x:105:</span><br><span class="line">ssh:x:106:</span><br><span class="line">git:x:1008: ****注意****</span><br><span class="line">gitlab-www:x:999:</span><br><span class="line">gitlab-redis:x:997:</span><br><span class="line">gitlab-psql:x:996:</span><br><span class="line">mattermost:x:994:</span><br><span class="line">registry:x:993:</span><br><span class="line">gitlab-prometheus:x:99</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>git</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab Runner部分配置</title>
    <url>/2018/06/09/gitlab-runner-configuration/</url>
    <content><![CDATA[<h1 id="CI是个好东西"><a href="#CI是个好东西" class="headerlink" title="CI是个好东西"></a>CI是个好东西</h1><p>本身现在所在的团队使用Git的人不多，所以往GitLab上提交代码的时候往往有一些不合格的代码，后来发现GitLab CI可以完美地解决这个问题。</p>
<h2 id="需求及实现"><a href="#需求及实现" class="headerlink" title="需求及实现"></a>需求及实现</h2><ol>
<li>service目录中不包含platformService目录。</li>
<li>所有项目中不能包含.properties文件，以.properties.sample文件提供给大家，然后.gitignore目录中也忽略.properties文件</li>
<li>config目录中不包含index.js文件，以index.js.sample文件提供给大家</li>
<li>所有vue代码中不能包含调试用代码”debugger|console.log”</li>
<li>Java代码能编译通过</li>
</ol>
<p>只有通过以上5点的代码才能合并到主仓库，避免污染代码库。其实原因很简单，看下面就清楚。</p>
<figure class="highlight yaml"><figcaption><span>.gitlab-ci.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="number">10.17</span><span class="string">.xx.xx/maven:3-jdk-8-alpine</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">MAVEN_OPTS:</span> <span class="string">&quot;-Dmaven.repo.local=/root/.m2/repository -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true&quot;</span></span><br><span class="line">  <span class="attr">MAVEN_CLI_OPTS:</span> <span class="string">&quot;--batch-mode --errors --show-version -Dmaven.test.skip=true -s /root/.m2/settings.xml&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:validate:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span> <span class="string">$(find</span> <span class="string">service</span> <span class="string">-type</span> <span class="string">f</span> <span class="string">-path</span> <span class="string">&quot;*/platformService/*&quot;</span> <span class="string">|</span> <span class="string">wc</span> <span class="string">-l)</span> <span class="string">-eq</span> <span class="number">0</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span> <span class="string">$(find</span> <span class="string">service</span> <span class="string">-name</span> <span class="string">&quot;*.properties&quot;</span> <span class="string">-path</span> <span class="string">&quot;*/properties/*&quot;</span> <span class="string">|</span> <span class="string">wc</span> <span class="string">-l)</span> <span class="string">-eq</span> <span class="number">0</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span> <span class="string">$(find</span> <span class="string">web</span> <span class="string">-name</span> <span class="string">&quot;index.js&quot;</span> <span class="string">-path</span> <span class="string">&quot;*/config/*&quot;</span> <span class="string">|</span> <span class="string">wc</span> <span class="string">-l)</span> <span class="string">-eq</span> <span class="number">0</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span> <span class="string">$(find</span> <span class="string">web</span> <span class="string">-name</span> <span class="string">&quot;*.vue&quot;</span> <span class="string">-type</span> <span class="string">f</span> <span class="string">-exec</span> <span class="string">grep</span> <span class="string">-E</span> <span class="string">&#x27;debugger|console\.log&#x27;</span> &#123;&#125; <span class="string">\;</span> <span class="string">|</span> <span class="string">wc</span> <span class="string">-l)</span> <span class="string">-eq</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">common</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:compile:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">wget</span> <span class="string">http://10.17.xx.xx/download/settings.xml</span> <span class="string">-O</span> <span class="string">/root/.m2/settings.xml</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">$MAVEN_CLI_OPTS</span> <span class="string">-f</span> <span class="string">service/spdHERPService/pom.xml</span> <span class="string">clean</span> <span class="string">compile</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">common</span></span><br></pre></td></tr></table></figure>

<h2 id="Docker设置"><a href="#Docker设置" class="headerlink" title="Docker设置"></a>Docker设置</h2><p>其中Runner可能会用到Docker私服，现在我们是用Nexus搭建(IP:10.17.xx.xx)的，Docker需要登录才能使用。下面是Docker的配置，外面配置了两个代理，这样下载外面的镜像速度就很快了。</p>
<figure class="highlight json"><figcaption><span>daemon.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">,</span> <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;10.17.xx.xx&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;disable-legacy-registry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;log-driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-file&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;log-opts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;max-size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5m&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;max-file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>待Docker配置好后就需要配置Runner了。首先获取Docker登录私服的登录信息，<a href="https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#define-an-image-from-a-private-container-registry">官网</a>有两个方法。一个是<br><code>docker login registry.example.com --username my_username --password my_password</code>，然后查看<code>~/.docker/config.json</code>；另外一个是<code>echo -n &quot;my_username:my_password&quot; | base64</code>。然后就是把登录信息加到Runner的配置文件中去。万事OK</p>
<figure class="highlight toml"><figcaption><span>config.toml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">concurrent</span> = <span class="number">10</span></span><br><span class="line"><span class="attr">check_interval</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[runners]]</span></span><br><span class="line">  <span class="attr">name</span> = <span class="string">&quot;122-runner&quot;</span></span><br><span class="line">  <span class="attr">url</span> = <span class="string">&quot;http://10.17.xx.xx/gitlab/&quot;</span></span><br><span class="line">  <span class="attr">token</span> = <span class="string">&quot;xxxtoken&quot;</span></span><br><span class="line">  <span class="attr">executor</span> = <span class="string">&quot;docker&quot;</span></span><br><span class="line">  <span class="attr">environment</span> = [<span class="string">&quot;DOCKER_AUTH_CONFIG=&#123; \&quot;auths\&quot;: &#123; \&quot;10.17.xx.xx\&quot;: &#123; \&quot;auth\&quot;: \&quot;authtoken\&quot; &#125; &#125; &#125;&quot;</span>]</span><br><span class="line">  <span class="section">[runners.docker]</span></span><br><span class="line">    <span class="attr">tls_verify</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">image</span> = <span class="string">&quot;alpine:latest&quot;</span></span><br><span class="line">    <span class="attr">privileged</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">disable_cache</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">volumes</span> = [<span class="string">&quot;/cache&quot;</span>, <span class="string">&quot;/root/.m2&quot;</span>]</span><br><span class="line">    <span class="attr">shm_size</span> = <span class="number">0</span></span><br><span class="line">  <span class="section">[runners.cache]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>git</tag>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo配置</title>
    <url>/2017/02/10/hexo-configuration/</url>
    <content><![CDATA[<h2 id="VPS自动发布Blog"><a href="#VPS自动发布Blog" class="headerlink" title="VPS自动发布Blog"></a>VPS自动发布Blog</h2><p><a href="http://notes.guoliangwu.com/2017/01/20/hexo-setup/#%E9%85%8D%E7%BD%AE">前文</a>部署到VPS后无法正常工作，而利用<code>git hooks</code>可以解决自动布置的问题。在VPS仓接收<code>receive</code>到同步后，自动将文件同步到Web目录。</p>
<figure class="highlight bash"><figcaption><span>blog.git/hooks/post-receive</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=/wwwroot/notes.guoliangwu.com --git-dir=/xxx/xxx/blog.git checkout -f</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>配置Nginx</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">root</span> /wwwroot/notes.guoliangwu.com;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">server_name</span> notes.guoliangwu.com;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">                <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Nginx这里可以将本地一些静态文件<code>css,js,jpeg</code>等文件进行缓存。<a href="http://nginx.org/en/docs/http/ngx_http_headers_module.html">可参考官方说明</a>。</p>
<h2 id="同步hexo"><a href="#同步hexo" class="headerlink" title="同步hexo"></a>同步hexo</h2><p><a href="http://notes.guoliangwu.com/2017/01/20/hexo-setup/#%E9%85%8D%E7%BD%AE">前文</a>说明了如何Deploy到不同的站点，但此时只是Hexo生成的文件，Hexo的配置文件什么的都没有同步到git仓中。所以还要创建另外一个仓用来存放Hexo的配置文件。</p>
<p>分别在<code>Coding.net</code>，<code>Github</code>，<code>VPS</code>上<code>git init --bare &lt;folder&gt;</code>建好仓，在Hexo目录下也建好仓，然后在<code>Hexo</code>的本地仓内增加三个仓的配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin ssh://git@github.com/username/hexo.git</span><br><span class="line">git remote add origin ssh://git@git.coding.net/username/hexo.git</span><br><span class="line">git remote add origin ssh://username@guoliangwu.com/xxx/xxx.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查配置是否成功</span></span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<p>这样正常的<code>git push</code>后就可以将Hexo的配置文件同步到三个站点。</p>
<h2 id="配置ssh客户端"><a href="#配置ssh客户端" class="headerlink" title="配置ssh客户端"></a>配置ssh客户端</h2><p>在<a href="http://notes.guoliangwu.com/2017/01/14/ssh-key/">使用SSH key</a>中配置了各服务端的public key，这样可以使用同一个key登录到不同的服务器。但如果在同一个客户端使用不同的key登录到不同的服务器呢？这样就需要简单配置一下，参考了下<a href="http://stackoverflow.com/questions/2419566/best-way-to-use-multiple-ssh-private-keys-on-one-client">这篇文章</a>，具体细节可以看<a href="https://linux.die.net/man/5/ssh_config">Manual</a>。</p>
<figure class="highlight plaintext"><figcaption><span>~/.ssh/config</span></figcaption><table><tr><td class="code"><pre><span class="line">Host guoliangwu.com</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa.git</span><br><span class="line">        Port 22</span><br><span class="line">        User git</span><br><span class="line"></span><br><span class="line">Host guoliangwu.com</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa.xxx</span><br><span class="line">        Port 22</span><br><span class="line">        User username</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa.git</span><br><span class="line">        Port 22</span><br><span class="line">        User git</span><br><span class="line"></span><br><span class="line">Host git.coding.net</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa.git</span><br><span class="line">        Port 22</span><br><span class="line">        User git</span><br></pre></td></tr></table></figure>
<p>当然在Server端需要用到多key验证的话，直接将public key加到<code>authorized_keys</code>就好。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>ssh</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes及Gitlab-Runner安装</title>
    <url>/2019/11/02/k8s-installation/</url>
    <content><![CDATA[<p>团队去年将代码管理迁移到Gitlab后，尝试了CI&#x2F;CD，用Gitlab-Runner来测试提交的代码是否有问题，用3台机器，kubeadm搭建了一个小的k8s运行环境。上个月25日突然反映runner不能正常运行，后台看了下是证书过期的原因，kubeadm v1.5后好像有证书更新的功能，之前用的好像是v1.2版本，证书更新起来不太方便。现在在做项目，没有时间去整理，还不如重新搭建算了。后来有时间的话，再尝试搭建k8s，the hard way，应该会对kubernetes更深一步的了解。</p>
<p>前段时间CentOS 8发布了，也试了下CentOS 8，但是各方软件兼容还存在一点问题，比如Docker，后来还是以CentOS 7为操作系统。vSphere里新建一台机器，各参数设置好后，再Clone两台，修改IP和hostname就OK，省一些系统安装的时间。</p>
<h2 id="Docker准备"><a href="#Docker准备" class="headerlink" title="Docker准备"></a>Docker准备</h2><p>Docker安装比较简单，按<a href="https://docs.docker.com/install/linux/docker-ce/centos/">官方指引</a>来就OK，因其它原因国内下载Docker Image比较慢，需要一些简单配置，主要参考<a href="https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/">TUNA</a>和<a href="http://mirrors.ustc.edu.cn/help/dockerhub.html">USTC</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">sudo sed -i <span class="string">&#x27;s+download.docker.com+mirrors.tuna.tsinghua.edu.cn/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum install yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum install docker-ce</span><br><span class="line">gpasswd -a user docker</span><br><span class="line">systemctl <span class="built_in">enable</span> --now docker</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><figcaption><span>/etc/docker/daemon.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">,</span><span class="string">&quot;https://docker.mirrors.ustc.edu.cn/&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;10.17.65.22:8088&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;log-driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-file&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;log-opts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;max-size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10m&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max-file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;labels&quot;</span><span class="punctuation">:</span> <span class="string">&quot;production_status&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;os,customer&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exec-opts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;native.cgroupdriver=systemd&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Kubeadm安装k8s"><a href="#Kubeadm安装k8s" class="headerlink" title="Kubeadm安装k8s"></a>Kubeadm安装k8s</h2><h3 id="Kubeadm准备"><a href="#Kubeadm准备" class="headerlink" title="Kubeadm准备"></a>Kubeadm准备</h3><p>Kubeadm安装参考<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">官方文档</a>。这次安装的版本是v1.16.2，版本不一样可能涉及到一些Docker Image不一样。可通过<code>kubeadm config images list</code>查看对应版本需要下载的镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">#gpgcheck=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set SELinux in permissive mode (effectively disabling it)</span></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">&#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line">yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> --now kubelet</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt;  /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>

<h3 id="Docker-Image准备"><a href="#Docker-Image准备" class="headerlink" title="Docker Image准备"></a>Docker Image准备</h3><p>因为某些原因无法从外网下载镜像，需要手动处理下，这里要感谢下阿里，提供了一个镜像下载地址。</p>
<figure class="highlight bash"><figcaption><span>./k8s_mirror.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">images=(kube-apiserver:v1.16.2</span><br><span class="line">kube-controller-manager:v1.16.2</span><br><span class="line">kube-scheduler:v1.16.2</span><br><span class="line">kube-proxy:v1.16.2</span><br><span class="line">pause:3.1</span><br><span class="line">etcd:3.3.15-0</span><br><span class="line">coredns:1.6.2)</span><br><span class="line"><span class="comment">#flannel:v0.11.0-amd64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or bluersw/image:version</span></span><br><span class="line"><span class="keyword">for</span> imageName <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span> ; <span class="keyword">do</span></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="variable">$imageName</span></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="variable">$imageName</span> k8s.gcr.io/<span class="variable">$imageName</span></span><br><span class="line"><span class="comment">#docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName 10.17.65.22:8088/$imageName</span></span><br><span class="line"><span class="comment">#docker push 10.17.65.22:8088/$imageName</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>写好脚本后，直接运行这个脚本，把需要的Image拉下来。</p>
<h3 id="k8s节点"><a href="#k8s节点" class="headerlink" title="k8s节点"></a>k8s节点</h3><p>k8s的节点安装参考<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/">官方文档</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo kubeadm init --kubernetes-version=v1.16.2 --apiserver-advertise-address=10.17.65.250 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.1.0.0/16</span><br><span class="line"><span class="built_in">mkdir</span> -p ~/.kube</span><br><span class="line">sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf ~/.kube/config</span><br><span class="line">sudo <span class="built_in">chown</span> liangwu:liangwu ~/.kube/config</span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>

<p>其它节点根据<code>kubeadm init</code>后的提示直接<code>kubeadm join</code>就好了。<a href="https://github.com/sunweisheng/Kubernetes/blob/master/Install.md">前提也是需要把一些镜像拉下来</a>。</p>
<ul>
<li>k8s.gcr.io&#x2F;pause:3.1</li>
<li>k8s.gcr.io&#x2F;kube-proxy:v1.16.2</li>
<li>quay.io&#x2F;coreos&#x2F;flannel:v0.11.0-amd64</li>
</ul>
<h2 id="Gitlab-Runner-Helm安装"><a href="#Gitlab-Runner-Helm安装" class="headerlink" title="Gitlab-Runner Helm安装"></a>Gitlab-Runner Helm安装</h2><h3 id="安装Helm"><a href="#安装Helm" class="headerlink" title="安装Helm"></a>安装Helm</h3><p>参照<a href="https://helm.sh/docs/using_helm/#installing-helm">官方文档</a>，作简要配置。</p>
<figure class="highlight yaml"><figcaption><span>rbac-config.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tiller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tiller</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tiller</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure>

<p>然后运行<code>kubectl create -f rbac-config.yaml</code>。或者其它方式。主要是<a href="https://kubernetes.io/docs/admin/authorization/rbac/#service-account-permissions">RBAC</a>的问题。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create serviceaccount --namespace kube-system tiller</span><br><span class="line">kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller</span><br><span class="line">kubectl patch deploy --namespace kube-system tiller-deploy -p <span class="string">&#x27;&#123;&quot;spec&quot;:&#123;&quot;template&quot;:&#123;&quot;spec&quot;:&#123;&quot;serviceAccount&quot;:&quot;tiller&quot;&#125;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="Helm配置"><a href="#Helm配置" class="headerlink" title="Helm配置"></a>Helm配置</h3><p>Helm也涉及到一些被墙的东西，换下拉取地址。再次感谢阿里？ :)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm repo add gitlab https://charts.gitlab.io/</span><br><span class="line">helm init -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.5.1 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts --service-account tiller --history-max 200</span><br></pre></td></tr></table></figure>

<h3 id="Gitlab-Runner安装"><a href="#Gitlab-Runner安装" class="headerlink" title="Gitlab Runner安装"></a>Gitlab Runner安装</h3><p>Gitlab Runner的<a href="https://docs.gitlab.com/runner/install/kubernetes.html">文档</a>确实好像不怎么样，好多东西都没写，或者写得不好。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#values.yaml需要根据自己实际情况进行修改，各项都有说明</span></span><br><span class="line">wget -c https://gitlab.com/gitlab-org/charts/gitlab-runner/raw/master/values.yaml?inline=<span class="literal">false</span></span><br><span class="line">helm fetch gitlab/gitlab-runner</span><br><span class="line">tar xvf gitlab-runner-<span class="variable">$&#123;version&#125;</span>.tgz</span><br><span class="line">helm install --namespace gitlab --name gitlab-runner -f values.yaml ./gitlab-runner-<span class="variable">$&#123;version&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>values.yaml</code>有以下几点需要注意的。</p>
<figure class="highlight yaml"><figcaption><span>values.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">gitlabUrl:</span> <span class="string">&quot;http://10.17.65.22:5622/gitlab&quot;</span></span><br><span class="line"><span class="comment">#注册新runner</span></span><br><span class="line"><span class="attr">runnerRegistrationToken:</span> <span class="string">&quot;xxxx&quot;</span></span><br><span class="line"><span class="comment">#已有runner的token</span></span><br><span class="line"><span class="attr">runnerToken:</span> <span class="string">&quot;D1zsss2nS6Lgkx5M4_zx&quot;</span></span><br><span class="line"><span class="attr">runners:</span></span><br><span class="line">  <span class="comment">#从私有docker registry中拉取image时需要的认证信息，可参考原values.yaml中的k8s官方链接说明</span></span><br><span class="line">  <span class="attr">imagePullSecrets:</span> [<span class="string">&quot;regcred&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>我们Gitlab CI&#x2F;CD中有个验证就是利用maven编译代码是否可通过，其中需要拉取很多供事的jar包，每次都拉取比较耗时，虽然都从局域网的私服拉。可将.m2的缓存存在node本机，小的k8s就这么做吧。懒得去设置PV，PVC了。以后需要大的k8s，再去整PV吧。NFS啊，MinIO之类的。在helm包文件里修改<code>templates/configmap.yaml</code>，在<code>start gitlab runner</code>之前加入以下内容。已经在<a href="https://gist.github.com/glw119/12b670537893e91068981ce05a9e0e5e#file-configmap-yaml-L45-L54">Gist</a>中加入。</p>
<figure class="highlight yaml"><figcaption><span>gitlab-runner/templates/configmap.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">### ...</span></span><br><span class="line"></span><br><span class="line">    <span class="string">cat</span> <span class="string">&gt;&gt;/home/gitlab-runner/.gitlab-runner/config.toml</span> <span class="string">&lt;&lt;EOF</span></span><br><span class="line">            [[<span class="string">runners.kubernetes.volumes.host_path</span>]]</span><br><span class="line">              <span class="string">name</span> <span class="string">=</span> <span class="string">&quot;m2&quot;</span></span><br><span class="line">              <span class="string">mount_path</span> <span class="string">=</span> <span class="string">&quot;/root/.m2&quot;</span></span><br><span class="line">              <span class="string">host_path</span> <span class="string">=</span> <span class="string">&quot;/m2&quot;</span></span><br><span class="line">            [[<span class="string">runners.kubernetes.volumes.host_path</span>]]</span><br><span class="line">              <span class="string">name</span> <span class="string">=</span> <span class="string">&quot;cache&quot;</span></span><br><span class="line">              <span class="string">mount_path</span> <span class="string">=</span> <span class="string">&quot;/cache&quot;</span></span><br><span class="line">              <span class="string">host_path</span> <span class="string">=</span> <span class="string">&quot;/cache&quot;</span></span><br><span class="line">    <span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### ...</span></span><br></pre></td></tr></table></figure>

<p>下面是配置文件详情。</p>
<script src="//gist.github.com/12b670537893e91068981ce05a9e0e5e.js?file=configmap.yaml"></script>

<script src="//gist.github.com/12b670537893e91068981ce05a9e0e5e.js?file=values.yaml"></script>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>k8s</tag>
        <tag>kubernetes</tag>
        <tag>kubeadm</tag>
        <tag>GitLab-Runner</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Hexo</title>
    <url>/2017/01/20/hexo-setup/</url>
    <content><![CDATA[<h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a><a href="https://hexo.io/zh-cn/docs/index.html">什么是Hexo</a></h2><p>自己的那个VPS太久没有管了，用的是WordPress，对于我个人使用而言太重，正好Github Pages可以用来搞个静态Blog，轻太多了。只是配置起来比WordPress稍微麻烦一些。以此记录下。</p>
<p>Hexo网站上写了一段话。</p>
<blockquote>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</blockquote>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装前需要先安装<code>Node.js</code>和<code>Git</code>，然后用<code>npm</code>安装Hexo。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>这样会在<code>&lt;folder&gt;</code>下生成建站所需要的文件，具体各文件可参考<a href="https://hexo.io/zh-cn/docs/setup.html">官方介绍</a>。其中<code>npm install</code>用来安装当前目录下的<code>package.json</code>里面记录的各种依赖关系，当自己安装插件的时候就可以用<code>npm install pkg-name --save</code>，加save的意思就是安装插件的同时将依赖关系写入配置文件<code>package.json</code>。记录下现在用的配置文件。</p>
<figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Liangwu&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.2.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-all-minifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.14&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-deployer-git&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-baidu-sitemap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-searchdb&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-sitemap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-jade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.10&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-sass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>写Blog的话，就直接看<a href="https://hexo.io/zh-cn/docs/writing.html">官网</a>就OK。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>主要配置就是主题，现在用的主题可看Next，页面footer链接直达。主题如何配置就可以去看官网了，其中有一点让我调了半天的是主题作者上面写的js,css的CDN使坏，会在页面上加上广告，找了半天才找出来。好像是换成<a href="http://www.bootcdn.cn/">BootCDN</a>，然后Google Fonts换成<a href="https://lug.ustc.edu.cn/wiki/lug/services/googlefonts">USTC</a>。</p>
<p>然后就是发布设置到三个站点，Github，Coding，自己的VPS。</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:username/username.github.io.git,master</span></span><br><span class="line">    <span class="attr">conding:</span> <span class="string">git@git.coding.net:username/username.git,master</span></span><br><span class="line">    <span class="attr">vps:</span> <span class="string">ssh://username@guoliangwu.com/home/username/hexo.git,master</span></span><br></pre></td></tr></table></figure>

<p>其中Coding有个要求，根目录下需要有个空文件<code>Staticfile</code>，这样才会正常使用。然后Github绑定域名需要在根目录下的<code>CNAME</code>里填写绑定的域名。Blog的根目录在未发布里就是<code>sources</code>目录。</p>
<p>其中有两点，Github和Coding建仓的时候，需要同用户名相同，比如Github下为<code>username.github.io</code>和Coding下为<code>username</code>。然后将所使用的域名指向Github的<a href="username.github.com">username.github.com</a>和Coding的<a href="pages.coding.me">pages.coding.me</a>。VPS的话，直接建个仓就好，<code>git init --bare &lt;folder&gt;</code>。</p>
<p>写完Blog就可以直接发布，这样Github和Coding就可以直接展示，但VPS还有一点需要解决，需要用到git-hooks，简单配置下Nginx，下次再说。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g //生成</span><br><span class="line">$ hexo s //本地服务器查看，http://localhost:8080</span><br><span class="line">$ hexo d //发布</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>NAS搭建</title>
    <url>/2019/03/22/nas-setting-up/</url>
    <content><![CDATA[<h1 id="NAS搭建"><a href="#NAS搭建" class="headerlink" title="NAS搭建"></a>NAS搭建</h1><p>其实很早的时候就想搞一台NAS玩了，毕竟有很多想收藏的高清视频，还有一些自己私人资料，不方便存在云盘里面的。之前HP Gen8机器还是不错，扩展性也非常不错，只是感觉有点小贵，然后就是风扇噪音问题比较严重，查了下说是HP虚拟的一个Raid卡造成的问题，在*nix下面无法获取到硬盘的温度，导致风扇会以最大转速工作。当然查Gen8的资料是最近正式想整一台NAS后才开始。之前是用蛮早的一台上网本，好像是三星N2600之类的型号吧，装了CentOS，专门下载PT和存照片。后来空间不够用，就想起还是组一台NAS吧，正好家里有6台笔记本(Surface Pro 4, Thinkpad T400, Thinkpad E330, Thinkpad E420 x 2, Samung N2600)，2.5寸硬盘有6个，本着不能浪费的原则，就开始整NAS了。</p>
<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>19年春节前就一直想着这个事情，老天也是“给力”，春节期间还真是没有出过一个太阳，就宅在家里想着怎么组这个NAS。</p>
<h3 id="FreeBSD-x2F-ZFS-x2F-Jail"><a href="#FreeBSD-x2F-ZFS-x2F-Jail" class="headerlink" title="FreeBSD&#x2F;ZFS&#x2F;Jail"></a>FreeBSD&#x2F;ZFS&#x2F;Jail</h3><p>FreeBSD很稳定，port也非常好用。之前工作的主力系统是Gentoo，所以对FreeBSD很有好感。但是ZFS一直没有正式接触过，于是把<a href="https://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/">FreeBSD Handbook</a>好好地看了下，确实ZFS很强大，可以忘掉Raid，忘掉分区，不同目录设置不能参数适应不同用途（加密，压缩等等），快照功能。还有Jail可用，用途有点类似Linux下的Docker，可以把程序关到Jail里运行，不影响主系统。</p>
<p>但是真正用起来感觉还有好多东西需要深入研究，但又没那么多时间。</p>
<ol>
<li>ZFS很强大，但同时也是内存大户，推荐是1T配1G内存，然后建议是配ECC内存（这个作者原意思是关心数据的话，不管是什么文件系统，都建议ECC）。现在内存不是太贵，但是要自己组NAS的话，ECC内存好像不好搞定。</li>
<li>ZFS优化比较麻烦。在虚拟机里用ZFS和UFS测试NextCloud&#x2F;MySQL时，发现ZFS明显慢很多。放狗搜了下，关于ZFS优化MySQL这方面，有蛮多参数需要配置的。</li>
<li>ZFS快照功能暂时好像用不上，没这需要。但蛮喜欢加密和压缩功能的。</li>
<li>Jail配置NAT网络比较麻烦，不如Docker来得方便。而且PF与iptables又不一样，还要查不少资料，烦。</li>
<li>担心FreeBSD的硬件兼容性，不能够让NAS达到最节能的状态。</li>
</ol>
<p>所以最后还是放弃了FreeBSD。</p>
<h3 id="OpenMediaVault-OMV"><a href="#OpenMediaVault-OMV" class="headerlink" title="OpenMediaVault(OMV)"></a>OpenMediaVault(OMV)</h3><p>之前本来确实是想用FreeBSD来组NAS的，后来@kurtyan推荐使用OMV。然后就是虚拟机里搞了一把，有几个槽点吧。</p>
<ol>
<li>OMV镜像安装不支持UEFI，这个锅应该让Debian 8背吧。。。然后就是OMV镜像安装时，好像要选整个硬盘，这个有点恶心，后来干脆自己先装好Debian 9然后再装OMV。</li>
<li>感觉Web管理页面上有太多我不想要，也用不着的功能，看着比较浪费。</li>
</ol>
<p>感觉OMV比较适合新手，界面什么的还是比较友好的。后来一想这个web管理界面，FreeBSD的webadmin也可以管理啊，一查Linux也可以用webadmin。但最后还是没有用webadmin，自己从基层组算了。</p>
<h3 id="Debian-x2F-LVM-x2F-Docker"><a href="#Debian-x2F-LVM-x2F-Docker" class="headerlink" title="Debian&#x2F;LVM&#x2F;Docker"></a>Debian&#x2F;LVM&#x2F;Docker</h3><p>OMV是基于Debian的，还不如自己搭建想要的功能呢。刚开始有考虑CentOS，但本人不喜欢它的图形安装界面，好像比Debian耗资源一些，就pass掉了。</p>
<p>既然是自己用的NAS就需要考虑下数据的安全问题，以防硬盘突然挂掉，开始考虑的是软raid，重要数据raid 1，视频数据raid 0，后来考虑再三还是放弃了软raid的方案，买的是4盘位机箱，比较少，还是用USB3.0外挂硬盘，定时备份重要数据，特别重要的文件就GnuPG加密后传网盘。还有一个就是使用LVM管理分区，这样可以最大限度地使用硬盘空间，后面系统配置的时候再详细谈下。其实ZFS对于这两点很适合，send&#x2F;recv备份很方便，分区根本不需要管，把不同硬盘加到不同pool就OK了。</p>
<p>还有一个选Linux的原因应该就是Docker了。这样可以很大程序减少应用程序对系统的干扰，把能在Docker下面跑的都放进去，各自跑各自的。</p>
<p>所以我最后选择了Debian开干。</p>
<h2 id="硬件配置"><a href="#硬件配置" class="headerlink" title="硬件配置"></a>硬件配置</h2><p>硬件配置最开始设想的是4个SATA3接口，2个网卡，PICe接口进行扩展，CPU性能无所谓。网上搜了不少，候选方案有下面几个：</p>
<ol>
<li>HP Gen8。2个数据网口，1个管理网口。这点对于服务器管理非常重要，丢在某个角落完全不用管，可直接iLO进行所有操作。有4个盘位，还有内置的USB、SD卡插口。就是有点小贵，还有风扇噪音。</li>
<li>HP Gen10。2个数据网口，4个盘位，AMD CPU。感觉也OK，风扇不吵了，但是少了iLO，而且低配价格也很高。</li>
<li>GA N3160主板。2个数据网口，4个盘位，PCI插槽。刚开始是冲是它去的，最后PCI插槽放弃了，而且价格比J3455贵100多大洋。</li>
<li>ASRock J4105&#x2F;J3455。1个数据网口，4个盘位，PCIe x1插槽。两块板CPU有差别，内存一个是DDR4，一个是DDR3。但是J3455支持16G，J4105只支持8G。最后选择了J3455，因为它便宜 :)</li>
</ol>
<p>其实最早是蛮想2个网口链路聚合的，这样多处同时从NAS存取数据的时候，网络不会成为其瓶颈，后来想了想，估计同时多处使用NAS的情况最近几年都不会有，后面如果确实有需要，可以PCIe转双网卡就OK。家里网线是六类双屏蔽（那个硬啊，现在有点后悔用双屏蔽的了），交换机Linksys SLM2008，路由器Buffalo WZR-HP-AG300H，光纤入户100M，所以暂时屋内1G局域网应该够用了。</p>
<p>这里给自己上了一课吧，当时查ASRock官网J3455的时候，就注意到SATA的第3，4接口是ASMedia ASM1061出来的，跟我后来买的PCIe转SATA接口是一样的。好像最高是400MB&#x2F;s，就是如果这几个接口上SSD的话，可能会影响期性能。而且PCIe 2.0 x1的最高速度是500MB&#x2F;s，这块也成了影响其性能的要点了。</p>
<p>电源选择方面，可以选小的DC转24针这种，完全没有噪音，功耗也低，但是但是贵啊。。。。最后选了一个ENP 7025B 250W的Flex电源，有噪音，功耗也比DC高，但是但是便宜啊 :(</p>
<p>开始机箱自带的风扇是12cm，直接从电源取电，也就是说一直是全速状态。看了下J3455板是CPU和机箱风扇电源接口都是3线的，所以可以调节风扇转速，后来又购了1个12cm 1500rpm的3线风扇。可惜板子不支持4线的风扇。。。</p>
<p>嗯，后面再详细记录下系统方面的配置吧。</p>
<h2 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h2><h3 id="Debian"><a href="#Debian" class="headerlink" title="Debian"></a>Debian</h3><p>Debian安装比较简单了，将网络安装的ISO写入到U盘，安装就OK了。其实完全可以用PXE来搞定，后面再记录下PXE吧。</p>
<h3 id="LVM"><a href="#LVM" class="headerlink" title="LVM"></a>LVM</h3><p>LVM里面有几个名词，PV物理卷（可以是硬盘，分区，文件），VG卷组（由物理卷组成的组，有点类似ZFS的Pool），LV逻辑卷（类似普通分区，可格式化，挂载）。</p>
<h4 id="PV操作"><a href="#PV操作" class="headerlink" title="PV操作"></a>PV操作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/dev/xxx bs=512 count=1</span><br><span class="line">pvcreate /dev/xxx</span><br><span class="line">pvs</span><br><span class="line">pvremove /dev/xxx</span><br></pre></td></tr></table></figure>

<h4 id="VG操作"><a href="#VG操作" class="headerlink" title="VG操作"></a>VG操作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vgcreate vg-nas /dev/xxx /dev/xxx</span><br><span class="line">vgextend vg-nas /dev/xxx</span><br><span class="line">vgreduce vg-nas /dev/xxx</span><br><span class="line">vgchange -a y/n vg-nas <span class="comment"># activating/deactivating vg</span></span><br><span class="line">vgremove vg-nas</span><br><span class="line">vgrename vg-nas-old vg-nas-new</span><br><span class="line">vgs</span><br></pre></td></tr></table></figure>

<h4 id="LV操作"><a href="#LV操作" class="headerlink" title="LV操作"></a>LV操作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lvcreate -L 1T -n lv-data vg-nas <span class="comment"># linar</span></span><br><span class="line">lvcreate -l 100%FREE -n lv-other vg-nas</span><br><span class="line">lvs</span><br><span class="line">lvextend -l +100%FREE -n vg-name lv-name <span class="comment"># /dev/vg-name/lv-name</span></span><br><span class="line">resize2fs /dev/vg-name/lv-name</span><br><span class="line">lvreduce --resizefs -L 500G vg-name/lv-name</span><br></pre></td></tr></table></figure>

<p>LVM调整挂载点容量大小就比较方便了，不明白的时候可以看RedHat的在线文档，写得很详细。</p>
<h3 id="sshd"><a href="#sshd" class="headerlink" title="sshd"></a>sshd</h3><p>默认SSHD是密码登录的，可以用<code>sshkey-gen</code>生成密钥后，再用<code>ssh-copy-id</code>将公钥复制到远程主机。NAS我需要internet也能访问到，这样SSHD默认配置就不太合适了，需要改几个地方，其实打开<code>/etc/ssh/sshd_config</code>就一目了然，从配置字面上就能知道啥作用了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Protocol 2</span><br><span class="line"></span><br><span class="line">PermitRootLogin no</span><br><span class="line">StrictModes yes</span><br><span class="line">MaxAuthTries 6 #BAN IP的话可以用Fail2ban</span><br><span class="line">MaxSessions 10</span><br><span class="line"></span><br><span class="line">AuthorizedKeysCommand none</span><br><span class="line">AuthorizedKeysCommandUser nobody</span><br><span class="line"></span><br><span class="line">PasswordAuthentication no</span><br><span class="line">PermitEmptyPasswords no</span><br><span class="line"></span><br><span class="line">AllowGroups sshusers #将需要使用ssh的用户加入sshusers用户组</span><br></pre></td></tr></table></figure>

<h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><p>之前内网穿透使用的是<a href="https://notes.guoliangwu.com/2018/11/18/use-ssh-proxy/">ssh端口转发</a>，NAS用远程端口转发<code>-R 2222:127.0.0.1:22 VPS</code>(VPS的2222端口转发到NAS的22端口)，然后在终端机使用本地端口转发<code>-L 4444:127.0.0.1:2222 VPS</code>(终端机4444端口转发到VPS的2222端口)，这样在终端机<code>ssh -p 4444 localhost</code>就可以访问NAS了，很方便不是？后来好像有时候网络不稳定，掉线后NAS不会自己进行端口转发，然后就找到了现在用的<a href="https://notes.guoliangwu.com/2018/11/18/use-ssh-proxy/">frp</a>和<a href="https://github.com/kuoruan/openwrt-frp">openwrt frp</a>。</p>
<p>其中frp VPS Server端的配置如下。其实程序自带的说明文件里说得很详细，认真看下就可以配得很好了。</p>
<figure class="highlight ini"><figcaption><span>/etc/frp/frps.ini</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">bind_udp_port</span> = <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tcp_bind_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dashboard_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dashboard_user</span> = user</span><br><span class="line"><span class="attr">dashboard_pwd</span> = pwd</span><br><span class="line"></span><br><span class="line"><span class="attr">log_file</span> = /var/log/frps.log</span><br><span class="line"></span><br><span class="line"><span class="attr">log_info</span> = info</span><br><span class="line"><span class="attr">log_max_days</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">privilege_token</span> = privilege_token</span><br><span class="line"></span><br><span class="line"><span class="attr">max_pool_count</span> = <span class="number">5</span></span><br><span class="line"><span class="attr">max_ports_per_client</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">authentication_timeout</span> = <span class="number">900</span></span><br><span class="line"><span class="attr">tcp_mux</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>frps.service</span></figcaption><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=frps daemon</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=nobody</span><br><span class="line">Group=nogroup</span><br><span class="line">ExecStart=/usr/bin/frps -c /etc/frp/frps.ini</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.targe</span><br></pre></td></tr></table></figure>

<p>其中NAS的frp配置如下。OpenWrt的话，直接使用screen，<code>sleep 30 &amp;&amp; screen -dmS frpc frpc -c /etc/frp/frpc.ini</code>，加到<code>/etc/rc.local</code>。</p>
<figure class="highlight ini"><figcaption><span>frpc.ini</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = VPS_IP</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log_file</span> = /var/log/frpc.log</span><br><span class="line"><span class="attr">log_level</span> = info</span><br><span class="line"><span class="attr">log_max_days</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">privilege_token</span> = privilege_token</span><br><span class="line"></span><br><span class="line"><span class="attr">admin_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">admin_port</span> = <span class="number">7400</span></span><br><span class="line"><span class="attr">admin_user</span> = admin_user</span><br><span class="line"><span class="attr">admin_passwd</span> = admin_pwd</span><br><span class="line"></span><br><span class="line"><span class="attr">pool_count</span> = <span class="number">5</span></span><br><span class="line"><span class="attr">tcp_mux</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">user</span> = nas</span><br><span class="line"><span class="attr">log_fail_exit</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">protocol</span> = tcp</span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">2222</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>frpc.service</span></figcaption><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=FRP Client Daemon</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/local/bin/frpc -c /etc/frp/frpc.ini</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=20s</span><br><span class="line">User=nobody</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<h3 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h3><p>NAS的话必须要下载片子咯，BT&#x2F;PT使用的是transmission，普通其它下载用的是aria2。使用transmission需要下载几个包<code>apt install transmission-&#123;daemon, remote&#123;,-cli&#125;&#125;</code>，平时使用的话我在bash里加了下载几个alias。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> lcp=<span class="string">&#x27;rsync -avhW --no-compress --progress&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> t-remote=<span class="string">&#x27;transmission-remote -n user:password localhost&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> t-remote=<span class="string">&#x27;transmission-remote-cli -c user:password@localhost:9091&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> a-d=<span class="string">&#x27;aria2c -x 10 -j 1 --http-user user --http-passwd passwd&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="NextCloud"><a href="#NextCloud" class="headerlink" title="NextCloud"></a>NextCloud</h3><p>其中架NAS最重要的一点就是网盘，放一些家庭照片和视频，常跟老婆説，等以后崽结婚的时候，把小时候的照片拿出来看，哈哈哈。</p>
<p>之前家里用的是FreeBSD下面架设的，这次换成Debian，那肯定就用Docker来跑这些咯，以后迁移起来也是非常快的，打包带走。。。</p>
<figure class="highlight yaml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./db:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=pwd1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=pwd2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=nextcloud</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=nextcloud</span></span><br><span class="line">  <span class="attr">nextcloud:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nextcloud:15-fpm-alpine</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./html:/var/www/html</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./nginx</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nextcloud</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./html:/var/www/html</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中<code>./nginx/default.conf</code>可以直接参考<a href="https://docs.nextcloud.com/server/15/admin_manual/installation/nginx.html">官网文档</a>，然后还有一点就是nginx和nextcloud的docker image中用户名ID不一致，这样共享的目录<code>./html</code>就不能同时使用。需要调整下，nginx的image很小，可以直接从它下手，nginx的Dockerfile如下。</p>
<figure class="highlight dockerfile"><figcaption><span>nginx</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s/:100:/:82:/g&#x27;</span> /etc/passwd; \</span></span><br><span class="line"><span class="language-bash">    sed -i <span class="string">&#x27;s/:101:/:82:/g&#x27;</span> /etc/passwd /etc/group</span></span><br></pre></td></tr></table></figure>

<h3 id="SAMBA"><a href="#SAMBA" class="headerlink" title="SAMBA"></a>SAMBA</h3><p>家里其他设备访问NAS估计用得最多的就是SAMBA了吧，直接在<code>/etc/samba/smb.conf</code>最后加上一些配置就OK了，也懒得再认真配置了，只要能访问到就OK。</p>
<figure class="highlight plaintext"><figcaption><span>smb.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">[public]</span><br><span class="line">  comment = public</span><br><span class="line">  path = /data/BTDownloads</span><br><span class="line">  browsable = yes</span><br><span class="line">  create mask = 0660</span><br><span class="line">  directory mask = 0771</span><br><span class="line">  writable = no</span><br><span class="line">  guest ok = yes</span><br><span class="line">[videos]</span><br><span class="line">  comment = public</span><br><span class="line">  path = /mnt/videos</span><br><span class="line">  browsable = yes</span><br><span class="line">  create mask = 0660</span><br><span class="line">  directory mask = 0771</span><br><span class="line">  writable = no</span><br><span class="line">  guest ok = yes</span><br><span class="line">[win7]</span><br><span class="line">  comment = public</span><br><span class="line">  path = /mnt/cdrom</span><br><span class="line">  browsable = no</span><br><span class="line">  create mask = 0660</span><br><span class="line">  directory mask = 0771</span><br><span class="line">  writable = no</span><br><span class="line">  guest ok = yes</span><br><span class="line">[personal]</span><br><span class="line">  comment = personal</span><br><span class="line">  path = /mnt/nas/personal</span><br><span class="line">  browsable = no</span><br><span class="line">  create mask = 0660</span><br><span class="line">  directory mask = 0771</span><br><span class="line">  writable = yes</span><br><span class="line">  guest ok = no</span><br></pre></td></tr></table></figure>

<h3 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h3><p>家里还有一些其他设备，比如路由器(OpenWrt)和Raspberry Pi，它们可以很方便的使用NFS，这样NAS提供NFS服务就可以了。修改<code>/etc/exports</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/mnt/nas/Tools  *(no_subtree_check,ro,all_squash,insecure,async)</span><br></pre></td></tr></table></figure>

<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>硬盘多了，功率也大，安装包<code>hdparm</code>可以设置硬盘standby的时间，据説可以延长使用时间，减小功耗，前提是不要设置得太小，硬盘磁头一停一启动地可能更耗硬盘。修改<code>/etc/hdparm.conf</code></p>
<figure class="highlight plaintext"><figcaption><span>/etc/hdparm.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">/dev/sdb &#123;</span><br><span class="line">    spindown_time = 250</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>安装<code>hddtemp sensors</code>来读取温度值。</p>
<h2 id="BIOS设置"><a href="#BIOS设置" class="headerlink" title="BIOS设置"></a>BIOS设置</h2><p>关闭非必要功能，节能设置等</p>
<p>WOL，需要开启PCIE power on</p>
<h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol>
<li><p>NAS下载了很多片片，要传到手机上看，之前都是iTunes通过WIFI读取SAMBA共享文件，再传到VLC，慢得1B，还得再多开台电脑。后来了解到可以直接用<code>curl</code>传，方便了很多。<code>curl -F &quot;filename=&#39;filename&#39;&quot; -F &quot;files[]=@filepath&quot; http://VLC_IP/upload.json</code>，本来想写个shell脚本自动上传目录下的所有文件的，但是没有找到好的方法，干脆用python吧，直接造成shell脚本运行。 :(不会直接使用Python上传到VLC，POST传的东西跟平时有点不一样。。。</p>
</li>
<li><p>下载Dropbox文件，Bash脚本<a href="https://github.com/andreafabrizi/Dropbox-Uploader">Dropbox Uploader</a>，在VPS上面下载Dropbox的照片，然后再传回来。</p>
</li>
<li><p>下载OneDrive文件，用windows里面的客户端可能是最简单的，但没有在NAS里面安装虚拟机，也不想平时再开台机器。后来想了一条路，Chrome下载OneDrive的照片目录，zip文件，然后打开Chrome开发工具，直接将刚才那个请求<code>Copy as cURL</code>，这样可以直接在NAS下载照片了。</p>
</li>
<li><p>Picasaweb。long long ago，那时候Google还没有被封，传照片就到Picasa，哈哈，里面好多年轻的照片啊。这里需要设置下，在Google Drive里面设置下，将Google Photos照片导入到Google Drive，然后使用<code>rclone</code>将里面的照片复制到本地。<code>rclone copy remote:Google\ Photos /mnt/photos -P</code></p>
</li>
<li><p>照片存了这么多份，肯定有重复的。最开始写了脚本进行查重，思路就是找出所有图片文件，对md5码，发现效率不高，后来放狗搜发现一个好工具<code>fdepes</code>。<code>find . ! -empty -type f -size +500k -size -50M -exec md5sum &#123;&#125; + | sort &gt; ~/allfiles</code>，然后再对allfiles文件用unique就能找出重复文件了。<code>fdupes -r -S -1 Data Documents nextcloud Pictures Work &gt; ~/allfiles</code>，这个也是找出所有重复文件，还可以直接使用<code>fdupes</code>快速删除重复文件。</p>
</li>
</ol>
<h2 id="后期优化"><a href="#后期优化" class="headerlink" title="后期优化"></a>后期优化</h2><p>家庭网络换成1G带宽，扩展链路聚合。路由器换成了Buffalo AG300H，交换机换成了Cisio SLM2008，这样家里千兆OK了，但是发现丫我的无线是100M的WAN和LAN，电视机是100M口，一口老血吐出来。电视机的话，使用Xbox One S看得了，1000M口。无线路由器有空再换个好点的吧。开始装修的时候就是考虑NAS链路聚合的，毕竟多设备同时访问NAS的话，不链路聚合的话可能会成为瓶颈。到时候NAS换了PCIe的双网卡，硬盘只要4口，全换成4T盘，这样也OK的。</p>
<h3 id="PXE"><a href="#PXE" class="headerlink" title="PXE"></a>PXE</h3><p>PXE的方案我使用的是DHCP Server在OpenWrt，然后tftp server在NAS。</p>
<p>DHCP配置<code>/etc/config/dhcp</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config boot &#x27;linux&#x27;</span><br><span class="line">        option filename &#x27;pxelinux.0&#x27;</span><br><span class="line">        option serveraddress &#x27;192.168.1.222&#x27;</span><br><span class="line">        option servername &#x27;Liangwu PXE SERVER&#x27;</span><br></pre></td></tr></table></figure>

<p>tftp-hpa配置。这里我在NAS上面直接将tftp跑在docker里面的。下载<a href="https://mirrors.ustc.edu.cn/debian/dists/stretch/main/installer-amd64/current/images/netboot/netboot.tar.gz">Debian netboot</a>，并解压到res目录。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  tftp-hpa:</span><br><span class="line">    image: jumanjiman/tftp-hpa</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;69:69/udp&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./res/debian-installer/amd64/boot-screens/syslinux.cfg:/tftpboot/pxelinux.cfg/default:ro</span><br><span class="line">      - ./res/debian-installer:/tftpboot/debian-installer:ro</span><br><span class="line">      - ./res/windows:/tftpboot/windows:ro</span><br></pre></td></tr></table></figure>

<p>修改<code>./res/debian-installer/amd64/boot-screens/syslinux.cfg</code>，增加下面内容支持windows安装。制作PE镜像，加入网卡驱动，这些在<a href="https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/winpe-mount-and-customize">Microsoft文档</a>可以找到。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">label 9</span><br><span class="line">menu label Install Windows 7</span><br><span class="line">        KERNEL memdisk</span><br><span class="line">        INITRD windows/winpe_7.iso</span><br><span class="line">        APPEND iso raw</span><br><span class="line">prompt 0</span><br><span class="line">timeout 0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>SSH</tag>
        <tag>Debian</tag>
        <tag>NAS</tag>
        <tag>J3455</tag>
        <tag>NextCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis集合映射小试</title>
    <url>/2018/06/09/mybatis-collections-resultmap/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>现在项目中有个单据有三个表关系，主表、明细表、次明细表，大概关系如下面代码所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String mtId;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Sub&gt; subs;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String mtId;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Bat&gt; bats;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bat</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String mtId;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之前有人最笨最笨的办法就是从数据库拉三次出来，然后再组成整个数据结构。其实本来MyBatis里面就有Collection，用起来很方便。然后我就用下面的Mapper.xml来改试了一下。</p>
<h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p><a href="http://www.mybatis.org/mybatis-3/sqlmap-xml.html">MyBatis官网</a>已经讲了Collection的使用，很详细了。然后就自己试下看如何更爽的解决之前那个问题。MyBatis已经把配置荐<code>mapUnderscoreToCamelCase</code>设置成<code>true</code>了，这样就可以少写Entity的映射关系了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getWholeBill&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;EntirBillResultMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">      m.mt_id AS mt_id, s.mt_id AS s_mt_id, b.mt_id AS s_b_mt_it</span><br><span class="line">    FROM</span><br><span class="line">      main m</span><br><span class="line">    INNER JOIN</span><br><span class="line">      sub s ON (s.pid = m.id)</span><br><span class="line">    INNER JOIN</span><br><span class="line">      bat b ON (m.pid = s.id)</span><br><span class="line">    WHERE m.mt_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EntirBillResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Main&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;subs&quot;</span> <span class="attr">columnPrefix</span>=<span class="string">&quot;s_&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Sub&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;bats&quot;</span> <span class="attr">columnPrefix</span>=<span class="string">&quot;b_&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Bat&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>本来以为这样可以很好地解决我的问题，但是但是，测试的时候发现，主表和明细表好像没有group by的状态。</p>
<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>碰到这个问题，其实查下源码可能就好解决了。但是其实我一直没有碰MyBatis的源码，所以可能查起来会很头痛。网上稍微搜了下，没有找到答案。应该是映射关系写得有问题吧。尝试了几次，觉得就是没有group by嘛，但是如果告诉MyBatis去group by哪个字段呢？好像平时写得最多的那个id标签没有用哦，太懒了，把这个都省掉。果然加上去就解决了，嗯嗯，很爽。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EntirBillResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Main&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;mt_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;mtId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;subs&quot;</span> <span class="attr">columnPrefix</span>=<span class="string">&quot;s_&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Sub&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;mt_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;mtId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;bats&quot;</span> <span class="attr">columnPrefix</span>=<span class="string">&quot;b_&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Bat&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;mt_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;mtId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>随手记</title>
    <url>/2021/12/02/notes_202112/</url>
    <content><![CDATA[<p>这段时间整了一点东西，也有几点是重复查资料的事情，所以需要记录下，方便自己查找。</p>
<h2 id="Windows端口转发"><a href="#Windows端口转发" class="headerlink" title="Windows端口转发"></a>Windows端口转发</h2><p>回本行后，基本服务器、客户端都是Windows的天下了，有的企业内部网络环境比较恶心，偶尔需要用到转口转发，这个在<a href="/2018/11/18/use-ssh-proxy/">Linux下面是很好解决的</a>，直接SSH就可以了。很早以前在医院也用Windows整过端口转发，后来忘掉，查了查<a href="https://docs.microsoft.com/en-us/windows-server/networking/technologies/netsh/netsh-interface-portproxy">文档</a>，查命令的帮助还是能解决一部分问题的。相当于<code>ssh -L</code>。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenaddress=<span class="number">127.0</span>.<span class="number">0.1</span> listenport=<span class="number">9000</span> connectaddress=<span class="number">192.168</span>.<span class="number">0.10</span> connectport=<span class="number">80</span></span><br></pre></td></tr></table></figure>

<h2 id="Netty内网穿透"><a href="#Netty内网穿透" class="headerlink" title="Netty内网穿透"></a>Netty内网穿透</h2><p>现在用的内网穿透是<a href="https://github.com/fatedier/frp">frp</a>，还是很好用的，应该是因为安全的原因，有个我比较需要的功能没有，就是可以在服务端或另一客户端在线确定何种类型何种端口转发。某企业服务器已经内网连到公网服务器，而自己的电脑连上服务器后，可以在线确定本地、远程或动态端口转发。</p>
<p>前两个月断断续续地用Netty做了一部分工作，本地端口转发功能已经完成了，待完善后面两个转发。后面如果代码写得还OK的话，估计发github上面吧，好像github注册之后一直没有真正地往上面堆代码。</p>
<h2 id="福建中兴F452光猫超级密码"><a href="#福建中兴F452光猫超级密码" class="headerlink" title="福建中兴F452光猫超级密码"></a>福建中兴F452光猫超级密码</h2><p>之前在福建出差，用的是电信网络，一般都可以通过修改光猫的配置来启用IPv6，这样可以直接连家里的NAS拖电影看，很多光猫的超级密码比较好获得，但是有次碰了一个中兴F452，搞了几个小时才搞定，记录下吧。</p>
<p>看了<a href="https://www.cnmoci.com/thread-803-1-1.html">一个帖子</a>，可以用普通用户登录后下载一个文件，然后用工具把超级密码给读出来，后来换了一个房间这个工具不能用了。想了想，工具应该是没有问题的，估计是文件有问题，后面也验证了这个想法。放狗搜了搜，这个工具也是在一个论坛的兄弟整的，<a href="https://www.52pojie.cn/thread-1005978-1-1.html">详细写了那个配置文件的解法</a>。</p>
<p>他是Delphi写的，16年前用过Delphi，看起来还好，文件如何解也有详细説明，正好现在在熟悉C#，不如直接开干吧。这里有个插曲，就是丫有个Nuget包的ZLib解包居然有问题，浪费了近两个小时。。。最后用的包是<code>Zlib.Portable</code>。</p>
<p>写完后，验证了之前的想法，就是下载下来的配置文件有问题，不完整，所以真好解一部分就把这部分存起来。还好可以分段解包。</p>
<script src="//gist.github.com/71415db0ab0689e3d6e5abcfe02f49f4.js?file=Program.cs"></script>

<h2 id="Samba链接共享问题"><a href="#Samba链接共享问题" class="headerlink" title="Samba链接共享问题"></a>Samba链接共享问题</h2><p>之前家里NAS是把整个BTDownloads的目录共享的，小孩认识几个字后，很快就能在电视机上操作<code>Kodi</code>，视频，BTDownloads，汪汪队，一顿操作很熟练啊。于是就想把小孩喜欢的几个动画片的英文版搞到一上目录下，但是这几个英文版还在做种中，不想再动。就想能不能新建目录，然后用symlinks，但是发现不能正常工作，后来查了下<a href="https://www.samba.org/samba/docs/current/man-html/smb.conf.5.html#WIDELINKS">文档</a>，解决了这个问题，可以让小孩只看英文版的动画片，而不影响原来所有的东西。</p>
<figure class="highlight plaintext"><figcaption><span>/etc/samba/smb.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">allow insecure wide links = yes</span><br><span class="line"></span><br><span class="line">[share]</span><br><span class="line">follow symlinks = yes</span><br><span class="line">wide links = yes</span><br></pre></td></tr></table></figure>

<h2 id="最后一个月"><a href="#最后一个月" class="headerlink" title="最后一个月"></a>最后一个月</h2><p>最后一个月了，今年的计划完成了吗？好像没有， :(</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Netty</tag>
        <tag>Windows</tag>
        <tag>Port Forwarding</tag>
        <tag>中兴光猫密码</tag>
        <tag>F452</tag>
        <tag>Samba</tag>
        <tag>SMB</tag>
      </tags>
  </entry>
  <entry>
    <title>npm全局安装包需要root权限问题</title>
    <url>/2018/11/18/npm-install-global-without-sudo/</url>
    <content><![CDATA[<h1 id="npm包安装问题"><a href="#npm包安装问题" class="headerlink" title="npm包安装问题"></a>npm包安装问题</h1><p>之前在家基本都是用Surface Pro 4所以基本也就没有安装Nodejs。今天晚上正好有点时间，就把老的Thinkpad T400拿出来，写点东西总结东东吧，要不一直不总结，埋头处理工作，感觉一直没有进步。</p>
<p>感觉还有好多东西没有写，<code>SSH Local/Remote Proxy</code>，<code>kubernetes环境搭建(not hard way)</code>，<code>gitlab及runner在k8s里面搭建</code>，<code>MyBatis学习</code>，这些东西下周的时间全要写下来吧，要不全都要忘记了。</p>
<p>npm在天朝第一步应该是用<a href="http://npm.taobao.org/">cnpm</a>吧，这一点我还是蛮喜欢alibaba的，在国内搞了一些方便开发者的镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>这里<code>-g</code>就全局安装需要root权限，所以需要改下npm包管理的配置。</p>
<ol>
<li>创建包安装目录</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/.npm-packages</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置<code>npm</code>，将全局安装的包安装到上一步创建的目录</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;prefix=<span class="variable">$&#123;HOME&#125;</span>/.npm-packages&quot;</span> &gt;&gt; ~/.npmrc</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置环境<code>PATH</code>去正确目录查找<code>npm</code>包和<code>man</code>文件。将下面内容加入到<code>~/.bashrc</code>或<code>~/.zshrc</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NPM_PACKAGES=<span class="string">&quot;<span class="variable">$&#123;HOME&#125;</span>/.npm-packages&quot;</span></span><br><span class="line">PATH=<span class="string">&quot;<span class="variable">$NPM_PACKAGES</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> MANPATH</span><br><span class="line"><span class="built_in">export</span> MANPATH=<span class="string">&quot;<span class="variable">$NPM_PACKAGES</span>/share/man:<span class="subst">$(manpath)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>更新环境</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>这个时候再去全局安装<code>npm</code>包的话，就不需要root权限，直接将包安装到<code>~/.npm-packages</code>目录下面了。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md">Install npm packages globally without sudo on macOS and Linux</a></p>
<p><a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">Resolving EACCES permissions errors when installing packages globally</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>npm</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenWrt限制设备连接Internet</title>
    <url>/2019/04/05/openwrt-restricting-internet-access-based-on-mac-address/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>有一天查看OpenWrt设备状态的时候，突然发现一个熟悉的Mac地址，而且没有主机名。感觉心里不踏实，毕竟已经做了最初级的SSID隐藏，我脑袋里想到的第一反应就是之前有人来家里玩的时候，连了家里的WIFI，而且还使用了什么WIFI密码盒子之类的软件，这类软件拿到GPS定位或运营商定位，再结合扫描的SSID信息，可能已经把我的WIFI信息和密码传到服务器上面了。这样我就必须要做进一步的改善了，当然最简单的方法就是改密码，但是家里有其他人使用，改动比较费事；再想到的就是WIFI连接时的<a href="https://medium.com/openwrt-iot/lede-openwrt-restricting-network-access-based-on-mac-5a012302e09f">MAC白名单验证</a>，但我想这个可能通过抓包也能好样的出来，不是太好。</p>
<h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>家里的路由器基本都是用的OpenWrt，应该能通防火墙规则来做点文章，思路是MAC地址白名单，可连LAN，无法使用WAN，放狗搜了下，找到一些文章。<a href="https://bokunokeiken.wordpress.com/2015/06/27/how-to-block-device-on-openwrt-based-on-mac-address/">How to Block Device on OpenWRT Based on MAC Address</a></p>
<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>其实就是在Network -&gt; Firewall里的Zones中的Zone Lan &#x3D;&gt; REJECT，然后再给需要使用Internet的设备增加相应规则。改动就是修改OpenWrt中的<code>/etc/config/firewall</code>。</p>
<script src="//gist.github.com/aaf62cc2b953420d7d044108ed78ae1c.js?file=firewall"></script>

<p>最后一点就是内网做好防护工作，OpenWrt的SSH禁用密码，只能使用密钥；uhttpd修改为SSL，且修改端口。s</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>OpenWrt</tag>
      </tags>
  </entry>
  <entry>
    <title>Nas使用VirtualBox安装OpenWrt当软路由</title>
    <url>/2021/08/04/openwrt-on-nas/</url>
    <content><![CDATA[<h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><p>之前家里是光纤通过运营商的光猫桥接，然后一个路由器拨号，再连一个交换机。因为之前已经搞了台NAS，之前一直想整台HP Gen8的，有iLO管理口，再加上eSXi虚拟化，搞个软路由和NAS，这样比较完美。后面没买到便宜的Gen8，现在考虑功耗比较大，软Raid导致噪音比较大，就算了没整Gen8了。看看后面能不能换个大House，整个小的机柜，再搞个服务器玩玩吧。</p>
<p>现在路由器、交换机和NAS在一个小小的工具箱里面，夏天温度有点高，想想看把软路由整到NAS里面去吧。NAS用的OS是OMV5，基于Debian，比较熟悉，整个虚拟机安装OpenWrt应该是一个可行的方案。KVM一直不是太熟悉，直接用VirtualBox，之前VirtualBox没用过CLI，正好供机会学习下CLI控制。</p>
<p>这样的好处就是不用再单独开一个硬件路由器了，减少了一点点电费和热量，然后性能会强一些；缺点就是Host OS挂掉的话，就全屋不能上网了。</p>
<p>主要参考三篇官方文章<a href="https://openwrt.org/docs/guide-user/virtualization/virtualbox-vm">OpenWrt on VirtualBox HowTo</a>,<a href="https://openwrt.org/docs/guide-user/virtualization/virtualbox-advanced">VirtualBox Advanced</a>,<a href="https://www.virtualbox.org/manual/">VirtualBox Manual</a></p>
<h2 id="构架"><a href="#构架" class="headerlink" title="构架"></a>构架</h2><p>NAS主板有一个千兆电口，然后自己备了一个PCI双网卡，但是因为主板的原因，PCI网卡的最高速率好像只有400M，所以想的就是一个PCI的口连ISP，板载千兆电口连交换机，多一个口备用。</p>
<p>Host OS Debian里面将板载网卡（enp1s0）设置成静态IP(192.168.1.2&#x2F;32)，PCI网卡（enp6s0&#x2F;enp7s0）设置成启用（否则网卡为Down状态，无法使用）。</p>
<p>OpenWrt三网口，管理口(eth0)，Hostonly，用于Host访问；WAN口(eth1)，桥接物理网口，连接ISP网口；LAN口(eth2)，桥接物理网口，连接交换机。大致示意图可参照<a href="https://openwrt.org/docs/guide-user/virtualization/virtualbox-advanced">OpenWrt说明</a></p>
<p><img data-src="https://openwrt.org/_media/media/netdiag1c.png?w=600&tok=ebf41f" alt="Networking Example"></p>
<h2 id="安装Virtual-Box"><a href="#安装Virtual-Box" class="headerlink" title="安装Virtual Box"></a>安装Virtual Box</h2><p><a href="https://www.virtualbox.org/wiki/Linux_Downloads">官方文档</a>安装VirtualBox和Extension Pack，另外需要安装编译工具和对应头文件，<code>dkms,build-essential, linux-headers-$(uname -r)</code>，将用户加入用户组<code>usermod -a -G vboxusers user</code>。</p>
<p>有一点就是如果内核有升级的话，VirtualBox就需要重新设置下<code>/usr/sbin/vboxconfig</code>，所以非必要情况下不升级内核，<code>apt-mark hold linux-image-amd64 linux-headers-$(uname -r)</code>。</p>
<p>安装Extension Pack，<code>VBoxManage extpack install ext.vbox-extpack</code></p>
<p>检查服务<code>vboxautostart-service</code>是否自动启动，这样Host启动时，会自动启动对应的vm。</p>
<h2 id="安装OpenWrt"><a href="#安装OpenWrt" class="headerlink" title="安装OpenWrt"></a>安装OpenWrt</h2><p>下载对应<a href="https://downloads.openwrt.org/releases/19.07.8/targets/x86/64/openwrt-19.07.8-x86-64-combined-ext4.img.gz">OpenWrt镜像</a>，参考<a href="https://downloads.openwrt.org/">官方地址</a></p>
<h3 id="创建vm"><a href="#创建vm" class="headerlink" title="创建vm"></a>创建vm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/vbox</span><br><span class="line"><span class="built_in">cd</span> ~/vbox</span><br><span class="line">VBoxManage createvm openwrt --ostype Linux26_64 --registervm --default --basepath `<span class="built_in">pwd</span>`</span><br><span class="line"><span class="built_in">cd</span> ~/vbox/openwrt</span><br><span class="line">wget -c https://downloads.openwrt.org/releases/19.07.8/targets/x86/64/openwrt-19.07.8-x86-64-combined-ext4.img.gz</span><br><span class="line">gzip -d openwrt-*x86-64-combined*.img.gz</span><br><span class="line">VBoxManage convertfromraw --format VDI openwrt-*x86-64-combined*.img openwrt.vdi</span><br></pre></td></tr></table></figure>

<p>VirtualBox创建一个Linux vm，设置基础目录为<code>~/vbox/openwrt</code>，下载对应镜像，并转换为VirtualBox可用的文件。</p>
<h3 id="修改vm配置"><a href="#修改vm配置" class="headerlink" title="修改vm配置"></a>修改vm配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VBoxManage hostonlyif create</span><br><span class="line">VBoxManage hostonlyif ipconfig vboxnet0</span><br><span class="line">VBoxManage hostonlyif ipconfig vboxnet0 --ip 192.168.56.1 --netmask 255.255.255.0</span><br><span class="line">VBoxManage dhcpserver add --network=vboxnet0 --server-ip=192.168.56.1 --lower-ip=192.168.56.101 --upper-ip=192.168.56.254 --etmask=255.255.255.0 --<span class="built_in">enable</span></span><br><span class="line"></span><br><span class="line">VBoxManage modifyvm openwrt --memory 128 --boot1 disk --boot2 none --boot3 none --nic1 hostonly --nictype1 virtio --hostonlyadapter1 vboxnet0 --nic2 bridged --nictype2 virtio --bridgeadapter2 enp6s0 --nic3 bridged --nictype3 virtio --bridgeadapter3 enp1s0 --mouse ps2 --keyboard ps2 --audio none --usb off --usbehci off --usbxhci off --vrde on --vrdeport 10001 --audostart-enabled of --autostart-delay 120</span><br></pre></td></tr></table></figure>

<p>这里主要是创建一个hostonly网络，并设置好IP，DHCP等，Host的IP是192.168.56.1，等下Openwrt里面再设置管理口的IP。然后修改openwrt vm的内存为128，只从硬盘启动，网卡1为hostonly管理网卡，网卡2为bridged的WAN(enp6s0)口，网卡3为bridged的LAN(enp1s0)口。然后关闭声卡，USB。</p>
<p><a href="https://www.virtualbox.org/manual/ch08.html">VBoxManage Manual</a></p>
<h3 id="挂载OpenWrt镜像"><a href="#挂载OpenWrt镜像" class="headerlink" title="挂载OpenWrt镜像"></a>挂载OpenWrt镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VBoxManage showvminfo openwrt | grep <span class="string">&#x27;Storage Controller&#x27;</span></span><br><span class="line">VBoxManage storageatt openwrt --storagectl <span class="string">&#x27;SATA&#x27;</span> --device 0 --port 0 --<span class="built_in">type</span> hdd --medium ~/vbox/openwrt/openwrt.vdi</span><br></pre></td></tr></table></figure>

<p>正常默认情况下有个IDE和SATA，IDE用于光驱，SATA用于硬盘使用。然后将openwrt的镜像挂载为硬盘。</p>
<h3 id="虚拟机随host自动启动"><a href="#虚拟机随host自动启动" class="headerlink" title="虚拟机随host自动启动"></a>虚拟机随host自动启动</h3><p>参考<a href="https://www.virtualbox.org/manual/ch09.html#autostart">Manual</a>,<a href="https://kifarunix.com/autostart-virtualbox-vms-on-system-boot-on-linux/">AutoStart VirtualBox VMs on System Boot on Linux</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VBoxManage modifyvm openwrt --autostart-enabled on --autostart-delay 10</span><br></pre></td></tr></table></figure>

<h3 id="远程控制vrde"><a href="#远程控制vrde" class="headerlink" title="远程控制vrde"></a>远程控制vrde</h3><p>参考<a href="https://www.virtualbox.org/manual/ch08.html#vboxmanage-modifyvm-vrde">Manual</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VBoxManage modifyvm openwrt --vrde on --vrde-port 10001</span><br></pre></td></tr></table></figure>

<p>这样就可以通过Host OS的<code>10001</code>端口进行远程操作，直接使用windows的mstsc可以连接，linux的rdesktop。</p>
<h2 id="OpenWrt网络配置"><a href="#OpenWrt网络配置" class="headerlink" title="OpenWrt网络配置"></a>OpenWrt网络配置</h2><p>前面配置好OpenWrt后，先将网卡设置成断开，然后启动OpenWrt，防止网络冲突啥的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VBoxManage controlvm openwrt poweroff</span><br><span class="line">VBoxManage modifyvm openwrt --cableconnected1 off --cableconnected2 off --cableconnected3 off</span><br><span class="line">VBoxManage startvm --<span class="built_in">type</span> headless</span><br></pre></td></tr></table></figure>

<p>然后远程连上10001端口进行网络设置，将三张网卡分别设置好。</p>
<figure class="highlight plaintext"><figcaption><span>/etc/config/network</span></figcaption><table><tr><td class="code"><pre><span class="line">config interface &#x27;loopback&#x27;</span><br><span class="line">        option ifname &#x27;lo&#x27;</span><br><span class="line">        option proto &#x27;static&#x27;</span><br><span class="line">        option ipaddr &#x27;127.0.0.1&#x27;</span><br><span class="line">        option netmask &#x27;255.0.0.0&#x27;</span><br><span class="line"></span><br><span class="line">config globals &#x27;globals&#x27;</span><br><span class="line"></span><br><span class="line">config interface &#x27;lan&#x27;</span><br><span class="line">        option ifname &#x27;eth2&#x27;</span><br><span class="line">        option proto &#x27;static&#x27;</span><br><span class="line">        option netmask &#x27;255.255.255.0&#x27;</span><br><span class="line">        option ip6assign &#x27;60&#x27;</span><br><span class="line">        option ipaddr &#x27;192.168.1.1&#x27;</span><br><span class="line"></span><br><span class="line">config interface &#x27;wan&#x27;</span><br><span class="line">        option ifname &#x27;eth1&#x27;</span><br><span class="line">        option proto &#x27;pppoe&#x27;</span><br><span class="line">        option password &#x27;password&#x27;</span><br><span class="line">        option ipv6 &#x27;auto&#x27;</span><br><span class="line">        option username &#x27;username&#x27;</span><br><span class="line"></span><br><span class="line">config interface &#x27;mng&#x27;</span><br><span class="line">        option proto &#x27;static&#x27;</span><br><span class="line">        option netmask &#x27;255.255.255.0&#x27;</span><br><span class="line">        option ifname &#x27;eth0&#x27;</span><br><span class="line">        option ipaddr &#x27;192.168.56.2&#x27;</span><br></pre></td></tr></table></figure>

<p>配置DHCP，主要是为了使用IPv6，见lan配置处。</p>
<figure class="highlight plaintext"><figcaption><span>/etc/config/dhcp</span></figcaption><table><tr><td class="code"><pre><span class="line">config dnsmasq</span><br><span class="line">        option domainneeded &#x27;1&#x27;</span><br><span class="line">        option localise_queries &#x27;1&#x27;</span><br><span class="line">        option rebind_protection &#x27;1&#x27;</span><br><span class="line">        option rebind_localhost &#x27;1&#x27;</span><br><span class="line">        option local &#x27;/lan/&#x27;</span><br><span class="line">        option domain &#x27;lan&#x27;</span><br><span class="line">        option expandhosts &#x27;1&#x27;</span><br><span class="line">        option authoritative &#x27;1&#x27;</span><br><span class="line">        option readethers &#x27;1&#x27;</span><br><span class="line">        option leasefile &#x27;/tmp/dhcp.leases&#x27;</span><br><span class="line">        option resolvfile &#x27;/tmp/resolv.conf.auto&#x27;</span><br><span class="line">        option localservice &#x27;1&#x27;</span><br><span class="line">        option confdir &#x27;/tmp/dnsmasq.d&#x27;</span><br><span class="line"></span><br><span class="line">config dhcp &#x27;lan&#x27;</span><br><span class="line">        option interface &#x27;lan&#x27;</span><br><span class="line">        option start &#x27;100&#x27;</span><br><span class="line">        option limit &#x27;150&#x27;</span><br><span class="line">        option leasetime &#x27;12h&#x27;</span><br><span class="line">        option ra_management &#x27;1&#x27;</span><br><span class="line">        option ra &#x27;server&#x27;</span><br><span class="line">        option dhcpv6 &#x27;server&#x27;</span><br><span class="line">        option ndp &#x27;relay&#x27;</span><br><span class="line"></span><br><span class="line">config dhcp &#x27;wan&#x27;</span><br><span class="line">        option interface &#x27;wan&#x27;</span><br><span class="line">        option ignore &#x27;1&#x27;</span><br></pre></td></tr></table></figure>

<p>取消ipv6防火墙，禁止LAN口上网，需要授权才能使用。见<a href="/2019/04/05/openwrt-restricting-internet-access-based-on-mac-address/">OpenWrt限制设备连接Internet</a>。如没有此需求，将forwarding段的enabled选项设置为1即可。</p>
<figure class="highlight plaintext"><figcaption><span>/etc/config/firewall</span></figcaption><table><tr><td class="code"><pre><span class="line">config defaults</span><br><span class="line">        option syn_flood &#x27;1&#x27;</span><br><span class="line">        option input &#x27;ACCEPT&#x27;</span><br><span class="line">        option output &#x27;ACCEPT&#x27;</span><br><span class="line">        option forward &#x27;REJECT&#x27;</span><br><span class="line">        option disable_ipv6 &#x27;1&#x27;</span><br><span class="line">        option drop_invalid &#x27;1&#x27;</span><br><span class="line"></span><br><span class="line">config zone</span><br><span class="line">        option name &#x27;lan&#x27;</span><br><span class="line">        option input &#x27;ACCEPT&#x27;</span><br><span class="line">        option output &#x27;ACCEPT&#x27;</span><br><span class="line">        option forward &#x27;ACCEPT&#x27;</span><br><span class="line">        list network &#x27;lan&#x27;</span><br><span class="line"></span><br><span class="line">config zone</span><br><span class="line">        option name &#x27;wan&#x27;</span><br><span class="line">        option input &#x27;REJECT&#x27;</span><br><span class="line">        option output &#x27;ACCEPT&#x27;</span><br><span class="line">        option forward &#x27;REJECT&#x27;</span><br><span class="line">        option masq &#x27;1&#x27;</span><br><span class="line">        option mtu_fix &#x27;1&#x27;</span><br><span class="line">        list network &#x27;wan&#x27;</span><br><span class="line"></span><br><span class="line">config forwarding</span><br><span class="line">        option src &#x27;lan&#x27;</span><br><span class="line">        option dest &#x27;wan&#x27;</span><br><span class="line">        option enabled &#x27;0&#x27;</span><br></pre></td></tr></table></figure>

<p>一切就绪后就可以将网卡连接上使用了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VBoxManage controlvm openwrt poweroff</span><br><span class="line">VBoxManage modifyvm openwrt --cableconnected1 on --cableconnected2 on --cableconnected3 on</span><br><span class="line">VBoxManage startvm --<span class="built_in">type</span> headless</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>OpenWrt</tag>
        <tag>Debian</tag>
        <tag>NAS</tag>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title>远程控制NAS开关Samba</title>
    <url>/2023/02/18/remote-control-nas-samba/</url>
    <content><![CDATA[<h1 id="远程控制NAS开关Samba"><a href="#远程控制NAS开关Samba" class="headerlink" title="远程控制NAS开关Samba"></a>远程控制NAS开关Samba</h1><p>之前通过一些方法，可以用手机<a href="/2022/07/31/access-nas-via-ipv6/">控制家里的NAS</a>，开始的时候手动开关Samba服务，后来写了一个小Shell脚本，可以设置<a href="/2022/05/24/automatic-nas-samba-start-and-stop/">定时关闭Samba</a>，当时只考虑半个小时，后来呢可能其他需求，时间有变化，就在脚本后面加参数，控制关闭时间。后来有一天开车，无法用手机远程开Samba服务，就想到了NAS提供一个服务，外面调用就OK，然后手机用Siri语音远程调用。</p>
<h2 id="修改Shell脚本"><a href="#修改Shell脚本" class="headerlink" title="修改Shell脚本"></a>修改Shell脚本</h2><p>在原来的基础上，增加参数，可以调节时间。</p>
<figure class="highlight bash"><figcaption><span>g.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -gt 1 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Too many args&#x27;</span> &gt;&amp;2</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> == 0 ]; <span class="keyword">then</span></span><br><span class="line">    DEADTIME=$(<span class="built_in">date</span> -d <span class="string">&quot;+30 minutes&quot;</span> +<span class="string">&#x27;%H:%M&#x27;</span>)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> == 1 ]; <span class="keyword">then</span></span><br><span class="line">    DEADTIME=$(<span class="built_in">date</span> -d <span class="string">&quot;+&quot;</span><span class="variable">$1</span><span class="string">&quot; minutes&quot;</span> +<span class="string">&#x27;%H:%M&#x27;</span>)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">HOUR=$(<span class="built_in">echo</span> <span class="variable">$DEADTIME</span> | <span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f1)</span><br><span class="line">MINUTE=$(<span class="built_in">echo</span> <span class="variable">$DEADTIME</span> | <span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f2)</span><br><span class="line"></span><br><span class="line">sudo systemctl start smbd</span><br><span class="line"></span><br><span class="line">crontab -l 2&gt;/dev/null | <span class="built_in">head</span> -n -1 &gt; /tmp/crontemp</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$MINUTE</span> <span class="variable">$HOUR</span> * * * sudo systemctl stop smbd&quot;</span> &gt;&gt; /tmp/crontemp</span><br><span class="line">crontab /tmp/crontemp</span><br><span class="line"><span class="built_in">rm</span> /tmp/crontemp</span><br></pre></td></tr></table></figure>

<h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><p>现在访问家里的NAS有三个方式吧，一个是之前<a href="/2022/07/31/access-nas-via-ipv6/">IPv6的方式</a>，但是有的时候有些地方没有IPv6。另外一个方式就是<a href="https://github.com/fatedier/frp">Frp</a>，VPS的一个端口访问NAS的SSH端口，另外一个方式就是NAS的<a href="/2018/11/18/use-ssh-proxy/">SSH Remote Tunnel</a>，再另外一个方式就是自己用Netty写了一个内网穿透的东东。</p>
<p>最终考虑的方式是Frp，简单，占用资源不多，可以SSH远程命令。</p>
<h2 id="对外服务"><a href="#对外服务" class="headerlink" title="对外服务"></a>对外服务</h2><p>有了内网穿透提供SSH，然后前面的Shell脚本，其实就比较简单了，<code>ssh -p port -i id_rsa username@ip cmd</code>，就可以直接调用NAS的Shell脚本了。</p>
<p>方式呢考虑了好几个：</p>
<ol>
<li>Nginx + Lua脚本，Nginx重新编译增加Lua支持，然后指定url运行脚本，<code>os.execute(&#39;cmd&#39;)</code>，Nginx增加Lua需要<a href="https://github.com/openresty/lua-nginx-module#installation">下一些东西</a>， LuaJIT, ngx_devel_kit, ngx_lua, Nginx, lua-resty-core, lua-resty-lrucache，虽然本身Nginx是自己编译的，但是下这多东西，还是算了。</li>
<li>PHP，嗯，最好的编程语言 :(，本身一个老的VPS上面架了个Wordpress，是有PHP的，但是为了一些安全考虑，php配置文件中已经禁用了shell调用，为了一个功能也懒得打开了。</li>
<li>Java&#x2F;Golang&#x2F;C#&#x2F;Python，写个小的Web服务，用Nginx反代，调用Shell脚本。Python资源比较大，C#&#x2F;Java占用资源也比较大，就考虑用Golang写个简单的服务吧，直接调用Shell命令，后来查了下，可以连接SSH直接运行远程命令。</li>
</ol>
<h3 id="运行shell"><a href="#运行shell" class="headerlink" title="运行shell"></a>运行shell</h3><figure class="highlight golang"><figcaption><span>main.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        gin.SetMode(gin.ReleaseMode)</span><br><span class="line">        router := gin.Default()</span><br><span class="line">        router.GET(<span class="string">&quot;/tv/tv&quot;</span>, openTV)</span><br><span class="line">        router.GET(<span class="string">&quot;/tv/tv/:min&quot;</span>, openTV)</span><br><span class="line"></span><br><span class="line">        router.Run(<span class="string">&quot;:8888&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">openTV</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        minParam := c.Param(<span class="string">&quot;min&quot;</span>)</span><br><span class="line">        x := <span class="type">int64</span>(<span class="number">35</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> min, err := strconv.ParseInt(minParam, <span class="number">10</span>, <span class="number">32</span>); err == <span class="literal">nil</span> &#123;</span><br><span class="line">            x = min</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cmd := exec.Command(<span class="string">&quot;ssh&quot;</span>, <span class="string">&quot;-p&quot;</span>, <span class="string">&quot;10000&quot;</span>, <span class="string">&quot;-i&quot;</span>, <span class="string">&quot;/home/liangwu/.ssh/id_rsa&quot;</span>, <span class="string">&quot;liangwu@127.0.0.1&quot;</span>, <span class="string">&quot;~/g.sh&quot;</span>, strconv.Itoa(<span class="type">int</span>(x)))</span><br><span class="line"></span><br><span class="line">        result, err := cmd.Output()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Println(err)</span><br><span class="line">            c.IndentedJSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;wrong&quot;</span>&#125;)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resultString := <span class="type">string</span>(result[:])</span><br><span class="line">        c.IndentedJSON(http.StatusOK, gin.H&#123;<span class="string">&quot;result&quot;</span>: resultString&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="连接SSH"><a href="#连接SSH" class="headerlink" title="连接SSH"></a>连接SSH</h3><script src="//gist.github.com/201a508d4c1c57e6b93042ae96b1b508.js?file=gin-ssh.go"></script>

<h2 id="Siri语音指令"><a href="#Siri语音指令" class="headerlink" title="Siri语音指令"></a>Siri语音指令</h2><p>Shortcuts新增指令，名字可以直接用Siri打开，比如Shortcuts命名为<code>打开电视</code>，直接用<code>Hi Siri 打开电视</code>就可以执行。</p>
<ul>
<li>Ask for Input，’Ask for <code>Number</code> with <code>How much time?</code>‘</li>
<li>Text, ‘host&#x2F;tv&#x2F;tv&#x2F;<code>Provided Input</code>‘</li>
<li>Safari Open URLs, ‘Open <code>Text</code>‘</li>
</ul>
<p>OK，这样就可以Siri打开家里电视咯。。。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>SSH</tag>
        <tag>cron</tag>
        <tag>Debian</tag>
        <tag>NAS</tag>
        <tag>Samba</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>使用SSH key</title>
    <url>/2017/01/14/ssh-key/</url>
    <content><![CDATA[<h2 id="为什么要使用SSH-key"><a href="#为什么要使用SSH-key" class="headerlink" title="为什么要使用SSH key"></a>为什么要使用SSH key</h2><p>网上许多服务器和服务提供商都提供SSH协议连接和认证，这样的话，如果使用SSH keys的话，就可以每次在不提供用户名和密码的情况下使用服务器和服务。比如我用来发布静态Blog的<a href="http://www.github.com/">Github</a>，<a href="http://www.coding.net/">Coding.net</a>和自己的VPS。</p>
<span id="more"></span>
<h2 id="生成新的SSH-key"><a href="#生成新的SSH-key" class="headerlink" title="生成新的SSH key"></a>生成新的SSH key</h2><p>先看自己目录下是否已经有key，打开Terminal或Git Bash，查看<code>~/.ssh</code>里面是否已经有文件，如果有id_rsa或其它类似文件。如果没有，则可以按下面的步骤来生成新的SSH key。</p>
<ol>
<li>打开Terminal或Git Bash。</li>
<li>输入下面命令，注意其中的<code>your_email@example.com</code>，此email地址为github和coding的注意email地址，这样才能正常使用（未实验）。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure>
 这条命令将生成一个新的SSH key，有如下提示。对<code>ssh-keygen</code>不了解的，可以用<code>man</code>看其用法，也可参考网页<a href="https://linux.die.net/man/1/ssh-keygen">ssh-keygen</a> 。其它可以了解下密钥和公钥的相关知识。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br></pre></td></tr></table></figure></li>
<li>然后会提示保存key到何处，一般的话，直接按回车，使用默认配置就好。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Enter a file in which to save the key (/home/user/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure></li>
<li>最后提示给密钥设置密码。对于安全性要求高的可以设置下，对于我用这个SSH key登陆三个地方的人而言就不设置密码，直接回车就好。以后想修改的就直接运行命令<code>ssh-keygen -p</code>就可以按提示修改密钥的密码了。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="配置VPS及服务商SSH公钥"><a href="#配置VPS及服务商SSH公钥" class="headerlink" title="配置VPS及服务商SSH公钥"></a>配置VPS及服务商SSH公钥</h2><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a><a href="http://www.github.com/">Github</a></h3><ol>
<li>复制公钥内容，或者直接用<code>cat</code>或其它文本编辑器打开，复制其内容。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li>
<li><img data-src="https://help.github.com/assets/images/help/settings/userbar-account-settings.png" alt="userbar-account-settings">登陆<a href="http://www.github.com/">Github</a>后，点击右上角进入设置。</li>
<li><img data-src="https://help.github.com/assets/images/help/settings/settings-sidebar-ssh-keys.png" alt="settings-sidebar-ssh-keys">在设置界面的左侧Personal settings里面的<strong>SSH and GPG keys</strong>。</li>
<li><img data-src="https://help.github.com/assets/images/help/settings/ssh-add-ssh-key.png" alt="ssh-add-ssh-key">点击<strong>New SSH key</strong>或<strong>Add SSH key</strong>。</li>
<li><img data-src="https://help.github.com/assets/images/help/settings/ssh-key-paste.png" alt="ssh-key-paste">然后在Title的框里填下对于这个SSH key的描述，用来区别各个不同的key。然后将第2步中复制的公钥内容粘贴到Key的文本框里。</li>
<li>然后点击<strong>Add SSH key</strong>。</li>
</ol>
<h3 id="Coding-net"><a href="#Coding-net" class="headerlink" title="Coding.net"></a><a href="http://www.coding.net/">Coding.net</a></h3><p>如前述一样，复制公钥的内容。然后登陆coding，然后在左侧依次进入“帐户”，“SSH公钥”，如前一样，在<strong>公钥名称</strong>里填写公钥的描述，<strong>公钥内容</strong>里粘贴公钥的内容。如果需要对公钥有效期有要求的话，可以修改。最后点“添加”。</p>
<h3 id="VPS-x2F-Linux"><a href="#VPS-x2F-Linux" class="headerlink" title="VPS&#x2F;Linux"></a>VPS&#x2F;Linux</h3><ol>
<li>登陆到VPS</li>
<li>在目录<code>~/.ssh</code>里面新建文件<code>authorized_keys</code>，然后将公钥内容粘贴到其中。可以用各种文本编辑器，或可以用<code>scp</code>或<code>psftp</code>等工具直接将公钥文件上传至VPS。</li>
<li>然后就是确保<code>sshd_config</code>里面设置。<figure class="highlight bash"><figcaption><span>/etc/ssh/sshd_config</span></figcaption><table><tr><td class="code"><pre><span class="line">RSAAuthentication <span class="built_in">yes</span></span><br><span class="line">PubkeyAuthentication <span class="built_in">yes</span></span><br><span class="line">AuthorizedKeysFile <span class="variable">$h</span>/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">PasswordAuthentication no</span><br></pre></td></tr></table></figure>
 其中最后一行为取消明文密码登陆，只允许使用SSH key。然后倒数第二行为SSH key公钥的位置，就是前面提到的公钥储存的位置。<code>~/.ssh/authorized_keys</code>。</li>
<li>到此我们就可以使用SSH key登陆了。</li>
</ol>
<h2 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h2><p>打开Git Bash或Terminal，键入下列内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi xxx! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string">$ ssh -T git@git.coding.net</span></span><br><span class="line"><span class="string">Hello xxx! You&#x27;</span>ve connected to Coding.net via SSH successfully!</span><br><span class="line">$ ssh -T username@yourvps.domain -p port</span><br><span class="line">The programs included with the Debian GNU/Linux system are free software;</span><br><span class="line">the exact distribution terms <span class="keyword">for</span> each program are described <span class="keyword">in</span> the</span><br><span class="line">individual files <span class="keyword">in</span> /usr/share/doc/*/copyright.</span><br><span class="line"></span><br><span class="line">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span><br><span class="line">permitted by applicable law.</span><br></pre></td></tr></table></figure>
<p>至此，我们就可以用这个SSH key登陆<a href="http://www.github.com/">Github</a>，<a href="http://www.coding.net/">Coding.net</a>和VPS了。这样就可以直接用git和hexo布置blog和代码至三个地方。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>西门子S7通信</title>
    <url>/2022/10/18/s7-communication/</url>
    <content><![CDATA[<h2 id="心酸之路"><a href="#心酸之路" class="headerlink" title="心酸之路"></a>心酸之路</h2><p>去年下半年左右开始搞一些与西门子PLC通信的事情，也补了一些PLC编程知识，相信有一些编程基础的人，学PLC编程应该会很快的，尤其有一些C基础。</p>
<p>但是呢原来的程序一直一直是用OPC DA的方式与PLC通信，看了下代码质量确实不高，近20年前的代码，反正能运行读取数据，也没有重构的动力。</p>
<p>怎么工作的呢？有一个配置程序进行地址配置</p>
<ol>
<li>配置PLC地址串，连接方式</li>
<li>配置所有需要用到的变量，地址，数据类型，存在数据库一张表中</li>
<li>配置变量组，从上步中选取各变量，存在数据库一张表中</li>
<li>在程序中对应各变量组建立相应类，用于读写数据</li>
<li>配置连接，变量组等</li>
<li>变量组读到的数据通过for循环，每次用switch判断字符串，然后硬编码对应到对象的字段中去，还需要硬编码类型转换</li>
</ol>
<p>总之这个过程非常非常不优雅，太多模版代码，还有太多硬编码，既然已经配置好了地址对应的数据类型，为什么还需要硬编码转类型呢？而且当时里面用的EF读写数据库，那种操作真的是快让人吐，正常一个查询搞定的事，代码硬生生读取十几次数据库，然后很多读写数据库，速度慢得吓人。怎么做的呢？先查表按过滤条件，把id全找出来，对，只有id，然后对id列表用for循环，再用id去查数据库，一次查一条数据，再组装数据到对象中去，感觉完全不像是在用ORM框架。想死的心都有，完完全全不想动这些代码。</p>
<p>尝试过的S7通信方式：</p>
<ol>
<li>HslCommunication，感觉很全面，但是好像要付费，pass，国人写的</li>
<li>OPC UA Helper，用的OPC基金UA Client的包，然后西门子官网上有个Helper示例，试了试，还OK，但是需要PLC开启OPC UA功能，或用Kepware软件</li>
<li>s7netplus，比较不错，自己包装包装可以用得比较顺手，后面几个小项目用的是它</li>
<li>Eclipse Milo，OPC UA方式读写数据，未仔细研究，OPC UA方式暂时放弃</li>
<li>s7connector, Java，想着C#还不是很精通，用Java来试试，蛮久没有更新，没找到批量读取的功能。</li>
<li>plc4x，netty, SPI, opm, connection-pool, byte-buddy, 暂时发现还蛮合适的。</li>
</ol>
<h2 id="开整"><a href="#开整" class="headerlink" title="开整"></a>开整</h2><p>最开始的时候学习官方的方式，OPM，类似ORM，读取的数据直接映射到对象。</p>
<p>新建对象，类加上注解，字段加上注解并填上地址、类型，创建连接，ByteBuddy创建动态对象，拦截get&#x2F;set方法。get方法，判断是否在缓存时间内，如果在则直接返回缓存值，不在则从PLC中读取新值。set方法，直接写入值到PLC。这里有两个地方有坑，其它无参方法则会先读取所有PLC值，执行原无参方法，再将值写入PLC；其它一个参数方法，则会先读取PLC值，再执行原方法。这两点看源码能清楚，所以感觉Java这块比C#要好一些，随时能清楚代码干了什么事情，而不是包装得不清楚怎么实现的。</p>
<h3 id="动态类"><a href="#动态类" class="headerlink" title="动态类"></a>动态类</h3><p>了解了规则后，自己按照类型方法开整。</p>
<p>读取yml文件，两大配置，一是PLC地址，包含需要读取的数据列表；二是数据说明，TagName，地址，数据类型，转换类型，比例等。根据“数据说明”配置，生成动态类，加类注解<code>@PLCEntity</code>，字段加注解<code>@PLCField</code>并地址和缓存时间填入，生成相应get&#x2F;set方法，生成一个方法，带一个参数，用于从PLC读取所有字段值（从OPM源码了解有此功能）。</p>
<p>生成另一个动态类，和第一个动态类类似，但不增加注解，再增加另外2个字段，数据更新时间和PLC标识，用于写入数据库。另外如有比例变换，增加变换后的get方法，处理比例逻辑。现场间断生成，可能一些数值几个小时内都不会变化，如果采集数据都写入数据库，会有很多无效数据。后面新读的值与旧值比较，如果一样，则不写入数据库。从PLC读到值写入第一个动态生成的类对象，然后复制到第二个动态生成的类对象，此时后者多两个字段，是变化的，所以比较新旧值的时候，<code>hashCode</code>和<code>equals</code>方法将这两个字段值去掉。嗯，现场效果还可以。但是young GC比较多，可能与机制相关，频繁读取数据，生成新对象。</p>
<h3 id="改变策略"><a href="#改变策略" class="headerlink" title="改变策略"></a>改变策略</h3><p>前面的方法熟悉了bytebuddy的使用，以后写框架会有一些好处吧。</p>
<p>后面想了想，感觉没有必要生成动态类，直接用Map应该就可以了。嗯，MongoDB的bson里面有个Document很合适，写入数据后直接插入到MongoDB。新代码写完了，但是学没有到现场测试效果。不知道young GC会不会少一些。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Netty</tag>
        <tag>C#</tag>
        <tag>S7</tag>
        <tag>Milo</tag>
        <tag>OPC</tag>
        <tag>OPC UA</tag>
        <tag>OPC DA</tag>
        <tag>S7NetPlus</tag>
        <tag>S7Connector</tag>
        <tag>PLC4X</tag>
      </tags>
  </entry>
  <entry>
    <title>小试Docker</title>
    <url>/2017/12/26/use-docker-for-development/</url>
    <content><![CDATA[<p>正式全职做开发已经半年了，两台服务器作开发，Oracle&#x2F;MySQL&#x2F;Nexus&#x2F;Jenkins&#x2F;Redis&#x2F;ActiveMQ，一大堆的东东，还好有一些Linux的经验（上次CentOS被人挖矿，下次再说如何抓别人的），搭建这些东西都是比较容易的，当然不包括调优。就算自己搭建这些东西不难，但是真的比较费时间。后来有一个想法就是用<a href="https://www.docker.com/">Docker</a>，今天搞了大半天终于搞定了。记下来，便于以后自己翻查吧。</p>
<h1 id="后台架构"><a href="#后台架构" class="headerlink" title="后台架构"></a>后台架构</h1><p>前台用的是Vue来开发，后台Nginx处理静态文件，反向代理请求到Tomcat，Tomcat再到Redis&#x2F;ActiveMQ&#x2F;MySQL。</p>
<p>所以后台需要Nginx, Tomcat, Redis, MySQL这些软件。根据调用关系，先把底层的服务开启。<a href="https://www.docker.com/">Docker</a>安装就看官方文档吧。</p>
<h1 id="Redis服务"><a href="#Redis服务" class="headerlink" title="Redis服务"></a><a href="https://hub.docker.com/_/redis/">Redis</a>服务</h1><p>首先将<a href="https://hub.docker.com/_/redis/">Redis</a>的镜像(image)给拉到本地，然后开动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br><span class="line">docker run --name redis -p 6379:6379 --privileged -v `<span class="built_in">pwd</span>`/redis:/data -v `<span class="built_in">pwd</span>`/redis/redis.conf:/etc/redis/redis.conf -v /etc/localtime:/etc/localtime -v /etc/timezone:/etc/timezone -d redis redis-server /etc/redis/redis.conf</span><br><span class="line">-----</span><br><span class="line">docker <span class="built_in">exec</span> -it redis /bin/bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;vm.overcommit_memory = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.core.somaxconn = 65536&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<p><code>docker run</code>里面的参数含义分别是：</p>
<ul>
<li>name:给container取名字，方便以后操作，要不得填container ID，很不友好。</li>
<li>p:官方解释<code>Publish a container&#39;s port(s) to the host</code>，我的理解就是相当于一个端口映射吧。将主机的端口映射到容器的端口。</li>
<li>privileged:官方解释<code>Give extended privileges to this container</code>，主要是要修改一些container参数，要不会提示一些Warning。</li>
<li>v:<code>Bind mount a volume</code>，将host文件或目录挂载到container，这样可以直接在host修改一些配置文件或container产生的一些文件存在host。</li>
<li>d:<code>Run container in background and print container ID</code>，后台运行。</li>
</ul>
<p>然后redis需要远程访问，就要修改<code>redis.conf</code>，把<code>bind</code>给注释掉，<code>protedted-mod</code>改为<code>no</code>。</p>
<h1 id="MySQL服务"><a href="#MySQL服务" class="headerlink" title="MySQL服务"></a><a href="https://hub.docker.com/_/mysql/">MySQL</a>服务</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name mysql -e MYSQL_ROOT_PASSWORD=your-mysql-root-password -p 3306:3306 -v `<span class="built_in">pwd</span>`/mysql:/var/lib/mysql -v /etc/localtime:/etc/localtime -v /etc/timezone:/etc/timezone -d mysql/mysql-server</span><br></pre></td></tr></table></figure>
<p>注意将其中的<code>your-mysql-root-password</code>改为自己的密码。</p>
<p>这时<a href="https://hub.docker.com/_/mysql/">MySQL</a>的root不能远程访问，放狗搜的话一大堆。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql /bin/bash</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;your-mysql-root-password&#x27; WITH GRANT OPTION;</span><br><span class="line">FLUSH RIVILEGES</span><br></pre></td></tr></table></figure>

<h1 id="Tomcat服务"><a href="#Tomcat服务" class="headerlink" title="Tomcat服务"></a><a href="https://hub.docker.com/_/tomcat/">Tomcat</a>服务</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name tomcat -p 8080:8080 -v `<span class="built_in">pwd</span>`/tomcat/webapps:/usr/local/tomcat/webapps -v `<span class="built_in">pwd</span>`/tomcat/conf/tomcat-users.xml:/usr/local/tomcat/conf/tomcat-users.xml -v /etc/localtime:/etc/localtime -v /etc/timezone:/etc/timezone --<span class="built_in">link</span> redis:redis --<span class="built_in">link</span> mysql:mysql -d andreptb/tomcat</span><br></pre></td></tr></table></figure>
<p><code>--link</code>主要是一个container连接到另一个contaner，好像是在container的<code>/etc/hosts</code>加上到另一个容器的地上，然后environment里加一些环境变量。这个只是我的猜测，等过段里子好好看看<a href="https://www.docker.com/">Docker</a>的文件后再深入了解下。</p>
<p>这样在tomcat的应用中可以把jdbc.url里的host直接填mysql，redis的host填redis。比如<code>jdbc.url=jdbc:mysql://mysql:3306/test</code>。</p>
<h1 id="Nginx服务"><a href="#Nginx服务" class="headerlink" title="Nginx服务"></a><a href="https://hub.docker.com/_/nginx/">Nginx</a>服务</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name nginx -p 80:80 -v `<span class="built_in">pwd</span>`/nginx/html:/usr/share/nginx/html -v `<span class="built_in">pwd</span>`/nginx/nginx.conf:/etc/nginx/nginx.conf -v `<span class="built_in">pwd</span>`/nginx/conf.d:/etc/nginx/conf.d -v /etc/localtime:/etc/localtime -v /etc/timezone:/etc/timezone --<span class="built_in">link</span> tomcat:tomcat -d nginx</span><br></pre></td></tr></table></figure>
<figure class="highlight nginx"><figcaption><span>/etc/nginx/nginx.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">upstream</span> backend &#123;</span><br><span class="line">        <span class="attribute">server</span> tomcat:<span class="number">8080</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">fastcgi_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">proxy_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line"><span class="comment">#...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight nginx"><figcaption><span>/etc/nginx/conf.d/default.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">    <span class="section">location</span> /service/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Remote-Addr  <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span><span class="regexp"> ^~</span> /pic/ &#123;</span><br><span class="line">        <span class="attribute">root</span> /opt/web;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">        </span><br><span class="line">        <span class="section">location</span> <span class="regexp">~* \.(jpe?g|png|bmp|pdf)$</span> &#123;</span><br><span class="line">            <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /pic/default.png;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>嗯，好久好久没有写东西了。下次再讲讲<code>jenkins</code>吧，这个东东解放了好多时间，现在项目中我只是让它自己打包，打包出错时发送邮件。部署的话还没有去实现，主要是现阶段的代码问题太多了。现在还在思考一个问题，是否可以将<a href="https://www.docker.com/">Docker</a>用于生产环境，然后学习下自己制作Dockerfile，这样我就可以把上面所有的服务打成一个Dockerfile，给别人一个Dockerfile就可以直接用来开发，完全不用自己再去搭环境了。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH端口转发</title>
    <url>/2018/11/18/use-ssh-proxy/</url>
    <content><![CDATA[<h1 id="SSH端口转发"><a href="#SSH端口转发" class="headerlink" title="SSH端口转发"></a>SSH端口转发</h1><p><code>ssh</code>真的是很好用啊，传文件，本地&#x2F;远程&#x2F;动态端口转发，远程，X转发等等。X转发当时搞过一次，服务器没有安装X环境，无图形界面，要安装Oracle，当时搞了半天，用静默安装的形式安装好了一台。后来发现可以用SSH X转发，图形界面在我的机器上，实际安装程序在服务器上，好好玩啊。</p>
<p>嗯嗯，总结下在实际工作中使用最多的就是端口转发了。</p>
<h2 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h2><p>本地端口转发的命令是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -L [bind_address:]port:host:hostport gate-way-server</span><br></pre></td></tr></table></figure>

<p>ssh文档中对本地端口转发的说明：</p>
<blockquote>
<p>Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side. This works by allocating a socket to listen to port on the local side, optionally bound to the specified bind_address. Whenever a connection is made to this port, the connection is forwarded over the secure channel, and a connection is made to host port hostport from the remote machine. Port forwardings can also be specified in the configuration file. IPv6 addresses can be specified with an alternative syntax:<br>[bind_address&#x2F;]port&#x2F;host&#x2F;hostport or by enclosing the address in square brackets. Only the superuser can forward privileged ports. By default, the local port is bound in accordance with the GatewayPorts setting. However, an explicit bind_address may be used to bind the connection to a specific address. The bind_address of ‘’localhost’’ indicates that the listening port be bound for local use only, while an empty address or ‘*’ indicates that the port should be available from all interfaces.</p>
</blockquote>
<p>我的理解就是：本地开一个端口(<code>port</code>)，访问这个端口的效果和<code>gate-way-server</code>访问<code>host:hostport</code>的效果一样。这样我体会到的最大的用处就是可以访问受限制(<code>gate-way-server</code>)的内网端口。</p>
<p>比如我在外面出差，想访问公司内部<code>server-A</code>的<code>3389</code>端口，<code>server-B</code>的<code>3306</code>端口，<code>server-C</code>的<code>1521</code>端口。但是这些端口肯定是不会对外开放的，我访问<code>server-outer</code>服务器对外暴露的<code>22</code>端口。于是我通过下面的命令就可以解决我的需求。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -L 3389:server-A:3389 -L 3306:server-B:3306 -L 1521:server-C:1521 -L 2222:localhost:22 server-outer -fNnC</span><br></pre></td></tr></table></figure>

<p>这样，我就可以直接访问本地的<code>3389</code>, <code>3306</code>, <code>1521</code>, <code>2222</code>端口来达到访问<code>server-A:3389</code>, <code>server-B:3306</code>, <code>server-C:1521</code>, <code>server-outer:22</code>端口的目的了。可能表述的不是太清楚，网上有几张图说明得很直白。</p>
<p><img data-src="https://i.stack.imgur.com/a28N8.png" alt="Local port forwarding"></p>
<h2 id="远程端口转发"><a href="#远程端口转发" class="headerlink" title="远程端口转发"></a>远程端口转发</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -R [bind_address:]port:host:hostport remote-server</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Specifies that the given port on the remote (server) host is to be forwarded to the given host and port on the local side. This works by allocating a socket to listen to port on the remote side, and whenever a connection is made to this port, the connection is forwarded over the secure channel, and a connection is made to host port hostport from the local machine.</p>
</blockquote>
<blockquote>
<p>Port forwardings can also be specified in the configuration file. Privileged ports can be forwarded only when logging in as root on the remote machine. IPv6 addresses can be specified by enclosing the address in square braces or using an alternative syntax:<br>[bind_address&#x2F;]host&#x2F;port&#x2F;hostport.</p>
</blockquote>
<blockquote>
<p>By default, the listening socket on the server will be bound to the loopback interface only. This may be overridden by specifying a bind_address. An empty bind_address, or the address ‘*’, indicates that the remote socket should listen on all interfaces. Specifying a remote bind_address will only succeed if the server’s GatewayPorts option is enabled (see sshd_config(5)).</p>
</blockquote>
<blockquote>
<p>If the port argument is ‘0’, the listen port will be dynamically allocated on the server and reported to the client at run time.</p>
</blockquote>
<p>大概意思就是在<code>remote-server</code>上面绑定一个<code>port</code>，访问这个<code>port</code>的效果，就和本机现在访问<code>host:hostport</code>效果一样。</p>
<p>这种情况我也有使用，比如某处有两台电脑，<code>pc-1</code>能访问外网，<code>pc-2</code>不能访问外网，但<code>pc-1</code>和<code>pc-2</code>能互通。这时我在公司想访问<code>pc-1</code>和<code>pc-2</code>的<code>3389</code>端口，这个时候我就可以在<code>pc-1</code>机器上执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -R 13389:localhost:3389 -R 23389:pc-2:3389 remote-server</span><br></pre></td></tr></table></figure>

<p>其中<code>remote-server</code>为公司的一台电脑，互联网可以访问。这样我直接访问<code>remote-server</code>的<code>13389</code>和<code>23389</code>端口就可以直接连接到<code>pc-1:3389</code>和<code>pc-2:3389</code>端口了，十分好用啊。</p>
<p>哈哈，是不是相当于一个简单的内网穿透功能了。</p>
<p><img data-src="https://i.stack.imgur.com/a28N8.png" alt="Remote port forwarding"></p>
<h2 id="动态端口转发"><a href="#动态端口转发" class="headerlink" title="动态端口转发"></a>动态端口转发</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -D port remote-server</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Specifies a local ‘’dynamic’’ application-level port forwarding. This works by allocating a socket to listen to port on the local side, optionally bound to the specified bind_address. Whenever a connection is made to this port, the connection is forwarded over the secure channel, and the application protocol is then used to determine where to connect to from the remote machine. Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server. Only root can forward privileged ports. Dynamic port forwardings can also be specified in the configuration file.</p>
</blockquote>
<blockquote>
<p>IPv6 addresses can be specified with an alternative syntax:<br>[bind_address&#x2F;]port or by enclosing the address in square brackets. Only the superuser can forward privileged ports. By default, the local port is bound in accordance with the GatewayPorts setting. However, an explicit bind_address may be used to bind the connection to a specific address. The bind_address of ‘’localhost’’ indicates that the listening port be bound for local use only, while an empty address or ‘*’ indicates that the port should be available from all interfaces.</p>
</blockquote>
<p>通过本地的port访问互联网，相当于通过remote-server来访问互联网。</p>
<p>嗯嗯，以前用来当梯子用，后来墙升级，很不稳定，后来好像大家都没用它来当梯子了。当然墙应该不是破解了ssh，应该是只流量识别吧。</p>
<p><img data-src="https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/image005.jpg" alt="Dynmaic port forwarding"></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.ibm.com/developerworks/cn/aix/library/au-sshsecurity/index.html">SSH 安全性和配置入门</a></p>
<p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/">实战 SSH 端口转发</a></p>
<p><a href="https://unix.stackexchange.com/questions/115897/whats-ssh-port-forwarding-and-whats-the-difference-between-ssh-local-and-remot">What’s ssh port forwarding and what’s the difference between ssh local and remote port forwarding [duplicate]</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js使用ECharts内存泄漏问题</title>
    <url>/2021/09/14/vue-echarts-memory-leak/</url>
    <content><![CDATA[<p>前段见时间有个项目，自己想尽可能查看现场各设备的运行参数，显示一些统计信息，之前同事用C#写了个画面的，但感觉不灵活，换个项目，要改的东西就很多，界面基本需要重画。后来想起之前用ECharts做过电子在屏的，应该展示效果会更好。之前考虑用React做前端的，后来想想就一个页面，直接用Vue干吧，正好Vue也升级到3了，然后用Electron做个包装，也不用再下浏览器。记录下碰到的问题吧。</p>
<h2 id="ElementUI按需引入"><a href="#ElementUI按需引入" class="headerlink" title="ElementUI按需引入"></a>ElementUI按需引入</h2><p>之前Vue用的脚手架是<code>vue-cli</code>，统计时间是比较长的，升级到3之后，改用<code>vite</code>了，很方便。因为使用的组件不多，把ElementUI全部引入的话，JS文件会比较大，所以只引入使用的几个组件。参照<a href="https://element-plus.org/#/zh-CN/component/quickstart">官方文档</a>。</p>
<figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    <span class="title class_">ElButton</span>,</span><br><span class="line">    <span class="title class_">ElCol</span>,</span><br><span class="line">    <span class="title class_">ElInputNumber</span>,</span><br><span class="line">    <span class="title class_">ElProgress</span>,</span><br><span class="line">    <span class="title class_">ElRow</span>,</span><br><span class="line">    <span class="title class_">ElDescriptions</span>,</span><br><span class="line">    <span class="title class_">ElDescriptionsItem</span>,</span><br><span class="line">  &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> plugins = [</span><br><span class="line">      <span class="title class_">ElRow</span>,</span><br><span class="line">      <span class="title class_">ElCol</span>,</span><br><span class="line">      <span class="title class_">ElButton</span>,</span><br><span class="line">      <span class="title class_">ElDescriptions</span>,</span><br><span class="line">      <span class="title class_">ElDescriptionsItem</span>,</span><br><span class="line">      <span class="title class_">ElInputNumber</span>,</span><br><span class="line">      <span class="title class_">ElProgress</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">plugins.<span class="title function_">forEach</span>(<span class="function"><span class="params">plugin</span> =&gt;</span> &#123;</span><br><span class="line">    app.<span class="title function_">use</span>(plugin)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$ELEMENT</span> = &#123; <span class="attr">size</span>: <span class="string">&#x27;small&#x27;</span>, <span class="attr">zIndex</span>: <span class="number">3000</span> &#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="ECharts"><a href="#ECharts" class="headerlink" title="ECharts"></a>ECharts</h2><h3 id="按需引入"><a href="#按需引入" class="headerlink" title="按需引入"></a>按需引入</h3><p>ECharts升级到5之后，与之前的引入有一点区别，具体可参考<a href="https://echarts.apache.org/handbook/zh/basics/release-note/v5-upgrade-guide/">官方文档</a></p>
<figure class="highlight js"><figcaption><span>linechart.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BarChart</span>, <span class="title class_">LineChart</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/charts&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CanvasRenderer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/renderers&#x27;</span> <span class="comment">// CanvasRenderer, SVGRenderer</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">GridComponent</span>, <span class="title class_">TooltipComponent</span>, <span class="title class_">TitleComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/components&#x27;</span></span><br><span class="line"><span class="comment">// require(&#x27;echarts/theme/macarons&#x27;) // echarts theme</span></span><br><span class="line"><span class="keyword">import</span> resize <span class="keyword">from</span> <span class="string">&#x27;./mixins/resize&#x27;</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="VUE中引入ECharts"><a href="#VUE中引入ECharts" class="headerlink" title="VUE中引入ECharts"></a>VUE中引入ECharts</h3><p>最开始在VUE中引入ECharts老是报错，后来查了下，应该是DOM没有准备好，具体参考的应该是<a href="https://github.com/PanJiaChen/vue-element-admin">vue-element-admin</a>里面的配置来着。应该用<code>nextTick()</code>，待DOM准备好之后，ECharts绑定到DOM。</p>
<figure class="highlight js"><figcaption><span>LineChart.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">chart</span> = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// chart: null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initChart</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">initChart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    echarts.<span class="title function_">use</span>([<span class="title class_">BarChart</span>, <span class="title class_">LineChart</span>, <span class="title class_">GridComponent</span>, <span class="title class_">TooltipComponent</span>, <span class="title class_">TitleComponent</span>, <span class="title class_">CanvasRenderer</span>])</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">chart</span> = echarts.<span class="title function_">init</span>(<span class="variable language_">this</span>.<span class="property">$el</span>) <span class="comment">// 因为这个组件只有一个div展示图片，所以用this.$el，如果是其它，可使用this.refs..$el</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">chart</span>.<span class="title function_">setOption</span>(</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: &#123;</span><br><span class="line">          <span class="attr">text</span>: <span class="string">&#x27;title&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">grid</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="attr">left</span>: <span class="number">50</span>,</span><br><span class="line">            <span class="attr">right</span>: <span class="number">50</span>,</span><br><span class="line">            <span class="attr">bottom</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">containLabel</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">axisPointer</span>: &#123;</span><br><span class="line">          <span class="attr">link</span>: &#123;<span class="attr">xAxisIndex</span>: <span class="string">&#x27;all&#x27;</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">xAxis</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// id: &#x27;x1&#x27;, 解决内存泄漏</span></span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">            <span class="attr">boundaryGap</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">axisPointer</span>: &#123;</span><br><span class="line">              <span class="attr">type</span>: <span class="string">&#x27;shadow&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">splitLine</span>: &#123;</span><br><span class="line">              <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">interval</span>: <span class="number">9</span>,</span><br><span class="line">              <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;dashed&quot;</span>,</span><br><span class="line">                <span class="attr">color</span>: <span class="string">&quot;rgba(0, 0, 0, 1)&quot;</span>,</span><br><span class="line">                <span class="attr">shadowBlur</span>: <span class="number">2</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//id: &#x27;x2&#x27;,</span></span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">            <span class="attr">boundaryGap</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">position</span>: <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">            <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">              <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">tooltip</span>: &#123;</span><br><span class="line">          <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span>,</span><br><span class="line">          <span class="attr">axisPointer</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">            <span class="attr">animation</span>: <span class="literal">false</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">yAxis</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//id: &#x27;y1&#x27;,</span></span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;y1&#x27;</span>,</span><br><span class="line">            <span class="attr">max</span>: <span class="number">900</span>,</span><br><span class="line">            <span class="attr">min</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">interval</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">              <span class="attr">formatter</span>: <span class="string">&#x27;&#123;value&#125; °C&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">axisTick</span>: &#123;</span><br><span class="line">              <span class="attr">show</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">axisLine</span>: &#123;</span><br><span class="line">              <span class="attr">show</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">splitLine</span>: &#123;</span><br><span class="line">              <span class="attr">show</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//id: &#x27;y2&#x27;,</span></span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;y2&#x27;</span>,</span><br><span class="line">            <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">              <span class="attr">formatter</span>: <span class="string">&#x27;&#123;value&#125; min&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">axisTick</span>: &#123;</span><br><span class="line">              <span class="attr">show</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">axisLine</span>: &#123;</span><br><span class="line">              <span class="attr">show</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">splitLine</span>: &#123;</span><br><span class="line">              <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//id: &#x27;y3&#x27;,</span></span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;y3&#x27;</span>,</span><br><span class="line">            <span class="attr">inverse</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">min</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">series</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//id: &#x27;s1&#x27;,</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;s1&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//id: &#x27;s2&#x27;,</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;s2&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">            <span class="attr">yAxisIndex</span>: <span class="number">1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//id: &#x27;s3&#x27;,</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;s3&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">            <span class="attr">xAxisIndex</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">yAxisIndex</span>: <span class="number">2</span>,</span><br><span class="line">          &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">chart</span>.<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;series&#x27;</span>, <span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;click&#x27;</span>, <span class="built_in">parseInt</span>(params.<span class="property">name</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><p>参照ECharts的样例做好了一个动态更新的图表，每秒从后台拉下数据进行更新，还蛮好看的。可是过两天后发现浏览器或者Electron内存暴了，直接把系统快干死。当时不清楚哪里的问题，以为是每秒获取数据后处理有问题，检查了好久都没办法解决，最后只好排除法，页面上的东西一个个排除观察一段时间看内存是不是一直往上涨，最后定位到ECharts。上网查了下，发现有提到的<code>echarts.clear()</code>或<code>echarts.dispose()</code>，感觉这个有点不靠谱，这样子那不是每次echarts都需要重新生成？反正也试了，确实效果不好，图表都是重新生成，不能连续变化。</p>
<p>没办法，查<a href="https://echarts.apache.org/zh/api.html#echartsInstance.setOption">文档</a>吧，最后还真发现了些什么。里面有个<code>组件合并模式</code>，就是每次数据变化后都会调用一次<code>this.echarts.setOption()</code>，因为设置不当，数据一直往图表里面填，没有释放旧数据。其实解决办法很简单，就是把有变动的地方设置好ID，每次更新就更新带ID的数据。</p>
<figure class="highlight js"><figcaption><span>LineChart.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">chart</span>.<span class="title function_">setOption</span>(</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">xAxis</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;x1&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: xArray</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;x2&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: xArray,</span><br><span class="line">    &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">yAxis</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;y2&#x27;</span>,</span><br><span class="line">        <span class="attr">max</span>: <span class="title class_">Math</span>.<span class="title function_">max</span>(...stayTimes.<span class="title function_">filter</span>(<span class="function"><span class="params">e</span> =&gt;</span> !<span class="built_in">isNaN</span>(e))),</span><br><span class="line">        <span class="attr">min</span>: <span class="title class_">Math</span>.<span class="title function_">min</span>(...stayTimes.<span class="title function_">filter</span>(<span class="function"><span class="params">e</span> =&gt;</span> !<span class="built_in">isNaN</span>(e))),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;y3&#x27;</span>,</span><br><span class="line">        <span class="attr">max</span>: <span class="title class_">Math</span>.<span class="title function_">max</span>(...stayTimesDelta.<span class="title function_">filter</span>(<span class="function"><span class="params">e</span> =&gt;</span> !<span class="built_in">isNaN</span>(e))) * <span class="number">10</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;s1&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: chargeTemps</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;s2&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: stayTimes</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;s3&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: stayTimesDelta</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>ECharts</tag>
        <tag>Element</tag>
      </tags>
  </entry>
  <entry>
    <title>家庭网络配置</title>
    <url>/2024/01/29/home-network-configuration/</url>
    <content><![CDATA[<p>19年的时候搞了块J3455的板子自己拼了个NAS，可能机箱空间太小，硬盘数据线有时接触不佳，老掉盘。搞了2个2T,1个3T的SATA硬盘，当时图便宜都是SMR的盘，硬盘数据老真的是老慢慢，现在准备是用来搞冷备使用了。系统盘当时用的一个Thinkpad T400淘汰下来2.5寸的机械硬盘，老盘时常出问题，一出问题就只能把机箱搬到电视机前（家里没有HDMI显示器），然后再调试。搞过几次吧，很烦，于是搞了个HPE Microserver Gen8，主要是有iLO，解决显示器的问题。然后后面又搞了一些二手的东西，把家里的网络终于搞得可用了。</p>
<h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>GPON: <code>Nokia G-010S-A</code>，原来用的是运营商光猫桥接，然后有个<code>Buffalo WZR-HP-AG300H</code>刷了OpenWrt来拨号。后来买了个弱三层的交换机，就全部网络设备动了动。</p>
<p>主路由：<code>EdgeRouter X-SFP</code>，当时在小黄鱼蹲守的时候，主要看中的是这个和<code>Mirotik hEX S</code>，两个价格差不多，但前者存储比后者大，所以就入了X-SFP。入手后发现还是X-SFP比较适合我吧，系统基于Debian，配置相对ROS也简单。但确实ROS要配置更丰富一些。</p>
<p><em>核心</em>交换机：<code>Huarong S5735S-L8T4S-QA2</code>，当时某项目现场用到了这个型号，PDD入了一个，感觉应该是弱三层里非常非常便宜的了。</p>
<p><em>接入</em>交换机：<code>Linksys SLM2008</code>，简单网管交换机，最早为了测试链路聚合，二手入的。</p>
<p>无线<em>AP</em>：<code>Huawei AX6</code>，刚开始用的是<code>Tenda AC6</code>。两个都是纯AP模式，后面新买的效果真的是秒杀。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>以前用的是OpenWrt通过MAC配合防火墙来实现设备是否可以上网，解决未经许可连接WIFI的人蹭网，主要是常常有人用Android的什么万能钥匙，<a href="/2019/04/05/openwrt-restricting-internet-access-based-on-mac-address/">具体设置</a>。</p>
<p>现在用弱三层交换机当核心，实现DHCP Server，ACL控制，路由器与交换机通过OSPF动态路由，这样交换机及路由器功能分开，坏一个，其他能正常工作。不同网段通过ACL进行限速。</p>
<p>然后用GPON可以省掉光猫。用AX6无线路由器当AP，再配合交换机的MAC-VLAN功能，实现无线设备的网络隔离。</p>
<p>具体现有的大致网络示意图如下。</p>
<p><img data-src="https://onedrive.live.com/embed?resid=144CD4C035C1BE4B!1315243&authkey=!AG0aEsKgwprzzUs&width=801&height=864" alt="networking"></p>
<h3 id="GPON"><a href="#GPON" class="headerlink" title="GPON"></a>GPON</h3><p>最初想直接把GPON插在交换机上使用，发现可以识别，但无法使用，后面才买的X-SFP路由器。但GPON最开始的时候LAN IP是<code>192.168.1.10</code>，和现有的网络冲突，记得好像是用<code>fwsetenv</code>的命令改了IP地址，只修改配置文件不行，稍微研究了下，应该是配置文件写到变量里面去了，启动的时候读取mtd分区来设置环境变量，所以单纯修改配置文件无效。</p>
<h3 id="主路由"><a href="#主路由" class="headerlink" title="主路由"></a>主路由</h3><p>路由器用的是X-SFP，基本满足了我的需求，但是IPv6这块有点小问题，好像无法用DHCPv6 Server来分配从ISP获得的IPv6 PD进行网络划分，但Mikrotik可以实现。OSPF动态路由，主网10.0.0.0&#x2F;24（路由器LAN），子网192.168.100.0&#x2F;24（GPON LAN）。</p>
<p>现在主路由的功能主要是：</p>
<ol>
<li>PPPoE拨号</li>
<li>FRP内网穿透（IPv4 SSH）</li>
<li>Wireguard，外网可连接路由器</li>
<li>脚本实现IPv6 DDNS，DigitalOcean可以通过curl来更新DNS记录，方便用IPv6的时候进行连接SSH控制内网。</li>
</ol>
<script src="//gist.github.com/888e318fd1f49ec4063fc016e67c7079.js?file=updateEdgeosDNS.sh"></script>

<ol start="5">
<li>DNS查询转至内网<code>Pihole</code>，解决部分流氓软件或广告，以及实现内外网同一域名访问服务。同时运行一个小脚本，当内网<code>Pihole</code>无法正常提供服务器，放行外网DNS查询。</li>
</ol>
<script src="//gist.github.com/888e318fd1f49ec4063fc016e67c7079.js?file=pihole-check.sh"></script>

<p>其他上<a href="https://github.com/psitem/edgerouter-backup">Github</a>上找了一个自动备份的脚本，原本是可以在<code>commit</code>的时候自动进行备份，后面发现在频繁，于是改动每天自动备份。</p>
<p>其中各接口用途：</p>
<ul>
<li>Eth0: 之前用于接光猫桥接进行PPPoE拨号的，后空着，后续如果ISP禁了GPON的话，可以直接连光猫使用。</li>
<li>Eth1、Eth2: Switch0（10.0.0.1&#x2F;24），VIF 1000（IPv6），接内网。</li>
<li>Eth3: 192.168.200.1，PoE 24v供电给Mikrotik 750Gr3，开启DHCP Server，主要是测试Ros使用，不测试的时候PoE取消。</li>
<li>Eth4: VIF 8（192.168.8.x），连接交换机管理VLAN，可通过路由器直接管理交换机。</li>
<li>Eth5: 192.168.100.1，PPPoE拨号。</li>
</ul>
<p><a href="https://gist.github.com/glw119/888e318fd1f49ec4063fc016e67c7079#file-er-x-sfp-config">路由器具体配置</a>，其中部分就是防火墙部分需要开启对应的规则，LOCAL、IN等端口。</p>
<h4 id="路由器IPv6设置"><a href="#路由器IPv6设置" class="headerlink" title="路由器IPv6设置"></a>路由器IPv6设置</h4><p>最开始向导设置的时候就启用IPv6，这样系统会自动创建IPv6的防火墙规则，省不少事。IPv6我主要是用来外网直接访问内网服务和SSH，以及PT下载。AKA：之前是可以直接访问443端口的，后来封掉，只改用其他端口了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall &#123;</span><br><span class="line">  options &#123;</span><br><span class="line">    mss-clamp &#123;</span><br><span class="line">      interface-type pppoe</span><br><span class="line">      mss 1452</span><br><span class="line">    &#125;</span><br><span class="line">    mss-clamp6 &#123;</span><br><span class="line">      interface-type pppoe</span><br><span class="line">      mss 1432 #解决IPv6上网慢的问题</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">interfaces &#123;</span><br><span class="line">  ethernet eth5 &#123;</span><br><span class="line">    address 192.168.100.1/24</span><br><span class="line">    description &quot;Internet SFP&quot;</span><br><span class="line">    pppoe 1 &#123;</span><br><span class="line">      default-route auto</span><br><span class="line">      dhcpv6-pd &#123;</span><br><span class="line">        no-dns</span><br><span class="line">        pd 1 &#123;</span><br><span class="line">          interface switch0.1000 &#123;</span><br><span class="line">            host-address ::1</span><br><span class="line">            no-dns</span><br><span class="line">            prefix-id :1</span><br><span class="line">            service slaac</span><br><span class="line">          &#125;</span><br><span class="line">          prefix-length /60</span><br><span class="line">        &#125;</span><br><span class="line">        rapid-commit enable</span><br><span class="line">      &#125;</span><br><span class="line">      ipv6 &#123;</span><br><span class="line">        address &#123;</span><br><span class="line">          autoconf</span><br><span class="line">        &#125;</span><br><span class="line">        dup-addr-detect-transmits 1</span><br><span class="line">        enable &#123;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  switch switch0 &#123;</span><br><span class="line">    vif 1000 &#123;</span><br><span class="line">      description IPv6_HOME_LAN</span><br><span class="line">      ipv6 &#123;</span><br><span class="line">        router-advert &#123;</span><br><span class="line">          default-lifetime 1800</span><br><span class="line">          max-interval 600</span><br><span class="line">          min-interval 60</span><br><span class="line">          prefix ::/64 &#123;</span><br><span class="line">            autonomous-flag true</span><br><span class="line">            on-link-flag true</span><br><span class="line">            preferred-lifetime 86400</span><br><span class="line">            valid-lifetime 86400</span><br><span class="line">          &#125;</span><br><span class="line">          reachable-time 0</span><br><span class="line">          retrans-timer 0</span><br><span class="line">          send-advert true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  wireguard wg0 &#123;</span><br><span class="line">    address 10.8.2.x/32</span><br><span class="line">    description Wireguard</span><br><span class="line">    mtu 1420</span><br><span class="line">    peer xxx &#123;</span><br><span class="line">      allowed-ips 10.8.2.0/24</span><br><span class="line">      endpoint xxxx:52550</span><br><span class="line">      persistent-keepalive 60</span><br><span class="line">    &#125;</span><br><span class="line">    private-key ****************</span><br><span class="line">    route-allowed-ips true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">service &#123;</span><br><span class="line">  # 转发DNS请求至pihole</span><br><span class="line">  nat &#123;</span><br><span class="line">    rule 10 &#123;</span><br><span class="line">      description DNS</span><br><span class="line">      destination &#123;</span><br><span class="line">        address !192.168.1.199</span><br><span class="line">        port 53,5353,5354,853</span><br><span class="line">      &#125;</span><br><span class="line">      inbound-interface switch0</span><br><span class="line">      inside-address &#123;</span><br><span class="line">        address 192.168.1.199</span><br><span class="line">        port 53</span><br><span class="line">      &#125;</span><br><span class="line">      protocol tcp_udp</span><br><span class="line">      source &#123;</span><br><span class="line">        address !192.168.1.199</span><br><span class="line">      &#125;</span><br><span class="line">      type destination</span><br><span class="line">    &#125;</span><br><span class="line">    rule 5002 &#123;</span><br><span class="line">      description &quot;Maqquerade for DNS&quot;</span><br><span class="line">      destination &#123;</span><br><span class="line">        address 192.168.1.199</span><br><span class="line">        port 53</span><br><span class="line">      &#125;</span><br><span class="line">      outbound-interface switch0</span><br><span class="line">      protocol tcp_udp</span><br><span class="line">      source &#123;</span><br><span class="line">        address 192.168.0.0/16</span><br><span class="line">      &#125;</span><br><span class="line">      type masquerade</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="核心交换机"><a href="#核心交换机" class="headerlink" title="核心交换机"></a><em>核心</em>交换机</h2><p>当时想搞个三层交换机的原因就是想家里用VLAN进行网络隔离，并对不同网段进行上网限制，但内网访问速度不进行限。最早的时候用<code>X-SFP</code>当单臂路由进行VLAN隔离的，网间流量需要经过路由器，且路由器firewall规则多了之后会影响速度，最后买了个弱三层交换机。</p>
<p>有线部分的网段划分比较简单，然后AX6不支持WIFI VLAN隔离，最后查文档的时候想到VLAN划分还有MAC划分，然后想着就WIFI过来靠MAC进行VLAN划分。</p>
<p>VLAN划分如下：</p>
<ul>
<li>8: 管理VLAN</li>
<li>100: 用于上行链路，连路由器</li>
<li>200: 服务器及需要大带宽的设备，不限速，其他网段无法访问此网段，除NAS，Pihole</li>
<li>210: 一般设备接入，默认WIFI接入VLAN，下行限100，上行限20</li>
<li>220: 用于IoT，摄像头、天猫精灵、火火兔等，下行限10，上行限10</li>
<li>230: 用于不让连外网的设备，电视机、无线路由器AX6、空调、天猫精灵（不让小孩听的时候）等</li>
<li>1000: 用于IPv6接入</li>
</ul>
<p>每VLAN配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vlan 8</span><br><span class="line"> description lan for mgmt</span><br><span class="line"> name MGMT_LAN</span><br><span class="line"> management-vlan</span><br><span class="line">vlan 100</span><br><span class="line"> description to route</span><br><span class="line">vlan 200</span><br><span class="line"> description lan for home</span><br><span class="line"> name HOME_LAN</span><br><span class="line"> mac-vlan mac-address e45e-3732-xxxx priority 0</span><br><span class="line"> dhcp snooping enable</span><br><span class="line"> ipv4 source check user-bind enable</span><br><span class="line"> ipv6 source check user-bind enable</span><br><span class="line">vlan 210</span><br><span class="line"> description lan for guest</span><br><span class="line"> name GUEST_LAN</span><br><span class="line"> dhcp snooping enable</span><br><span class="line"> ipv4 source check user-bind enable</span><br><span class="line"> ipv6 source check user-bind enable</span><br><span class="line"> traffic-policy tp_vlan210-to-lan inbound</span><br><span class="line">vlan 220</span><br><span class="line"> description lan for IoT</span><br><span class="line"> name IoT_LAN</span><br><span class="line"> mac-vlan mac-address ec3d-fdbe-xxxx priority 0</span><br><span class="line"> dhcp snooping enable</span><br><span class="line"> ipv4 source check user-bind enable</span><br><span class="line"> ipv6 source check user-bind enable</span><br><span class="line"> traffic-policy tp_vlan210-to-lan inbound</span><br><span class="line">vlan 230</span><br><span class="line"> description intranet</span><br><span class="line"> name Intra_LAN</span><br><span class="line"> mac-vlan mac-address 345b-bb8f-xxxx priority 0</span><br><span class="line"> dhcp snooping enable</span><br><span class="line"> ipv4 source check user-bind enable</span><br><span class="line"> ipv6 source check user-bind enable</span><br><span class="line"> traffic-policy tp_permit-199 inbound</span><br><span class="line">vlan 1000</span><br><span class="line"> description ipv6 for lan</span><br><span class="line">interface Vlanif8</span><br><span class="line"> ip address 192.168.8.x 255.255.255.0</span><br><span class="line"></span><br><span class="line">interface Vlanif100</span><br><span class="line"> ip address 10.0.0.2 255.255.255.0</span><br><span class="line">interface Vlanif200</span><br><span class="line"> ip address 192.168.1.1 255.255.255.0</span><br><span class="line"> dhcp select interface</span><br><span class="line"> dhcp server ip-range 192.168.1.x 192.168.1.x</span><br><span class="line"> dhcp server gateway-list 192.168.1.1</span><br><span class="line"> dhcp server dns-list 192.168.1.199 223.5.5.5 114.114.114.114</span><br><span class="line"> dhcp server logging allocation-fail allocation-success renew-success</span><br><span class="line">interface Vlanif210</span><br><span class="line"> ip address 192.168.21.1 255.255.255.0</span><br><span class="line"> dhcp select interface</span><br><span class="line"> dhcp server ip-range 192.168.21.x 192.168.21.x</span><br><span class="line"> dhcp server gateway-list 192.168.21.1</span><br><span class="line"> dhcp server dns-list 192.168.1.199 223.5.5.5 114.114.114.114</span><br><span class="line">interface Vlanif220</span><br><span class="line"> ip address 192.168.22.1 255.255.255.0</span><br><span class="line"> dhcp select interface</span><br><span class="line"> dhcp server ip-range 192.168.22.x 192.168.22.x</span><br><span class="line"> dhcp server gateway-list 192.168.22.1</span><br><span class="line"> dhcp server dns-list 192.168.1.199 223.5.5.5 114.114.114.114</span><br><span class="line"> dhcp server logging allocation-fail allocation-success renew-success</span><br><span class="line">interface Vlanif230</span><br><span class="line"> ip address 192.168.23.1 255.255.255.0</span><br><span class="line"> dhcp select interface</span><br><span class="line"> dhcp server ip-range 192.168.23.x 192.168.23.x</span><br><span class="line"> dhcp server gateway-list 192.168.23.1</span><br><span class="line"> dhcp server dns-list 192.168.23.1</span><br><span class="line"> dhcp server logging allocation-fail allocation-success renew-success</span><br></pre></td></tr></table></figure>

<p>各接口设置：</p>
<ul>
<li><p>G0&#x2F;0&#x2F;2: 上行链接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface GigabitEthernet0/0/2</span><br><span class="line"> port link-type hybrid</span><br><span class="line"> port hybrid pvid vlan 100</span><br><span class="line"> undo port hybrid vlan 1</span><br><span class="line"> port hybrid tagged vlan 1000</span><br><span class="line"> port hybrid untagged vlan 100</span><br><span class="line"> loopback-detect enable</span><br><span class="line"> traffic-policy tp_dest-vlan210 inbound</span><br><span class="line"> traffic-policy tp_source-vlan210 outbound</span><br><span class="line"> dhcp snooping enable</span><br></pre></td></tr></table></figure>
</li>
<li><p>G0&#x2F;0&#x2F;6,G0&#x2F;0&#x2F;8: Eth-Trunk，连NAS链路聚合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface GigabitEthernet0/0/6</span><br><span class="line"> eth-trunk 1</span><br><span class="line">interface GigabitEthernet0/0/8</span><br><span class="line"> eth-trunk 1</span><br><span class="line">interface Eth-Trunk1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> undo port trunk allow-pass vlan 1</span><br><span class="line"> port trunk allow-pass vlan 8 200 210 220 230 1000</span><br><span class="line"> loopback-detect enable</span><br><span class="line"> stp edged-port enable</span><br><span class="line"> dhcp snooping enable</span><br></pre></td></tr></table></figure>
</li>
<li><p>G0&#x2F;0&#x2F;1,G0&#x2F;0&#x2F;3,G0&#x2F;0&#x2F;4,G0&#x2F;0&#x2F;5,G0&#x2F;0&#x2F;7,G0&#x2F;0&#x2F;9-G0&#x2F;0&#x2F;12: 下行链接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface G0/0/x</span><br><span class="line"> energy-efficient-ethernet enable #SFP无</span><br><span class="line"> port-auto-sleep enable #SFP无</span><br><span class="line"> port link-type hybrid</span><br><span class="line"> port hybrid pvid vlan 210</span><br><span class="line"> undo port hybrid vlan 1</span><br><span class="line"> port hybrid tagged vlan 8</span><br><span class="line"> port hybrid untagged vlan 200 210 220 230</span><br><span class="line"> loopback-detect enable</span><br><span class="line"> stp edged-port enable</span><br><span class="line"> mac-vlan enable</span><br><span class="line"> dhcp snooping enable</span><br></pre></td></tr></table></figure></li>
</ul>
<p>OSPF及ACL策略：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ospf 1 router-id 10.0.0.2</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 10.0.0.0 0.0.0.255</span><br><span class="line"> area 0.0.0.1</span><br><span class="line">  network 192.168.1.0 0.0.0.255</span><br><span class="line">  network 192.168.21.0 0.0.0.255</span><br><span class="line">  network 192.168.22.0 0.0.0.255</span><br><span class="line"></span><br><span class="line">traffic behavior tb_dest-vlan210</span><br><span class="line"> car cir 51200 pir 102400 cbs 6400000 pbs 12800000 mode color-blind green pass yellow pass red discard</span><br><span class="line">traffic behavior tb_dest-vlan220</span><br><span class="line"> car cir 5120 pir 10240 cbs 640000 pbs 1280000 mode color-blind green pass yellow pass red discard</span><br><span class="line">traffic behavior tb_source-vlan210</span><br><span class="line"> car cir 5120 pir 10240 cbs 640000 pbs 1280000 mode color-blind green pass yellow pass red discard</span><br><span class="line">traffic behavior tb_source-vlan220</span><br><span class="line"> car cir 5120 pir 10240 cbs 640000 pbs 1280000 mode color-blind green pass yellow pass red discard</span><br></pre></td></tr></table></figure>

<h2 id="SLM2008"><a href="#SLM2008" class="headerlink" title="SLM2008"></a>SLM2008</h2><p>交换机没有华为系的Hybrid接口，把连AP的口和上链口都设成同一个untagged vlan ID，这样可以靠上链交换机的MAC-VLAN功能进行VLAN划分。其他口我也没再划分其他VLAN的想法，都设成同一个untagged，只是上链口还有一个tagged vlan 8，这样可对其进行简单管理。</p>
<h2 id="Gen8"><a href="#Gen8" class="headerlink" title="Gen8"></a>Gen8</h2><p>哈，刚买Gen8的时候，少几个螺丝，跟客服沟通，我说买的G8（J8）少几个螺丝，那边哥们狂笑，连忙说Gen8（根8），哈哈哈。</p>
<p>硬件稍微升级了下，CPU&#x2F;E3-1265L V2，内存&#x2F;HPE SmartMemory 8Gx2，RAID卡&#x2F;Smart Array P222 Controller，硬盘&#x2F;SAS 4Tx4&#x2F;SSD 512G&#x2F;SD 8G。P222卡的温度还有点高，买了个4cm风扇，接主板里面的USB供电，从原来的70度降到47度左右，不知道夏天温度会怎样。</p>
<p>Host OS: <code>HPE-ESXi-6.7.0-Update3-19195723-iso-Gen9plus-670.U3.10.9.0.8 (Hewlett Packard Enterprise)</code>，安装在内置的8G SD卡，为了减少SD卡的写操作，将系统的log日志改写到其他Datasource里。</p>
<p>最开始的时候买了个PCIe转NVMe的卡，然后Datasource就放在这个盘里面。后来看到小黄鱼上面有4个4T的SAS盘，买回来后感觉还是超值的，2021年产，通电时间2年，写入只有30多G。为了这4个盘，所以买了P222卡（改成HBA模式），然后PCIe转NVMe的卡只能下岗。后面把SATA 5位置（ODD）升级为512G的SSD盘了，之前是一个12年买的Intel 40G :(，虽然接口速度只有SATA1，但用来安装Guest OS影响不大。然后Guest OS备份的话，可以直接挂载Guest OS的NFS成Datasource，将备份文件存到NFS里。</p>
<h3 id="Guest-OS"><a href="#Guest-OS" class="headerlink" title="Guest OS"></a>Guest OS</h3><ol>
<li>Alpine: Docker Image里经常看到的OS。这里最主要的作用是用来跑Docker aList，用来挂载中国移动的网盘，然后Debian挂载，备份文件存到网盘。最开始的时候是在Debian里面直接容器跑的，但是不能一启动就挂载，所以改到Alpine里面跑，然后把Alpine设置成随Host OS第一个启动，Debian延迟启动，这样就不用去搞脚本在Debian里延迟挂载，总感觉优雅，所以单独用Alpine提供aList网盘服务，Debian启动直接WebDav挂载。</li>
<li>Debian: 主力NAS系统。直通P222卡，挂载4个SAS盘。三张网卡，分别对应VLAN 200&#x2F;8&#x2F;1000，不限速网段&#x2F;管理网段&#x2F;IPv6网段。<br>  2.1 提供SMB服务，TV Kodi给小孩看影片，通过Siri可<a href="/2023/02/18/remote-control-nas-samba/">远程开关服务</a>。<br>  2.2 提供NFS服务，TV Kodi给大人看影片，呵呵，Kodi可设置多个profile，这样小孩默认profile默认是用SMB，而切换profile后默认是用NFS。 :)<br>  2.3 Nextcloud容器，方便手机照片备份以及其他一些小资料存储<br>  2.4 Navidrome容器，提供音频服务，硬盘里有一直存放的音乐，可以用手机播放，还能用CarPlay，很不错，解决了车上听歌的问题，不用再烦各种音乐播放软件<br>  2.5 Pihole容器，提供内网DNS服务，解决部分广告及隐私收集问题，还有内网域名解析。<br>  2.6 qBittorrent容器，主要用于PT下载。之前用的Transmission，几个CUI停更后，换成qBittorrent了。<br>  2.7 其他，FRP内网穿透，Netty-Protobuf内网穿透（自己写的），Wireguard内网穿透，CURL脚本更新域名DNS IPv6地址，Nginx反代各二级域名访问内网以上各服务及iLO、ESXi等（同步VPS的SSL证书，并加简单认证），BorgBackup备份Debian系统、Nextcloud及个人资料并定时上传到网盘。</li>
<li>Win7: QQ或Wechat使用，远程给小孩打印作业 :)，并增加各网段网卡测试使用。</li>
<li>DSM7: 当时本来打印用作主力NAS的，因无法使用现有硬盘资料，且挂载的NFS无法使用各服务（当时主要想用Audio Station）。现在主要用来下载一些其他网盘的资料，比如OneDrive，GoogleDrive等。</li>
<li>FreeBSD: 想着用ZFS，但没法用Docker，又不想再去折腾Jail，放弃作主力NAS，当作测试使用。</li>
<li>Gentoo: 一直非常喜欢的一个发行版本，当时在上家单独，一直用它当主力开发系统。留着测试使用。</li>
<li>pfSense: 尝尝其他系统 :)</li>
</ol>
<h2 id="访问内网服务"><a href="#访问内网服务" class="headerlink" title="访问内网服务"></a>访问内网服务</h2><p>域名DNS设置：</p>
<ul>
<li>A Record: 设置成VPS的IPv4地址，然后NAS里设置FRP将Nginx端口映射到VPS，再在VPS的Nginx设置反代到FRP映射的端口，NAS里的Nginx通过二级域名访问各服务。<code>Internet --&gt; VPS Nginx --&gt; FRP --&gt; NAS Nginx --&gt; 各服务</code>。</li>
<li>AAAA Record: 因某国内最轻的VPS没有IPv6地址，NAS脚本每隔1小时更新此记录。这样可以直接SSH连到内网，或访问各服务。<code>Internet --&gt; NAS Nginx --&gt; 各服务</code>。</li>
<li>CNAME Record: 设置各服务的二级域名alias到前面A和AAAA记录上，这样只需改A和AAAA记录，服务的二级域名无需修改。</li>
</ul>
<p>主要参考：</p>
<ul>
<li><a href="https://medium.com/@metalsecops/host-your-own-music-streaming-server-with-navidrome-6e4bdc9ae14b">Host Your Own Music Streaming Server with Navidrome</a></li>
<li><a href="https://forums.unraid.net/topic/91922-convert-hp-smart-array-controller-to-hba-mode/">Convert HP Smart Array Controller to HBA Mode</a></li>
<li><a href="https://samuel.kadolph.com/2015/02/mtu-and-tcp-mss-when-using-pppoe-2/">MTU and TCP MSS when using PPPoE</a></li>
<li><a href="https://vk2.net/articles/Use-Aussie-Broadband-Framed-Route-on-a-Mikrotik-Router">Use Aussie Broadband’s Framed Route on a Mikrotik Router</a></li>
<li><a href="https://sparktour.me/2023/10/18/mikrotik-routeros-openwrt-ipv6-prefix-delegation/">使用 Mikrotik RouterOS 和 Openwrt 在 ISP 获得的 IPv6 Prefix 上配置二级 PD</a></li>
<li><a href="https://iecho.cc/2023/05/04/routeros-bullshit/">RouterOS 入门与最佳实践</a></li>
<li><a href="https://hack-gpon.org/ont-fs-com-gpon-onu-stick-with-mac/">FS.com GPON ONU Stick with MAC (GPON-ONU-34-20BI)</a></li>
<li><a href="https://hack-gpon.org/ont-nokia-g-010s-a/">Nokia G-010S-A</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>NAS</tag>
        <tag>SMB</tag>
        <tag>NFS</tag>
        <tag>Gen8</tag>
      </tags>
  </entry>
</search>
